
Auxiliary_Control-V5.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005170  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  0800527c  0800527c  0001527c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052b8  080052b8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080052b8  080052b8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052b8  080052b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052bc  080052bc  000152bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080052c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000070  08005330  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  08005330  000203ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e40e  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ae5  00000000  00000000  0003e4a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001d002  00000000  00000000  00042f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  0005ff90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003240  00000000  00000000  00060f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b2aa  00000000  00000000  000641b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029a69  00000000  00000000  0007f462  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094a5e  00000000  00000000  000a8ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013d929  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b0c  00000000  00000000  0013d97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005264 	.word	0x08005264

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005264 	.word	0x08005264

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800019e:	2afd      	cmp	r2, #253	; 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	; 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_drsub>:
 80002b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b8:	e002      	b.n	80002c0 <__adddf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_dsub>:
 80002bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002c0 <__adddf3>:
 80002c0:	b530      	push	{r4, r5, lr}
 80002c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ca:	ea94 0f05 	teq	r4, r5
 80002ce:	bf08      	it	eq
 80002d0:	ea90 0f02 	teqeq	r0, r2
 80002d4:	bf1f      	itttt	ne
 80002d6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002da:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e6:	f000 80e2 	beq.w	80004ae <__adddf3+0x1ee>
 80002ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002f2:	bfb8      	it	lt
 80002f4:	426d      	neglt	r5, r5
 80002f6:	dd0c      	ble.n	8000312 <__adddf3+0x52>
 80002f8:	442c      	add	r4, r5
 80002fa:	ea80 0202 	eor.w	r2, r0, r2
 80002fe:	ea81 0303 	eor.w	r3, r1, r3
 8000302:	ea82 0000 	eor.w	r0, r2, r0
 8000306:	ea83 0101 	eor.w	r1, r3, r1
 800030a:	ea80 0202 	eor.w	r2, r0, r2
 800030e:	ea81 0303 	eor.w	r3, r1, r3
 8000312:	2d36      	cmp	r5, #54	; 0x36
 8000314:	bf88      	it	hi
 8000316:	bd30      	pophi	{r4, r5, pc}
 8000318:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800031c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000320:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000324:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x70>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000334:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000338:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x84>
 800033e:	4252      	negs	r2, r2
 8000340:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000344:	ea94 0f05 	teq	r4, r5
 8000348:	f000 80a7 	beq.w	800049a <__adddf3+0x1da>
 800034c:	f1a4 0401 	sub.w	r4, r4, #1
 8000350:	f1d5 0e20 	rsbs	lr, r5, #32
 8000354:	db0d      	blt.n	8000372 <__adddf3+0xb2>
 8000356:	fa02 fc0e 	lsl.w	ip, r2, lr
 800035a:	fa22 f205 	lsr.w	r2, r2, r5
 800035e:	1880      	adds	r0, r0, r2
 8000360:	f141 0100 	adc.w	r1, r1, #0
 8000364:	fa03 f20e 	lsl.w	r2, r3, lr
 8000368:	1880      	adds	r0, r0, r2
 800036a:	fa43 f305 	asr.w	r3, r3, r5
 800036e:	4159      	adcs	r1, r3
 8000370:	e00e      	b.n	8000390 <__adddf3+0xd0>
 8000372:	f1a5 0520 	sub.w	r5, r5, #32
 8000376:	f10e 0e20 	add.w	lr, lr, #32
 800037a:	2a01      	cmp	r2, #1
 800037c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000380:	bf28      	it	cs
 8000382:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	18c0      	adds	r0, r0, r3
 800038c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000390:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000394:	d507      	bpl.n	80003a6 <__adddf3+0xe6>
 8000396:	f04f 0e00 	mov.w	lr, #0
 800039a:	f1dc 0c00 	rsbs	ip, ip, #0
 800039e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003a2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003aa:	d31b      	bcc.n	80003e4 <__adddf3+0x124>
 80003ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003b0:	d30c      	bcc.n	80003cc <__adddf3+0x10c>
 80003b2:	0849      	lsrs	r1, r1, #1
 80003b4:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003bc:	f104 0401 	add.w	r4, r4, #1
 80003c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c8:	f080 809a 	bcs.w	8000500 <__adddf3+0x240>
 80003cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003d0:	bf08      	it	eq
 80003d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d6:	f150 0000 	adcs.w	r0, r0, #0
 80003da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003de:	ea41 0105 	orr.w	r1, r1, r5
 80003e2:	bd30      	pop	{r4, r5, pc}
 80003e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e8:	4140      	adcs	r0, r0
 80003ea:	eb41 0101 	adc.w	r1, r1, r1
 80003ee:	3c01      	subs	r4, #1
 80003f0:	bf28      	it	cs
 80003f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f6:	d2e9      	bcs.n	80003cc <__adddf3+0x10c>
 80003f8:	f091 0f00 	teq	r1, #0
 80003fc:	bf04      	itt	eq
 80003fe:	4601      	moveq	r1, r0
 8000400:	2000      	moveq	r0, #0
 8000402:	fab1 f381 	clz	r3, r1
 8000406:	bf08      	it	eq
 8000408:	3320      	addeq	r3, #32
 800040a:	f1a3 030b 	sub.w	r3, r3, #11
 800040e:	f1b3 0220 	subs.w	r2, r3, #32
 8000412:	da0c      	bge.n	800042e <__adddf3+0x16e>
 8000414:	320c      	adds	r2, #12
 8000416:	dd08      	ble.n	800042a <__adddf3+0x16a>
 8000418:	f102 0c14 	add.w	ip, r2, #20
 800041c:	f1c2 020c 	rsb	r2, r2, #12
 8000420:	fa01 f00c 	lsl.w	r0, r1, ip
 8000424:	fa21 f102 	lsr.w	r1, r1, r2
 8000428:	e00c      	b.n	8000444 <__adddf3+0x184>
 800042a:	f102 0214 	add.w	r2, r2, #20
 800042e:	bfd8      	it	le
 8000430:	f1c2 0c20 	rsble	ip, r2, #32
 8000434:	fa01 f102 	lsl.w	r1, r1, r2
 8000438:	fa20 fc0c 	lsr.w	ip, r0, ip
 800043c:	bfdc      	itt	le
 800043e:	ea41 010c 	orrle.w	r1, r1, ip
 8000442:	4090      	lslle	r0, r2
 8000444:	1ae4      	subs	r4, r4, r3
 8000446:	bfa2      	ittt	ge
 8000448:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800044c:	4329      	orrge	r1, r5
 800044e:	bd30      	popge	{r4, r5, pc}
 8000450:	ea6f 0404 	mvn.w	r4, r4
 8000454:	3c1f      	subs	r4, #31
 8000456:	da1c      	bge.n	8000492 <__adddf3+0x1d2>
 8000458:	340c      	adds	r4, #12
 800045a:	dc0e      	bgt.n	800047a <__adddf3+0x1ba>
 800045c:	f104 0414 	add.w	r4, r4, #20
 8000460:	f1c4 0220 	rsb	r2, r4, #32
 8000464:	fa20 f004 	lsr.w	r0, r0, r4
 8000468:	fa01 f302 	lsl.w	r3, r1, r2
 800046c:	ea40 0003 	orr.w	r0, r0, r3
 8000470:	fa21 f304 	lsr.w	r3, r1, r4
 8000474:	ea45 0103 	orr.w	r1, r5, r3
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f1c4 040c 	rsb	r4, r4, #12
 800047e:	f1c4 0220 	rsb	r2, r4, #32
 8000482:	fa20 f002 	lsr.w	r0, r0, r2
 8000486:	fa01 f304 	lsl.w	r3, r1, r4
 800048a:	ea40 0003 	orr.w	r0, r0, r3
 800048e:	4629      	mov	r1, r5
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	fa21 f004 	lsr.w	r0, r1, r4
 8000496:	4629      	mov	r1, r5
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	f094 0f00 	teq	r4, #0
 800049e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004a2:	bf06      	itte	eq
 80004a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a8:	3401      	addeq	r4, #1
 80004aa:	3d01      	subne	r5, #1
 80004ac:	e74e      	b.n	800034c <__adddf3+0x8c>
 80004ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004b2:	bf18      	it	ne
 80004b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b8:	d029      	beq.n	800050e <__adddf3+0x24e>
 80004ba:	ea94 0f05 	teq	r4, r5
 80004be:	bf08      	it	eq
 80004c0:	ea90 0f02 	teqeq	r0, r2
 80004c4:	d005      	beq.n	80004d2 <__adddf3+0x212>
 80004c6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ca:	bf04      	itt	eq
 80004cc:	4619      	moveq	r1, r3
 80004ce:	4610      	moveq	r0, r2
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	ea91 0f03 	teq	r1, r3
 80004d6:	bf1e      	ittt	ne
 80004d8:	2100      	movne	r1, #0
 80004da:	2000      	movne	r0, #0
 80004dc:	bd30      	popne	{r4, r5, pc}
 80004de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004e2:	d105      	bne.n	80004f0 <__adddf3+0x230>
 80004e4:	0040      	lsls	r0, r0, #1
 80004e6:	4149      	adcs	r1, r1
 80004e8:	bf28      	it	cs
 80004ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f4:	bf3c      	itt	cc
 80004f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004fa:	bd30      	popcc	{r4, r5, pc}
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000504:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000508:	f04f 0000 	mov.w	r0, #0
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000512:	bf1a      	itte	ne
 8000514:	4619      	movne	r1, r3
 8000516:	4610      	movne	r0, r2
 8000518:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800051c:	bf1c      	itt	ne
 800051e:	460b      	movne	r3, r1
 8000520:	4602      	movne	r2, r0
 8000522:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000526:	bf06      	itte	eq
 8000528:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800052c:	ea91 0f03 	teqeq	r1, r3
 8000530:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	bf00      	nop

08000538 <__aeabi_ui2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800054c:	f04f 0500 	mov.w	r5, #0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e750      	b.n	80003f8 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_i2d>:
 8000558:	f090 0f00 	teq	r0, #0
 800055c:	bf04      	itt	eq
 800055e:	2100      	moveq	r1, #0
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000568:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000570:	bf48      	it	mi
 8000572:	4240      	negmi	r0, r0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e73e      	b.n	80003f8 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_f2d>:
 800057c:	0042      	lsls	r2, r0, #1
 800057e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000582:	ea4f 0131 	mov.w	r1, r1, rrx
 8000586:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800058a:	bf1f      	itttt	ne
 800058c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000590:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000594:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000598:	4770      	bxne	lr
 800059a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059e:	bf08      	it	eq
 80005a0:	4770      	bxeq	lr
 80005a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a6:	bf04      	itt	eq
 80005a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005bc:	e71c      	b.n	80003f8 <__adddf3+0x138>
 80005be:	bf00      	nop

080005c0 <__aeabi_ul2d>:
 80005c0:	ea50 0201 	orrs.w	r2, r0, r1
 80005c4:	bf08      	it	eq
 80005c6:	4770      	bxeq	lr
 80005c8:	b530      	push	{r4, r5, lr}
 80005ca:	f04f 0500 	mov.w	r5, #0
 80005ce:	e00a      	b.n	80005e6 <__aeabi_l2d+0x16>

080005d0 <__aeabi_l2d>:
 80005d0:	ea50 0201 	orrs.w	r2, r0, r1
 80005d4:	bf08      	it	eq
 80005d6:	4770      	bxeq	lr
 80005d8:	b530      	push	{r4, r5, lr}
 80005da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005de:	d502      	bpl.n	80005e6 <__aeabi_l2d+0x16>
 80005e0:	4240      	negs	r0, r0
 80005e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f2:	f43f aed8 	beq.w	80003a6 <__adddf3+0xe6>
 80005f6:	f04f 0203 	mov.w	r2, #3
 80005fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fe:	bf18      	it	ne
 8000600:	3203      	addne	r2, #3
 8000602:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000606:	bf18      	it	ne
 8000608:	3203      	addne	r2, #3
 800060a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060e:	f1c2 0320 	rsb	r3, r2, #32
 8000612:	fa00 fc03 	lsl.w	ip, r0, r3
 8000616:	fa20 f002 	lsr.w	r0, r0, r2
 800061a:	fa01 fe03 	lsl.w	lr, r1, r3
 800061e:	ea40 000e 	orr.w	r0, r0, lr
 8000622:	fa21 f102 	lsr.w	r1, r1, r2
 8000626:	4414      	add	r4, r2
 8000628:	e6bd      	b.n	80003a6 <__adddf3+0xe6>
 800062a:	bf00      	nop

0800062c <__aeabi_dmul>:
 800062c:	b570      	push	{r4, r5, r6, lr}
 800062e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000632:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000636:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063a:	bf1d      	ittte	ne
 800063c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000640:	ea94 0f0c 	teqne	r4, ip
 8000644:	ea95 0f0c 	teqne	r5, ip
 8000648:	f000 f8de 	bleq	8000808 <__aeabi_dmul+0x1dc>
 800064c:	442c      	add	r4, r5
 800064e:	ea81 0603 	eor.w	r6, r1, r3
 8000652:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000656:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065e:	bf18      	it	ne
 8000660:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800066c:	d038      	beq.n	80006e0 <__aeabi_dmul+0xb4>
 800066e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000672:	f04f 0500 	mov.w	r5, #0
 8000676:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000682:	f04f 0600 	mov.w	r6, #0
 8000686:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068a:	f09c 0f00 	teq	ip, #0
 800068e:	bf18      	it	ne
 8000690:	f04e 0e01 	orrne.w	lr, lr, #1
 8000694:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000698:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800069c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a0:	d204      	bcs.n	80006ac <__aeabi_dmul+0x80>
 80006a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a6:	416d      	adcs	r5, r5
 80006a8:	eb46 0606 	adc.w	r6, r6, r6
 80006ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c4:	bf88      	it	hi
 80006c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ca:	d81e      	bhi.n	800070a <__aeabi_dmul+0xde>
 80006cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d0:	bf08      	it	eq
 80006d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d6:	f150 0000 	adcs.w	r0, r0, #0
 80006da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e4:	ea46 0101 	orr.w	r1, r6, r1
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f4:	bfc2      	ittt	gt
 80006f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f04f 0e00 	mov.w	lr, #0
 8000708:	3c01      	subs	r4, #1
 800070a:	f300 80ab 	bgt.w	8000864 <__aeabi_dmul+0x238>
 800070e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000712:	bfde      	ittt	le
 8000714:	2000      	movle	r0, #0
 8000716:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071a:	bd70      	pople	{r4, r5, r6, pc}
 800071c:	f1c4 0400 	rsb	r4, r4, #0
 8000720:	3c20      	subs	r4, #32
 8000722:	da35      	bge.n	8000790 <__aeabi_dmul+0x164>
 8000724:	340c      	adds	r4, #12
 8000726:	dc1b      	bgt.n	8000760 <__aeabi_dmul+0x134>
 8000728:	f104 0414 	add.w	r4, r4, #20
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f305 	lsl.w	r3, r0, r5
 8000734:	fa20 f004 	lsr.w	r0, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea40 0002 	orr.w	r0, r0, r2
 8000740:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000744:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	fa21 f604 	lsr.w	r6, r1, r4
 8000750:	eb42 0106 	adc.w	r1, r2, r6
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f1c4 040c 	rsb	r4, r4, #12
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f304 	lsl.w	r3, r0, r4
 800076c:	fa20 f005 	lsr.w	r0, r0, r5
 8000770:	fa01 f204 	lsl.w	r2, r1, r4
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000780:	f141 0100 	adc.w	r1, r1, #0
 8000784:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000788:	bf08      	it	eq
 800078a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078e:	bd70      	pop	{r4, r5, r6, pc}
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f205 	lsl.w	r2, r0, r5
 8000798:	ea4e 0e02 	orr.w	lr, lr, r2
 800079c:	fa20 f304 	lsr.w	r3, r0, r4
 80007a0:	fa01 f205 	lsl.w	r2, r1, r5
 80007a4:	ea43 0302 	orr.w	r3, r3, r2
 80007a8:	fa21 f004 	lsr.w	r0, r1, r4
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	fa21 f204 	lsr.w	r2, r1, r4
 80007b4:	ea20 0002 	bic.w	r0, r0, r2
 80007b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c0:	bf08      	it	eq
 80007c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c6:	bd70      	pop	{r4, r5, r6, pc}
 80007c8:	f094 0f00 	teq	r4, #0
 80007cc:	d10f      	bne.n	80007ee <__aeabi_dmul+0x1c2>
 80007ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d2:	0040      	lsls	r0, r0, #1
 80007d4:	eb41 0101 	adc.w	r1, r1, r1
 80007d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3c01      	subeq	r4, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1a6>
 80007e2:	ea41 0106 	orr.w	r1, r1, r6
 80007e6:	f095 0f00 	teq	r5, #0
 80007ea:	bf18      	it	ne
 80007ec:	4770      	bxne	lr
 80007ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f2:	0052      	lsls	r2, r2, #1
 80007f4:	eb43 0303 	adc.w	r3, r3, r3
 80007f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007fc:	bf08      	it	eq
 80007fe:	3d01      	subeq	r5, #1
 8000800:	d0f7      	beq.n	80007f2 <__aeabi_dmul+0x1c6>
 8000802:	ea43 0306 	orr.w	r3, r3, r6
 8000806:	4770      	bx	lr
 8000808:	ea94 0f0c 	teq	r4, ip
 800080c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000810:	bf18      	it	ne
 8000812:	ea95 0f0c 	teqne	r5, ip
 8000816:	d00c      	beq.n	8000832 <__aeabi_dmul+0x206>
 8000818:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800081c:	bf18      	it	ne
 800081e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000822:	d1d1      	bne.n	80007c8 <__aeabi_dmul+0x19c>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000836:	bf06      	itte	eq
 8000838:	4610      	moveq	r0, r2
 800083a:	4619      	moveq	r1, r3
 800083c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000840:	d019      	beq.n	8000876 <__aeabi_dmul+0x24a>
 8000842:	ea94 0f0c 	teq	r4, ip
 8000846:	d102      	bne.n	800084e <__aeabi_dmul+0x222>
 8000848:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800084c:	d113      	bne.n	8000876 <__aeabi_dmul+0x24a>
 800084e:	ea95 0f0c 	teq	r5, ip
 8000852:	d105      	bne.n	8000860 <__aeabi_dmul+0x234>
 8000854:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000858:	bf1c      	itt	ne
 800085a:	4610      	movne	r0, r2
 800085c:	4619      	movne	r1, r3
 800085e:	d10a      	bne.n	8000876 <__aeabi_dmul+0x24a>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800086c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000870:	f04f 0000 	mov.w	r0, #0
 8000874:	bd70      	pop	{r4, r5, r6, pc}
 8000876:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087e:	bd70      	pop	{r4, r5, r6, pc}

08000880 <__aeabi_ddiv>:
 8000880:	b570      	push	{r4, r5, r6, lr}
 8000882:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000886:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088e:	bf1d      	ittte	ne
 8000890:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000894:	ea94 0f0c 	teqne	r4, ip
 8000898:	ea95 0f0c 	teqne	r5, ip
 800089c:	f000 f8a7 	bleq	80009ee <__aeabi_ddiv+0x16e>
 80008a0:	eba4 0405 	sub.w	r4, r4, r5
 80008a4:	ea81 0e03 	eor.w	lr, r1, r3
 80008a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b0:	f000 8088 	beq.w	80009c4 <__aeabi_ddiv+0x144>
 80008b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d8:	429d      	cmp	r5, r3
 80008da:	bf08      	it	eq
 80008dc:	4296      	cmpeq	r6, r2
 80008de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e6:	d202      	bcs.n	80008ee <__aeabi_ddiv+0x6e>
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	1ab6      	subs	r6, r6, r2
 80008f0:	eb65 0503 	sbc.w	r5, r5, r3
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000902:	ebb6 0e02 	subs.w	lr, r6, r2
 8000906:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090a:	bf22      	ittt	cs
 800090c:	1ab6      	subcs	r6, r6, r2
 800090e:	4675      	movcs	r5, lr
 8000910:	ea40 000c 	orrcs.w	r0, r0, ip
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	ebb6 0e02 	subs.w	lr, r6, r2
 800091e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000922:	bf22      	ittt	cs
 8000924:	1ab6      	subcs	r6, r6, r2
 8000926:	4675      	movcs	r5, lr
 8000928:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800092c:	085b      	lsrs	r3, r3, #1
 800092e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000932:	ebb6 0e02 	subs.w	lr, r6, r2
 8000936:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093a:	bf22      	ittt	cs
 800093c:	1ab6      	subcs	r6, r6, r2
 800093e:	4675      	movcs	r5, lr
 8000940:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800095c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000960:	d018      	beq.n	8000994 <__aeabi_ddiv+0x114>
 8000962:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000966:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000972:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000976:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097e:	d1c0      	bne.n	8000902 <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	d10b      	bne.n	800099e <__aeabi_ddiv+0x11e>
 8000986:	ea41 0100 	orr.w	r1, r1, r0
 800098a:	f04f 0000 	mov.w	r0, #0
 800098e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000992:	e7b6      	b.n	8000902 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf04      	itt	eq
 800099a:	4301      	orreq	r1, r0
 800099c:	2000      	moveq	r0, #0
 800099e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a2:	bf88      	it	hi
 80009a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a8:	f63f aeaf 	bhi.w	800070a <__aeabi_dmul+0xde>
 80009ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b0:	bf04      	itt	eq
 80009b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ba:	f150 0000 	adcs.w	r0, r0, #0
 80009be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d0:	bfc2      	ittt	gt
 80009d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009da:	bd70      	popgt	{r4, r5, r6, pc}
 80009dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e0:	f04f 0e00 	mov.w	lr, #0
 80009e4:	3c01      	subs	r4, #1
 80009e6:	e690      	b.n	800070a <__aeabi_dmul+0xde>
 80009e8:	ea45 0e06 	orr.w	lr, r5, r6
 80009ec:	e68d      	b.n	800070a <__aeabi_dmul+0xde>
 80009ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f2:	ea94 0f0c 	teq	r4, ip
 80009f6:	bf08      	it	eq
 80009f8:	ea95 0f0c 	teqeq	r5, ip
 80009fc:	f43f af3b 	beq.w	8000876 <__aeabi_dmul+0x24a>
 8000a00:	ea94 0f0c 	teq	r4, ip
 8000a04:	d10a      	bne.n	8000a1c <__aeabi_ddiv+0x19c>
 8000a06:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0a:	f47f af34 	bne.w	8000876 <__aeabi_dmul+0x24a>
 8000a0e:	ea95 0f0c 	teq	r5, ip
 8000a12:	f47f af25 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e72c      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a1c:	ea95 0f0c 	teq	r5, ip
 8000a20:	d106      	bne.n	8000a30 <__aeabi_ddiv+0x1b0>
 8000a22:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a26:	f43f aefd 	beq.w	8000824 <__aeabi_dmul+0x1f8>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e722      	b.n	8000876 <__aeabi_dmul+0x24a>
 8000a30:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a34:	bf18      	it	ne
 8000a36:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3a:	f47f aec5 	bne.w	80007c8 <__aeabi_dmul+0x19c>
 8000a3e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a42:	f47f af0d 	bne.w	8000860 <__aeabi_dmul+0x234>
 8000a46:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4a:	f47f aeeb 	bne.w	8000824 <__aeabi_dmul+0x1f8>
 8000a4e:	e712      	b.n	8000876 <__aeabi_dmul+0x24a>

08000a50 <__gedf2>:
 8000a50:	f04f 3cff 	mov.w	ip, #4294967295
 8000a54:	e006      	b.n	8000a64 <__cmpdf2+0x4>
 8000a56:	bf00      	nop

08000a58 <__ledf2>:
 8000a58:	f04f 0c01 	mov.w	ip, #1
 8000a5c:	e002      	b.n	8000a64 <__cmpdf2+0x4>
 8000a5e:	bf00      	nop

08000a60 <__cmpdf2>:
 8000a60:	f04f 0c01 	mov.w	ip, #1
 8000a64:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a74:	bf18      	it	ne
 8000a76:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7a:	d01b      	beq.n	8000ab4 <__cmpdf2+0x54>
 8000a7c:	b001      	add	sp, #4
 8000a7e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a82:	bf0c      	ite	eq
 8000a84:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a88:	ea91 0f03 	teqne	r1, r3
 8000a8c:	bf02      	ittt	eq
 8000a8e:	ea90 0f02 	teqeq	r0, r2
 8000a92:	2000      	moveq	r0, #0
 8000a94:	4770      	bxeq	lr
 8000a96:	f110 0f00 	cmn.w	r0, #0
 8000a9a:	ea91 0f03 	teq	r1, r3
 8000a9e:	bf58      	it	pl
 8000aa0:	4299      	cmppl	r1, r3
 8000aa2:	bf08      	it	eq
 8000aa4:	4290      	cmpeq	r0, r2
 8000aa6:	bf2c      	ite	cs
 8000aa8:	17d8      	asrcs	r0, r3, #31
 8000aaa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aae:	f040 0001 	orr.w	r0, r0, #1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__cmpdf2+0x64>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d107      	bne.n	8000ad4 <__cmpdf2+0x74>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d1d6      	bne.n	8000a7c <__cmpdf2+0x1c>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d0d3      	beq.n	8000a7c <__cmpdf2+0x1c>
 8000ad4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_cdrcmple>:
 8000adc:	4684      	mov	ip, r0
 8000ade:	4610      	mov	r0, r2
 8000ae0:	4662      	mov	r2, ip
 8000ae2:	468c      	mov	ip, r1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4663      	mov	r3, ip
 8000ae8:	e000      	b.n	8000aec <__aeabi_cdcmpeq>
 8000aea:	bf00      	nop

08000aec <__aeabi_cdcmpeq>:
 8000aec:	b501      	push	{r0, lr}
 8000aee:	f7ff ffb7 	bl	8000a60 <__cmpdf2>
 8000af2:	2800      	cmp	r0, #0
 8000af4:	bf48      	it	mi
 8000af6:	f110 0f00 	cmnmi.w	r0, #0
 8000afa:	bd01      	pop	{r0, pc}

08000afc <__aeabi_dcmpeq>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff fff4 	bl	8000aec <__aeabi_cdcmpeq>
 8000b04:	bf0c      	ite	eq
 8000b06:	2001      	moveq	r0, #1
 8000b08:	2000      	movne	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmplt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffea 	bl	8000aec <__aeabi_cdcmpeq>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmple>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffe0 	bl	8000aec <__aeabi_cdcmpeq>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpge>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffce 	bl	8000adc <__aeabi_cdrcmple>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpgt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffc4 	bl	8000adc <__aeabi_cdrcmple>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpun>:
 8000b60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d102      	bne.n	8000b70 <__aeabi_dcmpun+0x10>
 8000b6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6e:	d10a      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__aeabi_dcmpun+0x20>
 8000b7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_dcmpun+0x26>
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0001 	mov.w	r0, #1
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_d2f>:
 8000b8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b94:	bf24      	itt	cs
 8000b96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9e:	d90d      	bls.n	8000bbc <__aeabi_d2f+0x30>
 8000ba0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bb0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb4:	bf08      	it	eq
 8000bb6:	f020 0001 	biceq.w	r0, r0, #1
 8000bba:	4770      	bx	lr
 8000bbc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bc0:	d121      	bne.n	8000c06 <__aeabi_d2f+0x7a>
 8000bc2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc6:	bfbc      	itt	lt
 8000bc8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	4770      	bxlt	lr
 8000bce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bd2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd6:	f1c2 0218 	rsb	r2, r2, #24
 8000bda:	f1c2 0c20 	rsb	ip, r2, #32
 8000bde:	fa10 f30c 	lsls.w	r3, r0, ip
 8000be2:	fa20 f002 	lsr.w	r0, r0, r2
 8000be6:	bf18      	it	ne
 8000be8:	f040 0001 	orrne.w	r0, r0, #1
 8000bec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf8:	ea40 000c 	orr.w	r0, r0, ip
 8000bfc:	fa23 f302 	lsr.w	r3, r3, r2
 8000c00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c04:	e7cc      	b.n	8000ba0 <__aeabi_d2f+0x14>
 8000c06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c0a:	d107      	bne.n	8000c1c <__aeabi_d2f+0x90>
 8000c0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c10:	bf1e      	ittt	ne
 8000c12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c1a:	4770      	bxne	lr
 8000c1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop

08000c2c <__aeabi_frsub>:
 8000c2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c30:	e002      	b.n	8000c38 <__addsf3>
 8000c32:	bf00      	nop

08000c34 <__aeabi_fsub>:
 8000c34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c38 <__addsf3>:
 8000c38:	0042      	lsls	r2, r0, #1
 8000c3a:	bf1f      	itttt	ne
 8000c3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c40:	ea92 0f03 	teqne	r2, r3
 8000c44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c4c:	d06a      	beq.n	8000d24 <__addsf3+0xec>
 8000c4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c56:	bfc1      	itttt	gt
 8000c58:	18d2      	addgt	r2, r2, r3
 8000c5a:	4041      	eorgt	r1, r0
 8000c5c:	4048      	eorgt	r0, r1
 8000c5e:	4041      	eorgt	r1, r0
 8000c60:	bfb8      	it	lt
 8000c62:	425b      	neglt	r3, r3
 8000c64:	2b19      	cmp	r3, #25
 8000c66:	bf88      	it	hi
 8000c68:	4770      	bxhi	lr
 8000c6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c76:	bf18      	it	ne
 8000c78:	4240      	negne	r0, r0
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c86:	bf18      	it	ne
 8000c88:	4249      	negne	r1, r1
 8000c8a:	ea92 0f03 	teq	r2, r3
 8000c8e:	d03f      	beq.n	8000d10 <__addsf3+0xd8>
 8000c90:	f1a2 0201 	sub.w	r2, r2, #1
 8000c94:	fa41 fc03 	asr.w	ip, r1, r3
 8000c98:	eb10 000c 	adds.w	r0, r0, ip
 8000c9c:	f1c3 0320 	rsb	r3, r3, #32
 8000ca0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca8:	d502      	bpl.n	8000cb0 <__addsf3+0x78>
 8000caa:	4249      	negs	r1, r1
 8000cac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb4:	d313      	bcc.n	8000cde <__addsf3+0xa6>
 8000cb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cba:	d306      	bcc.n	8000cca <__addsf3+0x92>
 8000cbc:	0840      	lsrs	r0, r0, #1
 8000cbe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cc2:	f102 0201 	add.w	r2, r2, #1
 8000cc6:	2afe      	cmp	r2, #254	; 0xfe
 8000cc8:	d251      	bcs.n	8000d6e <__addsf3+0x136>
 8000cca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cd2:	bf08      	it	eq
 8000cd4:	f020 0001 	biceq.w	r0, r0, #1
 8000cd8:	ea40 0003 	orr.w	r0, r0, r3
 8000cdc:	4770      	bx	lr
 8000cde:	0049      	lsls	r1, r1, #1
 8000ce0:	eb40 0000 	adc.w	r0, r0, r0
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	bf28      	it	cs
 8000ce8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cec:	d2ed      	bcs.n	8000cca <__addsf3+0x92>
 8000cee:	fab0 fc80 	clz	ip, r0
 8000cf2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cf6:	ebb2 020c 	subs.w	r2, r2, ip
 8000cfa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cfe:	bfaa      	itet	ge
 8000d00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d04:	4252      	neglt	r2, r2
 8000d06:	4318      	orrge	r0, r3
 8000d08:	bfbc      	itt	lt
 8000d0a:	40d0      	lsrlt	r0, r2
 8000d0c:	4318      	orrlt	r0, r3
 8000d0e:	4770      	bx	lr
 8000d10:	f092 0f00 	teq	r2, #0
 8000d14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d18:	bf06      	itte	eq
 8000d1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d1e:	3201      	addeq	r2, #1
 8000d20:	3b01      	subne	r3, #1
 8000d22:	e7b5      	b.n	8000c90 <__addsf3+0x58>
 8000d24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d2c:	bf18      	it	ne
 8000d2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d32:	d021      	beq.n	8000d78 <__addsf3+0x140>
 8000d34:	ea92 0f03 	teq	r2, r3
 8000d38:	d004      	beq.n	8000d44 <__addsf3+0x10c>
 8000d3a:	f092 0f00 	teq	r2, #0
 8000d3e:	bf08      	it	eq
 8000d40:	4608      	moveq	r0, r1
 8000d42:	4770      	bx	lr
 8000d44:	ea90 0f01 	teq	r0, r1
 8000d48:	bf1c      	itt	ne
 8000d4a:	2000      	movne	r0, #0
 8000d4c:	4770      	bxne	lr
 8000d4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d52:	d104      	bne.n	8000d5e <__addsf3+0x126>
 8000d54:	0040      	lsls	r0, r0, #1
 8000d56:	bf28      	it	cs
 8000d58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d5c:	4770      	bx	lr
 8000d5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d62:	bf3c      	itt	cc
 8000d64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d68:	4770      	bxcc	lr
 8000d6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d76:	4770      	bx	lr
 8000d78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d7c:	bf16      	itet	ne
 8000d7e:	4608      	movne	r0, r1
 8000d80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d84:	4601      	movne	r1, r0
 8000d86:	0242      	lsls	r2, r0, #9
 8000d88:	bf06      	itte	eq
 8000d8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d8e:	ea90 0f01 	teqeq	r0, r1
 8000d92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_ui2f>:
 8000d98:	f04f 0300 	mov.w	r3, #0
 8000d9c:	e004      	b.n	8000da8 <__aeabi_i2f+0x8>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_i2f>:
 8000da0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da4:	bf48      	it	mi
 8000da6:	4240      	negmi	r0, r0
 8000da8:	ea5f 0c00 	movs.w	ip, r0
 8000dac:	bf08      	it	eq
 8000dae:	4770      	bxeq	lr
 8000db0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db4:	4601      	mov	r1, r0
 8000db6:	f04f 0000 	mov.w	r0, #0
 8000dba:	e01c      	b.n	8000df6 <__aeabi_l2f+0x2a>

08000dbc <__aeabi_ul2f>:
 8000dbc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dc0:	bf08      	it	eq
 8000dc2:	4770      	bxeq	lr
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e00a      	b.n	8000de0 <__aeabi_l2f+0x14>
 8000dca:	bf00      	nop

08000dcc <__aeabi_l2f>:
 8000dcc:	ea50 0201 	orrs.w	r2, r0, r1
 8000dd0:	bf08      	it	eq
 8000dd2:	4770      	bxeq	lr
 8000dd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dd8:	d502      	bpl.n	8000de0 <__aeabi_l2f+0x14>
 8000dda:	4240      	negs	r0, r0
 8000ddc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000de0:	ea5f 0c01 	movs.w	ip, r1
 8000de4:	bf02      	ittt	eq
 8000de6:	4684      	moveq	ip, r0
 8000de8:	4601      	moveq	r1, r0
 8000dea:	2000      	moveq	r0, #0
 8000dec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000df0:	bf08      	it	eq
 8000df2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000df6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dfa:	fabc f28c 	clz	r2, ip
 8000dfe:	3a08      	subs	r2, #8
 8000e00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e04:	db10      	blt.n	8000e28 <__aeabi_l2f+0x5c>
 8000e06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e10:	f1c2 0220 	rsb	r2, r2, #32
 8000e14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	eb43 0002 	adc.w	r0, r3, r2
 8000e20:	bf08      	it	eq
 8000e22:	f020 0001 	biceq.w	r0, r0, #1
 8000e26:	4770      	bx	lr
 8000e28:	f102 0220 	add.w	r2, r2, #32
 8000e2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e30:	f1c2 0220 	rsb	r2, r2, #32
 8000e34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e38:	fa21 f202 	lsr.w	r2, r1, r2
 8000e3c:	eb43 0002 	adc.w	r0, r3, r2
 8000e40:	bf08      	it	eq
 8000e42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e46:	4770      	bx	lr

08000e48 <BLE_Detection>:

BLE_Pretreatment_Data_ BLE_Pretreatment_Data;
uint8_t BLE_Receive_Data[BLE_Uart_Buffer];

void BLE_Detection()
{
 8000e48:	b538      	push	{r3, r4, r5, lr}
	if(Sensor_Msg.BLE_Data.Connected_Sign == false && HAL_GPIO_ReadPin(BLE_UART1_STATE_GPIO_Port, BLE_UART1_STATE_Pin) == GPIO_PIN_RESET)
 8000e4a:	4c1b      	ldr	r4, [pc, #108]	; (8000eb8 <BLE_Detection+0x70>)
 8000e4c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8000e50:	b13b      	cbz	r3, 8000e62 <BLE_Detection+0x1a>
	{
		Sensor_Msg.BLE_Data.Connected_Sign = true;
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
		HAL_UART_Receive_DMA(&huart1,BLE_Receive_Data,BLE_Uart_Buffer);
	}
	else if(Sensor_Msg.BLE_Data.Connected_Sign == true && HAL_GPIO_ReadPin(BLE_UART1_STATE_GPIO_Port, BLE_UART1_STATE_Pin) == GPIO_PIN_SET)
 8000e52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e56:	4819      	ldr	r0, [pc, #100]	; (8000ebc <BLE_Detection+0x74>)
 8000e58:	f001 ff44 	bl	8002ce4 <HAL_GPIO_ReadPin>
 8000e5c:	2801      	cmp	r0, #1
 8000e5e:	d00b      	beq.n	8000e78 <BLE_Detection+0x30>
	{
		Sensor_Msg.BLE_Data.Connected_Sign = false;
		HAL_UART_DMAStop(&huart1);
		memset(&Sensor_Msg.BLE_Data.L_3, 0, 28);
	}
}
 8000e60:	bd38      	pop	{r3, r4, r5, pc}
	if(Sensor_Msg.BLE_Data.Connected_Sign == false && HAL_GPIO_ReadPin(BLE_UART1_STATE_GPIO_Port, BLE_UART1_STATE_Pin) == GPIO_PIN_RESET)
 8000e62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e66:	4815      	ldr	r0, [pc, #84]	; (8000ebc <BLE_Detection+0x74>)
 8000e68:	f001 ff3c 	bl	8002ce4 <HAL_GPIO_ReadPin>
 8000e6c:	b1a0      	cbz	r0, 8000e98 <BLE_Detection+0x50>
	else if(Sensor_Msg.BLE_Data.Connected_Sign == true && HAL_GPIO_ReadPin(BLE_UART1_STATE_GPIO_Port, BLE_UART1_STATE_Pin) == GPIO_PIN_SET)
 8000e6e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1ed      	bne.n	8000e52 <BLE_Detection+0xa>
}
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
		Sensor_Msg.BLE_Data.Connected_Sign = false;
 8000e78:	2500      	movs	r5, #0
		HAL_UART_DMAStop(&huart1);
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <BLE_Detection+0x78>)
		Sensor_Msg.BLE_Data.Connected_Sign = false;
 8000e7c:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
		HAL_UART_DMAStop(&huart1);
 8000e80:	f003 fe90 	bl	8004ba4 <HAL_UART_DMAStop>
		memset(&Sensor_Msg.BLE_Data.L_3, 0, 28);
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <BLE_Detection+0x7c>)
 8000e86:	f8c4 5029 	str.w	r5, [r4, #41]	; 0x29
 8000e8a:	605d      	str	r5, [r3, #4]
 8000e8c:	609d      	str	r5, [r3, #8]
 8000e8e:	60dd      	str	r5, [r3, #12]
 8000e90:	611d      	str	r5, [r3, #16]
 8000e92:	615d      	str	r5, [r3, #20]
 8000e94:	619d      	str	r5, [r3, #24]
}
 8000e96:	bd38      	pop	{r3, r4, r5, pc}
		Sensor_Msg.BLE_Data.Connected_Sign = true;
 8000e98:	f04f 0c01 	mov.w	ip, #1
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000e9c:	4808      	ldr	r0, [pc, #32]	; (8000ec0 <BLE_Detection+0x78>)
		HAL_UART_Receive_DMA(&huart1,BLE_Receive_Data,BLE_Uart_Buffer);
 8000e9e:	2224      	movs	r2, #36	; 0x24
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000ea0:	6805      	ldr	r5, [r0, #0]
		HAL_UART_Receive_DMA(&huart1,BLE_Receive_Data,BLE_Uart_Buffer);
 8000ea2:	4909      	ldr	r1, [pc, #36]	; (8000ec8 <BLE_Detection+0x80>)
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000ea4:	68eb      	ldr	r3, [r5, #12]
		Sensor_Msg.BLE_Data.Connected_Sign = true;
 8000ea6:	f884 c028 	strb.w	ip, [r4, #40]	; 0x28
		__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	60eb      	str	r3, [r5, #12]
}
 8000eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		HAL_UART_Receive_DMA(&huart1,BLE_Receive_Data,BLE_Uart_Buffer);
 8000eb4:	f003 be26 	b.w	8004b04 <HAL_UART_Receive_DMA>
 8000eb8:	200000e8 	.word	0x200000e8
 8000ebc:	40010800 	.word	0x40010800
 8000ec0:	20000360 	.word	0x20000360
 8000ec4:	20000111 	.word	0x20000111
 8000ec8:	200000a0 	.word	0x200000a0

08000ecc <BLE_Init>:

void BLE_Init()
{
	HAL_TIM_Base_Start_IT(&htim3);   //100ms未收到数据，清零
 8000ecc:	4801      	ldr	r0, [pc, #4]	; (8000ed4 <BLE_Init+0x8>)
 8000ece:	f003 bb69 	b.w	80045a4 <HAL_TIM_Base_Start_IT>
 8000ed2:	bf00      	nop
 8000ed4:	20000290 	.word	0x20000290

08000ed8 <BLE_Receive>:
}

void BLE_Receive()
{
	TIM3->CNT = 0;
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4b57      	ldr	r3, [pc, #348]	; (8001038 <BLE_Receive+0x160>)
    if(BLE_Receive_Data[0] == 0x66)
 8000edc:	f8df c15c 	ldr.w	ip, [pc, #348]	; 800103c <BLE_Receive+0x164>
	TIM3->CNT = 0;
 8000ee0:	625a      	str	r2, [r3, #36]	; 0x24
    if(BLE_Receive_Data[0] == 0x66)
 8000ee2:	f89c 3000 	ldrb.w	r3, [ip]
 8000ee6:	2b66      	cmp	r3, #102	; 0x66
 8000ee8:	d000      	beq.n	8000eec <BLE_Receive+0x14>
 8000eea:	4770      	bx	lr
{
 8000eec:	b510      	push	{r4, lr}
    {
		memcpy(&BLE_Pretreatment_Data.head,BLE_Receive_Data,18);
 8000eee:	4c54      	ldr	r4, [pc, #336]	; (8001040 <BLE_Receive+0x168>)
 8000ef0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ef4:	46a6      	mov	lr, r4
 8000ef6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
		int16_t check=0;
		for(int i=0;i<7;i++)
			check^=*(&BLE_Pretreatment_Data.digital_data+i);
 8000efa:	f8d4 0006 	ldr.w	r0, [r4, #6]
 8000efe:	f8d4 3002 	ldr.w	r3, [r4, #2]
		memcpy(&BLE_Pretreatment_Data.head,BLE_Receive_Data,18);
 8000f02:	f8dc 2000 	ldr.w	r2, [ip]
			check^=*(&BLE_Pretreatment_Data.digital_data+i);
 8000f06:	f8d4 c00a 	ldr.w	ip, [r4, #10]
 8000f0a:	4043      	eors	r3, r0
 8000f0c:	ea83 030c 	eor.w	r3, r3, ip
 8000f10:	89e0      	ldrh	r0, [r4, #14]
 8000f12:	ea83 4323 	eor.w	r3, r3, r3, asr #16
 8000f16:	4043      	eors	r3, r0
		if(check == BLE_Pretreatment_Data.check)
 8000f18:	b211      	sxth	r1, r2
 8000f1a:	b21b      	sxth	r3, r3
 8000f1c:	4299      	cmp	r1, r3
{
 8000f1e:	b082      	sub	sp, #8
		memcpy(&BLE_Pretreatment_Data.head,BLE_Receive_Data,18);
 8000f20:	f8ae 2000 	strh.w	r2, [lr]
		if(check == BLE_Pretreatment_Data.check)
 8000f24:	d001      	beq.n	8000f2a <BLE_Receive+0x52>
			else					Sensor_Msg.BLE_Data.L_2=0;
			if(Sensor_Msg.BLE_Data.R_2>2000)	Sensor_Msg.BLE_Data.R_2-=2000;
			else					Sensor_Msg.BLE_Data.R_2=0;
		}
    }
}
 8000f26:	b002      	add	sp, #8
 8000f28:	bd10      	pop	{r4, pc}
			uint8_t msg=0x88;
 8000f2a:	f04f 0c88 	mov.w	ip, #136	; 0x88
			HAL_UART_Transmit(&huart1,&msg,1,10);
 8000f2e:	230a      	movs	r3, #10
 8000f30:	2201      	movs	r2, #1
 8000f32:	f10d 0107 	add.w	r1, sp, #7
 8000f36:	4843      	ldr	r0, [pc, #268]	; (8001044 <BLE_Receive+0x16c>)
			uint8_t msg=0x88;
 8000f38:	f88d c007 	strb.w	ip, [sp, #7]
			HAL_UART_Transmit(&huart1,&msg,1,10);
 8000f3c:	f003 fd5a 	bl	80049f4 <HAL_UART_Transmit>
				if((BLE_Pretreatment_Data.digital_data>>i&(int16_t)1)==1)	*(&(Sensor_Msg.BLE_Data.L_3)+i)=1;
 8000f40:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8000f44:	4a40      	ldr	r2, [pc, #256]	; (8001048 <BLE_Receive+0x170>)
 8000f46:	f013 0101 	ands.w	r1, r3, #1
 8000f4a:	bf18      	it	ne
 8000f4c:	2101      	movne	r1, #1
 8000f4e:	0798      	lsls	r0, r3, #30
 8000f50:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 8000f54:	f3c3 0140 	ubfx	r1, r3, #1, #1
 8000f58:	bf48      	it	mi
 8000f5a:	2101      	movmi	r1, #1
 8000f5c:	0758      	lsls	r0, r3, #29
 8000f5e:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
 8000f62:	f3c3 0180 	ubfx	r1, r3, #2, #1
 8000f66:	bf48      	it	mi
 8000f68:	2101      	movmi	r1, #1
 8000f6a:	0718      	lsls	r0, r3, #28
 8000f6c:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
 8000f70:	f3c3 01c0 	ubfx	r1, r3, #3, #1
 8000f74:	bf48      	it	mi
 8000f76:	2101      	movmi	r1, #1
 8000f78:	06d8      	lsls	r0, r3, #27
 8000f7a:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
 8000f7e:	f3c3 1100 	ubfx	r1, r3, #4, #1
 8000f82:	bf48      	it	mi
 8000f84:	2101      	movmi	r1, #1
 8000f86:	0698      	lsls	r0, r3, #26
 8000f88:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
 8000f8c:	f3c3 1140 	ubfx	r1, r3, #5, #1
 8000f90:	bf48      	it	mi
 8000f92:	2101      	movmi	r1, #1
 8000f94:	0658      	lsls	r0, r3, #25
 8000f96:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 8000f9a:	f3c3 1180 	ubfx	r1, r3, #6, #1
 8000f9e:	bf48      	it	mi
 8000fa0:	2101      	movmi	r1, #1
 8000fa2:	0618      	lsls	r0, r3, #24
 8000fa4:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
 8000fa8:	f3c3 11c0 	ubfx	r1, r3, #7, #1
 8000fac:	bf48      	it	mi
 8000fae:	2101      	movmi	r1, #1
 8000fb0:	05d8      	lsls	r0, r3, #23
 8000fb2:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8000fb6:	f3c3 2100 	ubfx	r1, r3, #8, #1
 8000fba:	bf48      	it	mi
 8000fbc:	2101      	movmi	r1, #1
 8000fbe:	0598      	lsls	r0, r3, #22
 8000fc0:	f882 1031 	strb.w	r1, [r2, #49]	; 0x31
 8000fc4:	f3c3 2140 	ubfx	r1, r3, #9, #1
 8000fc8:	bf48      	it	mi
 8000fca:	2101      	movmi	r1, #1
 8000fcc:	0558      	lsls	r0, r3, #21
 8000fce:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
 8000fd2:	f3c3 2180 	ubfx	r1, r3, #10, #1
 8000fd6:	bf48      	it	mi
 8000fd8:	2101      	movmi	r1, #1
 8000fda:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
 8000fde:	f3c3 21c0 	ubfx	r1, r3, #11, #1
 8000fe2:	051b      	lsls	r3, r3, #20
 8000fe4:	bf48      	it	mi
 8000fe6:	2301      	movmi	r3, #1
			memcpy(&Sensor_Msg.BLE_Data.digital_data, &BLE_Pretreatment_Data.digital_data, 16);
 8000fe8:	f8d4 0002 	ldr.w	r0, [r4, #2]
				if((BLE_Pretreatment_Data.digital_data>>i&(int16_t)1)==1)	*(&(Sensor_Msg.BLE_Data.L_3)+i)=1;
 8000fec:	bf4c      	ite	mi
 8000fee:	f882 3034 	strbmi.w	r3, [r2, #52]	; 0x34
				else											*(&(Sensor_Msg.BLE_Data.L_3)+i)=0;
 8000ff2:	f882 1034 	strbpl.w	r1, [r2, #52]	; 0x34
			memcpy(&Sensor_Msg.BLE_Data.digital_data, &BLE_Pretreatment_Data.digital_data, 16);
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <BLE_Receive+0x174>)
 8000ff8:	4915      	ldr	r1, [pc, #84]	; (8001050 <BLE_Receive+0x178>)
 8000ffa:	689c      	ldr	r4, [r3, #8]
 8000ffc:	6008      	str	r0, [r1, #0]
 8000ffe:	6858      	ldr	r0, [r3, #4]
 8001000:	608c      	str	r4, [r1, #8]
 8001002:	6048      	str	r0, [r1, #4]
 8001004:	68d8      	ldr	r0, [r3, #12]
			if(Sensor_Msg.BLE_Data.L_2>2000)	Sensor_Msg.BLE_Data.L_2-=2000;
 8001006:	f9b2 303c 	ldrsh.w	r3, [r2, #60]	; 0x3c
			memcpy(&Sensor_Msg.BLE_Data.digital_data, &BLE_Pretreatment_Data.digital_data, 16);
 800100a:	60c8      	str	r0, [r1, #12]
			if(Sensor_Msg.BLE_Data.L_2>2000)	Sensor_Msg.BLE_Data.L_2-=2000;
 800100c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001010:	bfc4      	itt	gt
 8001012:	f5a3 63fa 	subgt.w	r3, r3, #2000	; 0x7d0
 8001016:	b219      	sxthgt	r1, r3
			if(Sensor_Msg.BLE_Data.R_2>2000)	Sensor_Msg.BLE_Data.R_2-=2000;
 8001018:	f9b2 3042 	ldrsh.w	r3, [r2, #66]	; 0x42
			else					Sensor_Msg.BLE_Data.L_2=0;
 800101c:	bfd8      	it	le
 800101e:	2100      	movle	r1, #0
			if(Sensor_Msg.BLE_Data.R_2>2000)	Sensor_Msg.BLE_Data.R_2-=2000;
 8001020:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
			else					Sensor_Msg.BLE_Data.R_2=0;
 8001024:	bfd2      	itee	le
 8001026:	2300      	movle	r3, #0
			if(Sensor_Msg.BLE_Data.R_2>2000)	Sensor_Msg.BLE_Data.R_2-=2000;
 8001028:	f5a3 63fa 	subgt.w	r3, r3, #2000	; 0x7d0
 800102c:	b21b      	sxthgt	r3, r3
 800102e:	8791      	strh	r1, [r2, #60]	; 0x3c
 8001030:	f8a2 3042 	strh.w	r3, [r2, #66]	; 0x42
}
 8001034:	e777      	b.n	8000f26 <BLE_Receive+0x4e>
 8001036:	bf00      	nop
 8001038:	40000400 	.word	0x40000400
 800103c:	200000a0 	.word	0x200000a0
 8001040:	2000008c 	.word	0x2000008c
 8001044:	20000360 	.word	0x20000360
 8001048:	200000e8 	.word	0x200000e8
 800104c:	2000008e 	.word	0x2000008e
 8001050:	2000011e 	.word	0x2000011e

08001054 <BLE_Receive_Clear>:

void BLE_Receive_Clear()
{
	memset(&Sensor_Msg.BLE_Data.L_X, 0, 12);
 8001054:	2200      	movs	r2, #0
 8001056:	4b02      	ldr	r3, [pc, #8]	; (8001060 <BLE_Receive_Clear+0xc>)
 8001058:	e9c3 2200 	strd	r2, r2, [r3]
 800105c:	609a      	str	r2, [r3, #8]
}
 800105e:	4770      	bx	lr
 8001060:	20000120 	.word	0x20000120

08001064 <Battery_Detection_Init>:
#include "adc.h"
#include "Master_Slave_Communication.h"

void Battery_Detection_Init()
{
	HAL_ADC_Start(&hadc1);
 8001064:	4801      	ldr	r0, [pc, #4]	; (800106c <Battery_Detection_Init+0x8>)
 8001066:	f001 baad 	b.w	80025c4 <HAL_ADC_Start>
 800106a:	bf00      	nop
 800106c:	20000154 	.word	0x20000154

08001070 <Battery_Detection>:
}

void Battery_Detection()
{
 8001070:	b510      	push	{r4, lr}
	HAL_ADC_PollForConversion(&hadc1, 10);
 8001072:	4c08      	ldr	r4, [pc, #32]	; (8001094 <Battery_Detection+0x24>)
 8001074:	210a      	movs	r1, #10
 8001076:	4620      	mov	r0, r4
 8001078:	f001 f8f4 	bl	8002264 <HAL_ADC_PollForConversion>
	uint16_t ADC = HAL_ADC_GetValue(&hadc1);
 800107c:	4620      	mov	r0, r4
 800107e:	f001 f9bf 	bl	8002400 <HAL_ADC_GetValue>
	Sensor_Msg.Battery_Voltage = (float)ADC / 4096.0f * 3.3f * 6.1f;
 8001082:	b280      	uxth	r0, r0
 8001084:	f7ff fe88 	bl	8000d98 <__aeabi_ui2f>
 8001088:	4903      	ldr	r1, [pc, #12]	; (8001098 <Battery_Detection+0x28>)
 800108a:	f7ff f85f 	bl	800014c <__aeabi_fmul>
 800108e:	4c03      	ldr	r4, [pc, #12]	; (800109c <Battery_Detection+0x2c>)
 8001090:	6660      	str	r0, [r4, #100]	; 0x64
}
 8001092:	bd10      	pop	{r4, pc}
 8001094:	20000154 	.word	0x20000154
 8001098:	3ba10a3d 	.word	0x3ba10a3d
 800109c:	200000e8 	.word	0x200000e8

080010a0 <Encoder>:
			break;
	}
}

void Encoder(uint8_t i)
{
 80010a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t Encoder_Transmit[4][3] = {{0x30, 0x03, 0x00}, {0x30, 0x04, 0x00}, {0x30, 0x05, 0x00}, {0x30, 0x06, 0x00}};
	uint8_t Encoder_Receive_[4][3] = {0};
 80010a4:	2500      	movs	r5, #0
{
 80010a6:	b08b      	sub	sp, #44	; 0x2c
	uint8_t Encoder_Transmit[4][3] = {{0x30, 0x03, 0x00}, {0x30, 0x04, 0x00}, {0x30, 0x05, 0x00}, {0x30, 0x06, 0x00}};
 80010a8:	4bc4      	ldr	r3, [pc, #784]	; (80013bc <Encoder+0x31c>)
 80010aa:	ae04      	add	r6, sp, #16
{
 80010ac:	4604      	mov	r4, r0
	uint8_t Encoder_Transmit[4][3] = {{0x30, 0x03, 0x00}, {0x30, 0x04, 0x00}, {0x30, 0x05, 0x00}, {0x30, 0x06, 0x00}};
 80010ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80010b2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
	uint8_t Encoder_Receive_[4][3] = {0};
 80010b6:	e9cd 5507 	strd	r5, r5, [sp, #28]
			CS2_L;
 80010ba:	f8df 8304 	ldr.w	r8, [pc, #772]	; 80013c0 <Encoder+0x320>
	uint8_t Encoder_Receive[4];
	uint32_t Sample_Data;
	for(uint8_t j=0; j<4; j++)
	{
		CS_L(i);
		HAL_SPI_TransmitReceive(&hspi1, Encoder_Transmit[j], Encoder_Receive_[j], 3, HAL_MAX_DELAY);
 80010be:	f8df 9304 	ldr.w	r9, [pc, #772]	; 80013c4 <Encoder+0x324>
 80010c2:	af07      	add	r7, sp, #28
	uint8_t Encoder_Receive_[4][3] = {0};
 80010c4:	9509      	str	r5, [sp, #36]	; 0x24
	switch(x)
 80010c6:	2c02      	cmp	r4, #2
 80010c8:	f000 816b 	beq.w	80013a2 <Encoder+0x302>
 80010cc:	2c03      	cmp	r4, #3
 80010ce:	f000 8154 	beq.w	800137a <Encoder+0x2da>
 80010d2:	2c01      	cmp	r4, #1
 80010d4:	f000 813d 	beq.w	8001352 <Encoder+0x2b2>
		HAL_SPI_TransmitReceive(&hspi1, Encoder_Transmit[j], Encoder_Receive_[j], 3, HAL_MAX_DELAY);
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	463a      	mov	r2, r7
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4631      	mov	r1, r6
 80010e2:	2303      	movs	r3, #3
 80010e4:	4648      	mov	r0, r9
 80010e6:	f003 f8bb 	bl	8004260 <HAL_SPI_TransmitReceive>
		CS_H(i);
		Encoder_Receive[j]=Encoder_Receive_[j][2];
 80010ea:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80010ee:	3328      	adds	r3, #40	; 0x28
 80010f0:	446b      	add	r3, sp
 80010f2:	f813 2c0a 	ldrb.w	r2, [r3, #-10]
 80010f6:	f105 0328 	add.w	r3, r5, #40	; 0x28
	for(uint8_t j=0; j<4; j++)
 80010fa:	3501      	adds	r5, #1
		Encoder_Receive[j]=Encoder_Receive_[j][2];
 80010fc:	446b      	add	r3, sp
	for(uint8_t j=0; j<4; j++)
 80010fe:	2d04      	cmp	r5, #4
		Encoder_Receive[j]=Encoder_Receive_[j][2];
 8001100:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(uint8_t j=0; j<4; j++)
 8001104:	f106 0603 	add.w	r6, r6, #3
 8001108:	f107 0703 	add.w	r7, r7, #3
 800110c:	d1db      	bne.n	80010c6 <Encoder+0x26>
			if ( (*pBuffer & i) != 0 )
 800110e:	f99d 300c 	ldrsb.w	r3, [sp, #12]
 8001112:	f89d 100c 	ldrb.w	r1, [sp, #12]
				crc ^= 0x07;
 8001116:	2b00      	cmp	r3, #0
 8001118:	bfac      	ite	ge
 800111a:	2300      	movge	r3, #0
 800111c:	2307      	movlt	r3, #7
			if ( (*pBuffer & i) != 0 )
 800111e:	064a      	lsls	r2, r1, #25
				crc *= 2;
 8001120:	ea4f 0343 	mov.w	r3, r3, lsl #1
				crc ^= 0x07;
 8001124:	bf48      	it	mi
 8001126:	f083 0307 	eormi.w	r3, r3, #7
				crc *= 2;
 800112a:	005b      	lsls	r3, r3, #1
			if ( (*pBuffer & i) != 0 )
 800112c:	068f      	lsls	r7, r1, #26
				crc ^= 0x07;
 800112e:	bf44      	itt	mi
 8001130:	f083 0307 	eormi.w	r3, r3, #7
 8001134:	b2db      	uxtbmi	r3, r3
				crc *= 2;
 8001136:	005b      	lsls	r3, r3, #1
			if ( (*pBuffer & i) != 0 )
 8001138:	06ce      	lsls	r6, r1, #27
				crc *= 2;
 800113a:	b2db      	uxtb	r3, r3
				crc ^= 0x07;
 800113c:	bf48      	it	mi
 800113e:	f083 0307 	eormi.w	r3, r3, #7
				crc *= 2;
 8001142:	005b      	lsls	r3, r3, #1
			if ( (*pBuffer & i) != 0 )
 8001144:	070d      	lsls	r5, r1, #28
				crc *= 2;
 8001146:	b2db      	uxtb	r3, r3
				crc ^= 0x07;
 8001148:	bf48      	it	mi
 800114a:	f083 0307 	eormi.w	r3, r3, #7
				crc *= 2;
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
			if ( (*pBuffer & i) != 0 )
 8001152:	0748      	lsls	r0, r1, #29
				crc ^= 0x07;
 8001154:	bf48      	it	mi
 8001156:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 800115a:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 800115e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001162:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 8001164:	bf18      	it	ne
 8001166:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 800116a:	078a      	lsls	r2, r1, #30
				crc ^= 0x07;
 800116c:	bf48      	it	mi
 800116e:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 8001172:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 8001176:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800117a:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 800117c:	bf18      	it	ne
 800117e:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 8001182:	07cf      	lsls	r7, r1, #31
				crc ^= 0x07;
 8001184:	bf48      	it	mi
 8001186:	f083 0307 	eormi.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 800118a:	f89d 200d 	ldrb.w	r2, [sp, #13]
			if ( (crc & 0x80) != 0)
 800118e:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 8001192:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001196:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 8001198:	bf18      	it	ne
 800119a:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 800119e:	0616      	lsls	r6, r2, #24
				crc ^= 0x07;
 80011a0:	bf48      	it	mi
 80011a2:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 80011a6:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 80011aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80011ae:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 80011b0:	bf18      	it	ne
 80011b2:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 80011b6:	0655      	lsls	r5, r2, #25
				crc ^= 0x07;
 80011b8:	bf48      	it	mi
 80011ba:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 80011be:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 80011c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80011c6:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 80011c8:	bf18      	it	ne
 80011ca:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 80011ce:	0690      	lsls	r0, r2, #26
				crc ^= 0x07;
 80011d0:	bf48      	it	mi
 80011d2:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 80011d6:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 80011da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80011de:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 80011e0:	bf18      	it	ne
 80011e2:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 80011e6:	06d7      	lsls	r7, r2, #27
				crc ^= 0x07;
 80011e8:	bf48      	it	mi
 80011ea:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 80011ee:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 80011f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80011f6:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 80011f8:	bf18      	it	ne
 80011fa:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 80011fe:	0716      	lsls	r6, r2, #28
				crc ^= 0x07;
 8001200:	bf48      	it	mi
 8001202:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 8001206:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 800120a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800120e:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 8001210:	bf18      	it	ne
 8001212:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 8001216:	0755      	lsls	r5, r2, #29
				crc ^= 0x07;
 8001218:	bf48      	it	mi
 800121a:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 800121e:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 8001222:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001226:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 8001228:	bf18      	it	ne
 800122a:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 800122e:	0790      	lsls	r0, r2, #30
				crc ^= 0x07;
 8001230:	bf48      	it	mi
 8001232:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 8001236:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 800123a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800123e:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 8001240:	bf18      	it	ne
 8001242:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 8001246:	07d7      	lsls	r7, r2, #31
				crc ^= 0x07;
 8001248:	bf48      	it	mi
 800124a:	f083 0307 	eormi.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 800124e:	f89d 500e 	ldrb.w	r5, [sp, #14]
			if ( (crc & 0x80) != 0)
 8001252:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 8001256:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800125a:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 800125c:	bf18      	it	ne
 800125e:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 8001262:	062e      	lsls	r6, r5, #24
				crc ^= 0x07;
 8001264:	bf48      	it	mi
 8001266:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 800126a:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 800126e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001272:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 8001274:	bf18      	it	ne
 8001276:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 800127a:	0668      	lsls	r0, r5, #25
				crc ^= 0x07;
 800127c:	bf48      	it	mi
 800127e:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 8001282:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 8001286:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800128a:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 800128c:	bf18      	it	ne
 800128e:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 8001292:	06af      	lsls	r7, r5, #26
				crc ^= 0x07;
 8001294:	bf48      	it	mi
 8001296:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 800129a:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 800129e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80012a2:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 80012a4:	bf18      	it	ne
 80012a6:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 80012aa:	06ee      	lsls	r6, r5, #27
				crc ^= 0x07;
 80012ac:	bf48      	it	mi
 80012ae:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 80012b2:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 80012b6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80012ba:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 80012bc:	bf18      	it	ne
 80012be:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 80012c2:	0728      	lsls	r0, r5, #28
				crc ^= 0x07;
 80012c4:	bf48      	it	mi
 80012c6:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 80012ca:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 80012ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80012d2:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 80012d4:	bf18      	it	ne
 80012d6:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 80012da:	076f      	lsls	r7, r5, #29
				crc ^= 0x07;
 80012dc:	bf48      	it	mi
 80012de:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 80012e2:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 80012e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80012ea:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 80012ec:	bf18      	it	ne
 80012ee:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 80012f2:	07ae      	lsls	r6, r5, #30
				crc ^= 0x07;
 80012f4:	bf48      	it	mi
 80012f6:	f083 0307 	eormi.w	r3, r3, #7
			if ( (crc & 0x80) != 0)
 80012fa:	f013 0f80 	tst.w	r3, #128	; 0x80
				crc *= 2;
 80012fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8001302:	b2db      	uxtb	r3, r3
				crc ^= 0x07; // 多项式：X8 + X2 + X + 1
 8001304:	bf18      	it	ne
 8001306:	f083 0307 	eorne.w	r3, r3, #7
			if ( (*pBuffer & i) != 0 )
 800130a:	07e8      	lsls	r0, r5, #31
	}
	if(CRC8(Encoder_Receive, 3) == Encoder_Receive[3])
 800130c:	f89d 000f 	ldrb.w	r0, [sp, #15]
				crc ^= 0x07;
 8001310:	bf48      	it	mi
 8001312:	f083 0307 	eormi.w	r3, r3, #7
	if(CRC8(Encoder_Receive, 3) == Encoder_Receive[3])
 8001316:	4298      	cmp	r0, r3
			if ( (*pBuffer & i) != 0 )
 8001318:	f005 0601 	and.w	r6, r5, #1
	if(CRC8(Encoder_Receive, 3) == Encoder_Receive[3])
 800131c:	d116      	bne.n	800134c <Encoder+0x2ac>
	{
		Sample_Data = ((uint32_t)Encoder_Receive[0] << 13) | ((uint32_t)Encoder_Receive[1] << 5) | ((uint32_t)Encoder_Receive[2] >> 3);
 800131e:	0152      	lsls	r2, r2, #5
 8001320:	ea42 3141 	orr.w	r1, r2, r1, lsl #13
		Sensor_Msg.Encoder_Data[i-1].angle = (float)Sample_Data * 360.f / 2097152.f;
 8001324:	ea41 00d5 	orr.w	r0, r1, r5, lsr #3
 8001328:	f7ff fd36 	bl	8000d98 <__aeabi_ui2f>
 800132c:	4926      	ldr	r1, [pc, #152]	; (80013c8 <Encoder+0x328>)
 800132e:	f7fe ff0d 	bl	800014c <__aeabi_fmul>
 8001332:	4a26      	ldr	r2, [pc, #152]	; (80013cc <Encoder+0x32c>)
 8001334:	3408      	adds	r4, #8
		Sensor_Msg.Encoder_Data[i-1].Over_Speed_Flag = (bool)(Encoder_Receive[2]>>0 & 0x01);
 8001336:	eb02 03c4 	add.w	r3, r2, r4, lsl #3
		Sensor_Msg.Encoder_Data[i-1].Weak_Magnetic_Flag = (bool)(Encoder_Receive[2]>>1 & 0x01);
 800133a:	f3c5 0140 	ubfx	r1, r5, #1, #1
		Sensor_Msg.Encoder_Data[i-1].Low_Voltage_Flag = (bool)(Encoder_Receive[2]>>2 & 0x01);
 800133e:	f3c5 0580 	ubfx	r5, r5, #2, #1
		Sensor_Msg.Encoder_Data[i-1].Over_Speed_Flag = (bool)(Encoder_Receive[2]>>0 & 0x01);
 8001342:	711e      	strb	r6, [r3, #4]
		Sensor_Msg.Encoder_Data[i-1].Weak_Magnetic_Flag = (bool)(Encoder_Receive[2]>>1 & 0x01);
 8001344:	7159      	strb	r1, [r3, #5]
		Sensor_Msg.Encoder_Data[i-1].Low_Voltage_Flag = (bool)(Encoder_Receive[2]>>2 & 0x01);
 8001346:	719d      	strb	r5, [r3, #6]
		Sensor_Msg.Encoder_Data[i-1].angle = (float)Sample_Data * 360.f / 2097152.f;
 8001348:	f842 0034 	str.w	r0, [r2, r4, lsl #3]
	}
}
 800134c:	b00b      	add	sp, #44	; 0x2c
 800134e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			CS1_L;
 8001352:	2200      	movs	r2, #0
 8001354:	4621      	mov	r1, r4
 8001356:	4640      	mov	r0, r8
 8001358:	f001 fcca 	bl	8002cf0 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, Encoder_Transmit[j], Encoder_Receive_[j], 3, HAL_MAX_DELAY);
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	463a      	mov	r2, r7
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	4631      	mov	r1, r6
 8001366:	2303      	movs	r3, #3
 8001368:	4648      	mov	r0, r9
 800136a:	f002 ff79 	bl	8004260 <HAL_SPI_TransmitReceive>
			CS2_H;
 800136e:	2201      	movs	r2, #1
 8001370:	4621      	mov	r1, r4
 8001372:	4640      	mov	r0, r8
 8001374:	f001 fcbc 	bl	8002cf0 <HAL_GPIO_WritePin>
			break;
 8001378:	e6b7      	b.n	80010ea <Encoder+0x4a>
			CS3_L;
 800137a:	4640      	mov	r0, r8
 800137c:	2200      	movs	r2, #0
 800137e:	2104      	movs	r1, #4
 8001380:	f001 fcb6 	bl	8002cf0 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, Encoder_Transmit[j], Encoder_Receive_[j], 3, HAL_MAX_DELAY);
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
 8001388:	463a      	mov	r2, r7
 800138a:	4631      	mov	r1, r6
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4648      	mov	r0, r9
 8001390:	4623      	mov	r3, r4
 8001392:	f002 ff65 	bl	8004260 <HAL_SPI_TransmitReceive>
			CS3_H;
 8001396:	2201      	movs	r2, #1
 8001398:	2104      	movs	r1, #4
 800139a:	4640      	mov	r0, r8
 800139c:	f001 fca8 	bl	8002cf0 <HAL_GPIO_WritePin>
			break;
 80013a0:	e6a3      	b.n	80010ea <Encoder+0x4a>
			CS2_L;
 80013a2:	2200      	movs	r2, #0
 80013a4:	4621      	mov	r1, r4
 80013a6:	4640      	mov	r0, r8
 80013a8:	f001 fca2 	bl	8002cf0 <HAL_GPIO_WritePin>
		HAL_SPI_TransmitReceive(&hspi1, Encoder_Transmit[j], Encoder_Receive_[j], 3, HAL_MAX_DELAY);
 80013ac:	f04f 33ff 	mov.w	r3, #4294967295
 80013b0:	463a      	mov	r2, r7
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4631      	mov	r1, r6
 80013b6:	2303      	movs	r3, #3
 80013b8:	e7d6      	b.n	8001368 <Encoder+0x2c8>
 80013ba:	bf00      	nop
 80013bc:	0800527c 	.word	0x0800527c
 80013c0:	40010c00 	.word	0x40010c00
 80013c4:	200001e0 	.word	0x200001e0
 80013c8:	39340000 	.word	0x39340000
 80013cc:	200000e8 	.word	0x200000e8

080013d0 <Encoder_Detection>:

void Encoder_Detection()
{
 80013d0:	b508      	push	{r3, lr}
	Encoder(1);
 80013d2:	2001      	movs	r0, #1
 80013d4:	f7ff fe64 	bl	80010a0 <Encoder>
	Encoder(2);
 80013d8:	2002      	movs	r0, #2
 80013da:	f7ff fe61 	bl	80010a0 <Encoder>
	Encoder(3);
}
 80013de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	Encoder(3);
 80013e2:	2003      	movs	r0, #3
 80013e4:	f7ff be5c 	b.w	80010a0 <Encoder>

080013e8 <IMU_Receive>:
	}
	else return 0;
}

void IMU_Receive()
{
 80013e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for(uint8_t i=0;i<Imu_Uart_Buffer-8;i++)
 80013ec:	2500      	movs	r5, #0
 80013ee:	4c6c      	ldr	r4, [pc, #432]	; (80015a0 <IMU_Receive+0x1b8>)
		memcpy(Sensor_Msg.IMU_Data.data,&IMU_Receive_Data[n+1],6);
 80013f0:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 80015a4 <IMU_Receive+0x1bc>
		{
			case 0x52:
				if(check(i))//角速度数据校验
				{
					i+=10;
					Sensor_Msg.IMU_Data.Wx=(float)Sensor_Msg.IMU_Data.data[0]/32768*2000/360*3.14f;
 80013f4:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80015a8 <IMU_Receive+0x1c0>
				break;
			case 0x53:
				if(check(i))//角度数据校验
				{
					i+=10;
					Sensor_Msg.IMU_Data.Roll=(float)Sensor_Msg.IMU_Data.data[0]/32768.0f*180;
 80013f8:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80015ac <IMU_Receive+0x1c4>
{
 80013fc:	b085      	sub	sp, #20
		switch(IMU_Receive_Data[i])
 80013fe:	5d63      	ldrb	r3, [r4, r5]
 8001400:	1c6e      	adds	r6, r5, #1
 8001402:	2b52      	cmp	r3, #82	; 0x52
 8001404:	d01d      	beq.n	8001442 <IMU_Receive+0x5a>
 8001406:	2b53      	cmp	r3, #83	; 0x53
 8001408:	d115      	bne.n	8001436 <IMU_Receive+0x4e>
	for(i=n;i<n+9;i++)
 800140a:	b2f7      	uxtb	r7, r6
 800140c:	f105 0008 	add.w	r0, r5, #8
 8001410:	42b8      	cmp	r0, r7
 8001412:	463a      	mov	r2, r7
		check+=IMU_Receive_Data[i];
 8001414:	bfb8      	it	lt
 8001416:	23a8      	movlt	r3, #168	; 0xa8
	for(i=n;i<n+9;i++)
 8001418:	db09      	blt.n	800142e <IMU_Receive+0x46>
 800141a:	4639      	mov	r1, r7
		check+=IMU_Receive_Data[i];
 800141c:	23a8      	movs	r3, #168	; 0xa8
 800141e:	5ca2      	ldrb	r2, [r4, r2]
	for(i=n;i<n+9;i++)
 8001420:	3101      	adds	r1, #1
 8001422:	b2c9      	uxtb	r1, r1
		check+=IMU_Receive_Data[i];
 8001424:	4413      	add	r3, r2
	for(i=n;i<n+9;i++)
 8001426:	4288      	cmp	r0, r1
 8001428:	460a      	mov	r2, r1
		check+=IMU_Receive_Data[i];
 800142a:	b2db      	uxtb	r3, r3
	for(i=n;i<n+9;i++)
 800142c:	daf7      	bge.n	800141e <IMU_Receive+0x36>
	if(check==IMU_Receive_Data[i])
 800142e:	5ca2      	ldrb	r2, [r4, r2]
 8001430:	429a      	cmp	r2, r3
 8001432:	f000 8082 	beq.w	800153a <IMU_Receive+0x152>
	for(uint8_t i=0;i<Imu_Uart_Buffer-8;i++)
 8001436:	b2f5      	uxtb	r5, r6
 8001438:	2d18      	cmp	r5, #24
 800143a:	d9e0      	bls.n	80013fe <IMU_Receive+0x16>
					Sensor_Msg.IMU_Data.chart_sign.R = true;
					continue;
				}
		}
	}
}
 800143c:	b005      	add	sp, #20
 800143e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for(i=n;i<n+9;i++)
 8001442:	b2f7      	uxtb	r7, r6
 8001444:	f105 0008 	add.w	r0, r5, #8
 8001448:	42b8      	cmp	r0, r7
 800144a:	463a      	mov	r2, r7
 800144c:	f2c0 80a1 	blt.w	8001592 <IMU_Receive+0x1aa>
 8001450:	4639      	mov	r1, r7
		check+=IMU_Receive_Data[i];
 8001452:	23a7      	movs	r3, #167	; 0xa7
 8001454:	5ca2      	ldrb	r2, [r4, r2]
	for(i=n;i<n+9;i++)
 8001456:	3101      	adds	r1, #1
 8001458:	b2c9      	uxtb	r1, r1
		check+=IMU_Receive_Data[i];
 800145a:	4413      	add	r3, r2
	for(i=n;i<n+9;i++)
 800145c:	4281      	cmp	r1, r0
 800145e:	460a      	mov	r2, r1
		check+=IMU_Receive_Data[i];
 8001460:	b2db      	uxtb	r3, r3
	for(i=n;i<n+9;i++)
 8001462:	ddf7      	ble.n	8001454 <IMU_Receive+0x6c>
	if(check==IMU_Receive_Data[i])
 8001464:	5ca2      	ldrb	r2, [r4, r2]
 8001466:	429a      	cmp	r2, r3
 8001468:	d1e5      	bne.n	8001436 <IMU_Receive+0x4e>
		memcpy(Sensor_Msg.IMU_Data.data,&IMU_Receive_Data[n+1],6);
 800146a:	59e0      	ldr	r0, [r4, r7]
 800146c:	4427      	add	r7, r4
 800146e:	88bb      	ldrh	r3, [r7, #4]
 8001470:	f8ca 0000 	str.w	r0, [sl]
 8001474:	4607      	mov	r7, r0
					Sensor_Msg.IMU_Data.Wx=(float)Sensor_Msg.IMU_Data.data[0]/32768*2000/360*3.14f;
 8001476:	b200      	sxth	r0, r0
		memcpy(Sensor_Msg.IMU_Data.data,&IMU_Receive_Data[n+1],6);
 8001478:	f8aa 3004 	strh.w	r3, [sl, #4]
					Sensor_Msg.IMU_Data.Wx=(float)Sensor_Msg.IMU_Data.data[0]/32768*2000/360*3.14f;
 800147c:	f7ff fc90 	bl	8000da0 <__aeabi_i2f>
 8001480:	4659      	mov	r1, fp
 8001482:	f7fe fe63 	bl	800014c <__aeabi_fmul>
 8001486:	4606      	mov	r6, r0
		memcpy(Sensor_Msg.IMU_Data.data,&IMU_Receive_Data[n+1],6);
 8001488:	f3c7 470f 	ubfx	r7, r7, #16, #16
					Sensor_Msg.IMU_Data.Wy=(float)Sensor_Msg.IMU_Data.data[1]/32768*2000/360*3.14f;
 800148c:	b238      	sxth	r0, r7
					Sensor_Msg.IMU_Data.Wx=(float)Sensor_Msg.IMU_Data.data[0]/32768*2000/360*3.14f;
 800148e:	f8ca 6008 	str.w	r6, [sl, #8]
					Sensor_Msg.IMU_Data.Wy=(float)Sensor_Msg.IMU_Data.data[1]/32768*2000/360*3.14f;
 8001492:	f7ff fc85 	bl	8000da0 <__aeabi_i2f>
 8001496:	4659      	mov	r1, fp
 8001498:	f7fe fe58 	bl	800014c <__aeabi_fmul>
 800149c:	4607      	mov	r7, r0
					Sensor_Msg.IMU_Data.Wz=(float)Sensor_Msg.IMU_Data.data[2]/32768*2000/360*3.14f;
 800149e:	f9ba 0004 	ldrsh.w	r0, [sl, #4]
					Sensor_Msg.IMU_Data.Wy=(float)Sensor_Msg.IMU_Data.data[1]/32768*2000/360*3.14f;
 80014a2:	f8ca 700c 	str.w	r7, [sl, #12]
					Sensor_Msg.IMU_Data.Wz=(float)Sensor_Msg.IMU_Data.data[2]/32768*2000/360*3.14f;
 80014a6:	f7ff fc7b 	bl	8000da0 <__aeabi_i2f>
 80014aa:	4659      	mov	r1, fp
 80014ac:	f7fe fe4e 	bl	800014c <__aeabi_fmul>
 80014b0:	4680      	mov	r8, r0
					Sensor_Msg.IMU_Data.W=pow(pow(Sensor_Msg.IMU_Data.Wx,2)+pow(Sensor_Msg.IMU_Data.Wy,2)+pow(Sensor_Msg.IMU_Data.Wz,2),0.5);
 80014b2:	4630      	mov	r0, r6
					Sensor_Msg.IMU_Data.Wz=(float)Sensor_Msg.IMU_Data.data[2]/32768*2000/360*3.14f;
 80014b4:	f8ca 8010 	str.w	r8, [sl, #16]
					Sensor_Msg.IMU_Data.W=pow(pow(Sensor_Msg.IMU_Data.Wx,2)+pow(Sensor_Msg.IMU_Data.Wy,2)+pow(Sensor_Msg.IMU_Data.Wz,2),0.5);
 80014b8:	f7ff f860 	bl	800057c <__aeabi_f2d>
 80014bc:	4602      	mov	r2, r0
 80014be:	4638      	mov	r0, r7
 80014c0:	4616      	mov	r6, r2
 80014c2:	460f      	mov	r7, r1
 80014c4:	f7ff f85a 	bl	800057c <__aeabi_f2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4640      	mov	r0, r8
 80014ce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80014d2:	f7ff f853 	bl	800057c <__aeabi_f2d>
 80014d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80014da:	e9cd 0100 	strd	r0, r1, [sp]
 80014de:	4610      	mov	r0, r2
 80014e0:	4619      	mov	r1, r3
 80014e2:	f7ff f8a3 	bl	800062c <__aeabi_dmul>
 80014e6:	4632      	mov	r2, r6
 80014e8:	463b      	mov	r3, r7
 80014ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80014ee:	4630      	mov	r0, r6
 80014f0:	4639      	mov	r1, r7
 80014f2:	f7ff f89b 	bl	800062c <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80014fe:	f7fe fedf 	bl	80002c0 <__adddf3>
 8001502:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001506:	4606      	mov	r6, r0
 8001508:	460f      	mov	r7, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff f88d 	bl	800062c <__aeabi_dmul>
 8001512:	460b      	mov	r3, r1
 8001514:	4602      	mov	r2, r0
 8001516:	4639      	mov	r1, r7
 8001518:	4630      	mov	r0, r6
 800151a:	f7fe fed1 	bl	80002c0 <__adddf3>
 800151e:	f003 fdcd 	bl	80050bc <sqrt>
 8001522:	f7ff fb33 	bl	8000b8c <__aeabi_d2f>
					Sensor_Msg.IMU_Data.chart_sign.W = true;
 8001526:	f04f 0301 	mov.w	r3, #1
					i+=10;
 800152a:	350a      	adds	r5, #10
 800152c:	b2ed      	uxtb	r5, r5
					Sensor_Msg.IMU_Data.chart_sign.W = true;
 800152e:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
 8001532:	1c6e      	adds	r6, r5, #1
					Sensor_Msg.IMU_Data.W=pow(pow(Sensor_Msg.IMU_Data.Wx,2)+pow(Sensor_Msg.IMU_Data.Wy,2)+pow(Sensor_Msg.IMU_Data.Wz,2),0.5);
 8001534:	f8ca 0014 	str.w	r0, [sl, #20]
					continue;
 8001538:	e77d      	b.n	8001436 <IMU_Receive+0x4e>
		memcpy(Sensor_Msg.IMU_Data.data,&IMU_Receive_Data[n+1],6);
 800153a:	59e0      	ldr	r0, [r4, r7]
 800153c:	4427      	add	r7, r4
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	4606      	mov	r6, r0
 8001542:	f8ca 0000 	str.w	r0, [sl]
					Sensor_Msg.IMU_Data.Roll=(float)Sensor_Msg.IMU_Data.data[0]/32768.0f*180;
 8001546:	b200      	sxth	r0, r0
		memcpy(Sensor_Msg.IMU_Data.data,&IMU_Receive_Data[n+1],6);
 8001548:	f8aa 3004 	strh.w	r3, [sl, #4]
					Sensor_Msg.IMU_Data.Roll=(float)Sensor_Msg.IMU_Data.data[0]/32768.0f*180;
 800154c:	f7ff fc28 	bl	8000da0 <__aeabi_i2f>
 8001550:	4649      	mov	r1, r9
 8001552:	f7fe fdfb 	bl	800014c <__aeabi_fmul>
 8001556:	4603      	mov	r3, r0
		memcpy(Sensor_Msg.IMU_Data.data,&IMU_Receive_Data[n+1],6);
 8001558:	f3c6 460f 	ubfx	r6, r6, #16, #16
					Sensor_Msg.IMU_Data.Pitch=(float)Sensor_Msg.IMU_Data.data[1]/32768.0f*180;
 800155c:	b230      	sxth	r0, r6
					Sensor_Msg.IMU_Data.Roll=(float)Sensor_Msg.IMU_Data.data[0]/32768.0f*180;
 800155e:	f8ca 3018 	str.w	r3, [sl, #24]
					Sensor_Msg.IMU_Data.Pitch=(float)Sensor_Msg.IMU_Data.data[1]/32768.0f*180;
 8001562:	f7ff fc1d 	bl	8000da0 <__aeabi_i2f>
 8001566:	4649      	mov	r1, r9
 8001568:	f7fe fdf0 	bl	800014c <__aeabi_fmul>
 800156c:	f8ca 001c 	str.w	r0, [sl, #28]
					Sensor_Msg.IMU_Data.Yaw=(float)Sensor_Msg.IMU_Data.data[2]/32768.0f*180;
 8001570:	f9ba 0004 	ldrsh.w	r0, [sl, #4]
 8001574:	f7ff fc14 	bl	8000da0 <__aeabi_i2f>
 8001578:	4649      	mov	r1, r9
 800157a:	f7fe fde7 	bl	800014c <__aeabi_fmul>
					Sensor_Msg.IMU_Data.chart_sign.R = true;
 800157e:	f04f 0301 	mov.w	r3, #1
					i+=10;
 8001582:	350a      	adds	r5, #10
 8001584:	b2ed      	uxtb	r5, r5
					Sensor_Msg.IMU_Data.chart_sign.R = true;
 8001586:	f88a 3026 	strb.w	r3, [sl, #38]	; 0x26
 800158a:	1c6e      	adds	r6, r5, #1
					Sensor_Msg.IMU_Data.Yaw=(float)Sensor_Msg.IMU_Data.data[2]/32768.0f*180;
 800158c:	f8ca 0020 	str.w	r0, [sl, #32]
					continue;
 8001590:	e751      	b.n	8001436 <IMU_Receive+0x4e>
		check+=IMU_Receive_Data[i];
 8001592:	23a7      	movs	r3, #167	; 0xa7
	if(check==IMU_Receive_Data[i])
 8001594:	5ca2      	ldrb	r2, [r4, r2]
 8001596:	429a      	cmp	r2, r3
 8001598:	f47f af4d 	bne.w	8001436 <IMU_Receive+0x4e>
 800159c:	e765      	b.n	800146a <IMU_Receive+0x82>
 800159e:	bf00      	nop
 80015a0:	200000c4 	.word	0x200000c4
 80015a4:	200000e8 	.word	0x200000e8
 80015a8:	3a0b8e3a 	.word	0x3a0b8e3a
 80015ac:	3bb40000 	.word	0x3bb40000

080015b0 <IMU_Init>:
}

void IMU_Init()
{
	uint8_t data[3]={0xFF,0XAA};
	data[2]=0x65;	//水平安装
 80015b0:	f04f 0c65 	mov.w	ip, #101	; 0x65
{
 80015b4:	b510      	push	{r4, lr}
	uint8_t data[3]={0xFF,0XAA};
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <IMU_Init+0x68>)
	HAL_UART_Transmit(&huart2,data,3,HAL_MAX_DELAY);
 80015b8:	4c18      	ldr	r4, [pc, #96]	; (800161c <IMU_Init+0x6c>)
	uint8_t data[3]={0xFF,0XAA};
 80015ba:	681a      	ldr	r2, [r3, #0]
{
 80015bc:	b082      	sub	sp, #8
	HAL_UART_Transmit(&huart2,data,3,HAL_MAX_DELAY);
 80015be:	a901      	add	r1, sp, #4
 80015c0:	f04f 33ff 	mov.w	r3, #4294967295
	uint8_t data[3]={0xFF,0XAA};
 80015c4:	f8ad 2004 	strh.w	r2, [sp, #4]
	HAL_UART_Transmit(&huart2,data,3,HAL_MAX_DELAY);
 80015c8:	4620      	mov	r0, r4
 80015ca:	2203      	movs	r2, #3
	data[2]=0x65;	//水平安装
 80015cc:	f88d c006 	strb.w	ip, [sp, #6]
	HAL_UART_Transmit(&huart2,data,3,HAL_MAX_DELAY);
 80015d0:	f003 fa10 	bl	80049f4 <HAL_UART_Transmit>
	HAL_Delay(10);
 80015d4:	200a      	movs	r0, #10
 80015d6:	f000 fd75 	bl	80020c4 <HAL_Delay>
	data[2]=0x52;	//Z轴角度归零
 80015da:	f04f 0c52 	mov.w	ip, #82	; 0x52
	HAL_UART_Transmit(&huart2,data,3,HAL_MAX_DELAY);
 80015de:	a901      	add	r1, sp, #4
 80015e0:	f04f 33ff 	mov.w	r3, #4294967295
 80015e4:	2203      	movs	r2, #3
 80015e6:	4620      	mov	r0, r4
	data[2]=0x52;	//Z轴角度归零
 80015e8:	f88d c006 	strb.w	ip, [sp, #6]
	HAL_UART_Transmit(&huart2,data,3,HAL_MAX_DELAY);
 80015ec:	f003 fa02 	bl	80049f4 <HAL_UART_Transmit>
	HAL_Delay(10);
 80015f0:	200a      	movs	r0, #10
 80015f2:	f000 fd67 	bl	80020c4 <HAL_Delay>
	data[2]=0x67;	//加计校准
 80015f6:	f04f 0c67 	mov.w	ip, #103	; 0x67
	HAL_UART_Transmit(&huart2,data,3,HAL_MAX_DELAY);
 80015fa:	f04f 33ff 	mov.w	r3, #4294967295
 80015fe:	2203      	movs	r2, #3
 8001600:	a901      	add	r1, sp, #4
 8001602:	4620      	mov	r0, r4
	data[2]=0x67;	//加计校准
 8001604:	f88d c006 	strb.w	ip, [sp, #6]
	HAL_UART_Transmit(&huart2,data,3,HAL_MAX_DELAY);
 8001608:	f003 f9f4 	bl	80049f4 <HAL_UART_Transmit>
	HAL_Delay(10);
 800160c:	200a      	movs	r0, #10
 800160e:	f000 fd59 	bl	80020c4 <HAL_Delay>
}
 8001612:	b002      	add	sp, #8
 8001614:	bd10      	pop	{r4, pc}
 8001616:	bf00      	nop
 8001618:	08005288 	.word	0x08005288
 800161c:	200003a4 	.word	0x200003a4

08001620 <Master_Slave_Communication_Init>:
uint8_t Master_Slave_Communication_Receive_Data;
Sensor_Msg_ Sensor_Msg;

void Master_Slave_Communication_Init()
{
	Sensor_Msg.BLE_Data.Connected_Sign = false;
 8001620:	2200      	movs	r2, #0
 8001622:	4b02      	ldr	r3, [pc, #8]	; (800162c <Master_Slave_Communication_Init+0xc>)
 8001624:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200000e8 	.word	0x200000e8

08001630 <Master_Slave_Communication>:

void Master_Slave_Communication()
{
 8001630:	b570      	push	{r4, r5, r6, lr}
	Sensor_Msg.check = HAL_CRC_Calculate(&hcrc, (uint32_t*)&Sensor_Msg, sizeof(Sensor_Msg)/4-1);
 8001632:	4c08      	ldr	r4, [pc, #32]	; (8001654 <Master_Slave_Communication+0x24>)
 8001634:	221a      	movs	r2, #26
 8001636:	4621      	mov	r1, r4
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <Master_Slave_Communication+0x28>)
 800163a:	f001 f8b3 	bl	80027a4 <HAL_CRC_Calculate>
 800163e:	4605      	mov	r5, r0
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&Sensor_Msg, sizeof(Sensor_Msg)/2, HAL_MAX_DELAY);
 8001640:	4621      	mov	r1, r4
	Sensor_Msg.check = HAL_CRC_Calculate(&hcrc, (uint32_t*)&Sensor_Msg, sizeof(Sensor_Msg)/4-1);
 8001642:	66a5      	str	r5, [r4, #104]	; 0x68
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&Sensor_Msg, sizeof(Sensor_Msg)/2, HAL_MAX_DELAY);
 8001644:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_SPI_Transmit(&hspi2, (uint8_t*)&Sensor_Msg, sizeof(Sensor_Msg)/2, HAL_MAX_DELAY);
 800164c:	2236      	movs	r2, #54	; 0x36
 800164e:	4803      	ldr	r0, [pc, #12]	; (800165c <Master_Slave_Communication+0x2c>)
 8001650:	f002 bcd8 	b.w	8004004 <HAL_SPI_Transmit>
 8001654:	200000e8 	.word	0x200000e8
 8001658:	20000184 	.word	0x20000184
 800165c:	20000238 	.word	0x20000238

08001660 <MX_ADC1_Init>:

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001660:	2300      	movs	r3, #0

  /** Common config
  */
  hadc1.Instance = ADC1;
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001662:	2201      	movs	r2, #1
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001664:	f44f 2160 	mov.w	r1, #917504	; 0xe0000
{
 8001668:	b530      	push	{r4, r5, lr}
  hadc1.Instance = ADC1;
 800166a:	4812      	ldr	r0, [pc, #72]	; (80016b4 <MX_ADC1_Init+0x54>)
 800166c:	4c12      	ldr	r4, [pc, #72]	; (80016b8 <MX_ADC1_Init+0x58>)
{
 800166e:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8001670:	e9cd 3301 	strd	r3, r3, [sp, #4]
  hadc1.Instance = ADC1;
 8001674:	6004      	str	r4, [r0, #0]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001676:	9300      	str	r3, [sp, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001678:	6083      	str	r3, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800167a:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800167c:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800167e:	61c1      	str	r1, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001680:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001682:	6102      	str	r2, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001684:	f000 fd30 	bl	80020e8 <HAL_ADC_Init>
 8001688:	b960      	cbnz	r0, 80016a4 <MX_ADC1_Init+0x44>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800168a:	2400      	movs	r4, #0
 800168c:	2501      	movs	r5, #1
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800168e:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001690:	4669      	mov	r1, sp
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <MX_ADC1_Init+0x54>)
  sConfig.Channel = ADC_CHANNEL_0;
 8001694:	e9cd 4500 	strd	r4, r5, [sp]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001698:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169a:	f000 feb5 	bl	8002408 <HAL_ADC_ConfigChannel>
 800169e:	b920      	cbnz	r0, 80016aa <MX_ADC1_Init+0x4a>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016a0:	b005      	add	sp, #20
 80016a2:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80016a4:	f000 f9d2 	bl	8001a4c <Error_Handler>
 80016a8:	e7ef      	b.n	800168a <MX_ADC1_Init+0x2a>
    Error_Handler();
 80016aa:	f000 f9cf 	bl	8001a4c <Error_Handler>
}
 80016ae:	b005      	add	sp, #20
 80016b0:	bd30      	pop	{r4, r5, pc}
 80016b2:	bf00      	nop
 80016b4:	20000154 	.word	0x20000154
 80016b8:	40012400 	.word	0x40012400

080016bc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	2300      	movs	r3, #0
{
 80016be:	b530      	push	{r4, r5, lr}
  if(adcHandle->Instance==ADC1)
 80016c0:	4a15      	ldr	r2, [pc, #84]	; (8001718 <HAL_ADC_MspInit+0x5c>)
 80016c2:	6801      	ldr	r1, [r0, #0]
{
 80016c4:	b087      	sub	sp, #28
  if(adcHandle->Instance==ADC1)
 80016c6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80016cc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(adcHandle->Instance==ADC1)
 80016d0:	d001      	beq.n	80016d6 <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80016d2:	b007      	add	sp, #28
 80016d4:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016d6:	2401      	movs	r4, #1
 80016d8:	2503      	movs	r5, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80016de:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80016e2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e4:	480d      	ldr	r0, [pc, #52]	; (800171c <HAL_ADC_MspInit+0x60>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016ea:	619a      	str	r2, [r3, #24]
 80016ec:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ee:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016f0:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80016f4:	9200      	str	r2, [sp, #0]
 80016f6:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	f042 0204 	orr.w	r2, r2, #4
 80016fe:	619a      	str	r2, [r3, #24]
 8001700:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001702:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	9301      	str	r3, [sp, #4]
 800170c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170e:	f001 f9db 	bl	8002ac8 <HAL_GPIO_Init>
}
 8001712:	b007      	add	sp, #28
 8001714:	bd30      	pop	{r4, r5, pc}
 8001716:	bf00      	nop
 8001718:	40012400 	.word	0x40012400
 800171c:	40010800 	.word	0x40010800

08001720 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001720:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_CRC_Init+0x18>)
 8001724:	4b05      	ldr	r3, [pc, #20]	; (800173c <MX_CRC_Init+0x1c>)
 8001726:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001728:	f001 f828 	bl	800277c <HAL_CRC_Init>
 800172c:	b900      	cbnz	r0, 8001730 <MX_CRC_Init+0x10>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800172e:	bd08      	pop	{r3, pc}
 8001730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001734:	f000 b98a 	b.w	8001a4c <Error_Handler>
 8001738:	20000184 	.word	0x20000184
 800173c:	40023000 	.word	0x40023000

08001740 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8001740:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_CRC_MspInit+0x28>)
 8001742:	6802      	ldr	r2, [r0, #0]
 8001744:	429a      	cmp	r2, r3
 8001746:	d000      	beq.n	800174a <HAL_CRC_MspInit+0xa>
 8001748:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800174a:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 800174e:	695a      	ldr	r2, [r3, #20]
{
 8001750:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8001752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001756:	615a      	str	r2, [r3, #20]
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001762:	b002      	add	sp, #8
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	40023000 	.word	0x40023000

0800176c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800176c:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <MX_DMA_Init+0x40>)
{
 800176e:	b500      	push	{lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001770:	6958      	ldr	r0, [r3, #20]
{
 8001772:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001774:	f040 0001 	orr.w	r0, r0, #1
 8001778:	6158      	str	r0, [r3, #20]
 800177a:	695b      	ldr	r3, [r3, #20]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800177c:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 800177e:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001782:	2102      	movs	r1, #2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001784:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8001786:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001788:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 800178a:	f000 ff93 	bl	80026b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800178e:	200f      	movs	r0, #15
 8001790:	f000 ffce 	bl	8002730 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 3, 0);
 8001794:	2010      	movs	r0, #16
 8001796:	2200      	movs	r2, #0
 8001798:	2103      	movs	r1, #3
 800179a:	f000 ff8b 	bl	80026b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800179e:	2010      	movs	r0, #16

}
 80017a0:	b003      	add	sp, #12
 80017a2:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80017a6:	f000 bfc3 	b.w	8002730 <HAL_NVIC_EnableIRQ>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000

080017b0 <MX_GPIO_Init>:
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
     PA0-WKUP   ------> ADCx_IN0
*/
void MX_GPIO_Init(void)
{
 80017b0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	2400      	movs	r4, #0
{
 80017b4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b6:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80017ba:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017be:	4b2f      	ldr	r3, [pc, #188]	; (800187c <MX_GPIO_Init+0xcc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENCODER_SPI1_CS1_Pin|ENCODER_SPI1_CS2_Pin|ENCODER_SPI1_CS3_Pin, GPIO_PIN_SET);
 80017c0:	4d2f      	ldr	r5, [pc, #188]	; (8001880 <MX_GPIO_Init+0xd0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c2:	699e      	ldr	r6, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, ENCODER_SPI1_CS1_Pin|ENCODER_SPI1_CS2_Pin|ENCODER_SPI1_CS3_Pin, GPIO_PIN_SET);
 80017c4:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017c6:	f046 0610 	orr.w	r6, r6, #16
 80017ca:	619e      	str	r6, [r3, #24]
 80017cc:	699e      	ldr	r6, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, ENCODER_SPI1_CS1_Pin|ENCODER_SPI1_CS2_Pin|ENCODER_SPI1_CS3_Pin, GPIO_PIN_SET);
 80017ce:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d0:	f006 0610 	and.w	r6, r6, #16
 80017d4:	9600      	str	r6, [sp, #0]
 80017d6:	9e00      	ldr	r6, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017d8:	699e      	ldr	r6, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, ENCODER_SPI1_CS1_Pin|ENCODER_SPI1_CS2_Pin|ENCODER_SPI1_CS3_Pin, GPIO_PIN_SET);
 80017da:	2107      	movs	r1, #7
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017dc:	f046 0620 	orr.w	r6, r6, #32
 80017e0:	619e      	str	r6, [r3, #24]
 80017e2:	699e      	ldr	r6, [r3, #24]
  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e4:	4f27      	ldr	r7, [pc, #156]	; (8001884 <MX_GPIO_Init+0xd4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e6:	f006 0620 	and.w	r6, r6, #32
 80017ea:	9601      	str	r6, [sp, #4]
 80017ec:	9e01      	ldr	r6, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	699e      	ldr	r6, [r3, #24]
 80017f0:	f046 0604 	orr.w	r6, r6, #4
 80017f4:	619e      	str	r6, [r3, #24]
 80017f6:	699e      	ldr	r6, [r3, #24]
 80017f8:	f006 0604 	and.w	r6, r6, #4
 80017fc:	9602      	str	r6, [sp, #8]
 80017fe:	9e02      	ldr	r6, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001800:	699e      	ldr	r6, [r3, #24]
 8001802:	f046 0608 	orr.w	r6, r6, #8
 8001806:	619e      	str	r6, [r3, #24]
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	9303      	str	r3, [sp, #12]
 8001810:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, ENCODER_SPI1_CS1_Pin|ENCODER_SPI1_CS2_Pin|ENCODER_SPI1_CS3_Pin, GPIO_PIN_SET);
 8001812:	f001 fa6d 	bl	8002cf0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001816:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800181a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181c:	a904      	add	r1, sp, #16
 800181e:	481a      	ldr	r0, [pc, #104]	; (8001888 <MX_GPIO_Init+0xd8>)
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001820:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f001 f950 	bl	8002ac8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8001828:	f249 7213 	movw	r2, #38675	; 0x9713
 800182c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182e:	4638      	mov	r0, r7
 8001830:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8001832:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001836:	f001 f947 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = ENCODER_SPI1_CS1_Pin|ENCODER_SPI1_CS2_Pin|ENCODER_SPI1_CS3_Pin;
 800183a:	2207      	movs	r2, #7
 800183c:	2301      	movs	r3, #1
 800183e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001842:	2202      	movs	r2, #2
 8001844:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001846:	4628      	mov	r0, r5
 8001848:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = ENCODER_SPI1_CS1_Pin|ENCODER_SPI1_CS2_Pin|ENCODER_SPI1_CS3_Pin;
 800184a:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184e:	f001 f93b 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3
 8001852:	f641 4238 	movw	r2, #7224	; 0x1c38
 8001856:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	4628      	mov	r0, r5
 800185a:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_3
 800185c:	e9cd 2304 	strd	r2, r3, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001860:	f001 f932 	bl	8002ac8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BLE_UART1_STATE_Pin;
 8001864:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001868:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BLE_UART1_STATE_GPIO_Port, &GPIO_InitStruct);
 800186a:	4638      	mov	r0, r7
 800186c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BLE_UART1_STATE_Pin;
 800186e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(BLE_UART1_STATE_GPIO_Port, &GPIO_InitStruct);
 8001874:	f001 f928 	bl	8002ac8 <HAL_GPIO_Init>

}
 8001878:	b009      	add	sp, #36	; 0x24
 800187a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	40010c00 	.word	0x40010c00
 8001884:	40010800 	.word	0x40010800
 8001888:	40011000 	.word	0x40011000

0800188c <MX_I2C1_Init>:
  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800188c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 132;
 800188e:	2184      	movs	r1, #132	; 0x84
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001890:	f44f 4280 	mov.w	r2, #16384	; 0x4000
{
 8001894:	b510      	push	{r4, lr}
  hi2c1.Instance = I2C1;
 8001896:	480a      	ldr	r0, [pc, #40]	; (80018c0 <MX_I2C1_Init+0x34>)
  hi2c1.Init.ClockSpeed = 100000;
 8001898:	f8df c028 	ldr.w	ip, [pc, #40]	; 80018c4 <MX_I2C1_Init+0x38>
 800189c:	4c0a      	ldr	r4, [pc, #40]	; (80018c8 <MX_I2C1_Init+0x3c>)
  hi2c1.Init.OwnAddress1 = 132;
 800189e:	e9c0 3102 	strd	r3, r1, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80018a2:	e9c0 c400 	strd	ip, r4, [r0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018aa:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ae:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018b0:	f001 fa22 	bl	8002cf8 <HAL_I2C_Init>
 80018b4:	b900      	cbnz	r0, 80018b8 <MX_I2C1_Init+0x2c>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018b6:	bd10      	pop	{r4, pc}
 80018b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80018bc:	f000 b8c6 	b.w	8001a4c <Error_Handler>
 80018c0:	2000018c 	.word	0x2000018c
 80018c4:	40005400 	.word	0x40005400
 80018c8:	000186a0 	.word	0x000186a0

080018cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018cc:	2300      	movs	r3, #0
{
 80018ce:	b5d0      	push	{r4, r6, r7, lr}
  if(i2cHandle->Instance==I2C1)
 80018d0:	4a18      	ldr	r2, [pc, #96]	; (8001934 <HAL_I2C_MspInit+0x68>)
 80018d2:	6801      	ldr	r1, [r0, #0]
{
 80018d4:	b086      	sub	sp, #24
  if(i2cHandle->Instance==I2C1)
 80018d6:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80018dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(i2cHandle->Instance==I2C1)
 80018e0:	d001      	beq.n	80018e6 <HAL_I2C_MspInit+0x1a>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80018e2:	b006      	add	sp, #24
 80018e4:	bdd0      	pop	{r4, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e6:	2203      	movs	r2, #3
    GPIO_InitStruct.Pin = TRACKING_I2C1_SCL_Pin|TRACKING_I2C1_SDA_Pin;
 80018e8:	f44f 7640 	mov.w	r6, #768	; 0x300
 80018ec:	2712      	movs	r7, #18
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ee:	4c12      	ldr	r4, [pc, #72]	; (8001938 <HAL_I2C_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f0:	4812      	ldr	r0, [pc, #72]	; (800193c <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f4:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	61a3      	str	r3, [r4, #24]
 80018fc:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018fe:	9205      	str	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = TRACKING_I2C1_SCL_Pin|TRACKING_I2C1_SDA_Pin;
 8001908:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190c:	f001 f8dc 	bl	8002ac8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001910:	4a0b      	ldr	r2, [pc, #44]	; (8001940 <HAL_I2C_MspInit+0x74>)
 8001912:	6853      	ldr	r3, [r2, #4]
 8001914:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001918:	f043 0302 	orr.w	r3, r3, #2
 800191c:	6053      	str	r3, [r2, #4]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800191e:	69e3      	ldr	r3, [r4, #28]
 8001920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001924:	61e3      	str	r3, [r4, #28]
 8001926:	69e3      	ldr	r3, [r4, #28]
 8001928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	9b01      	ldr	r3, [sp, #4]
}
 8001930:	b006      	add	sp, #24
 8001932:	bdd0      	pop	{r4, r6, r7, pc}
 8001934:	40005400 	.word	0x40005400
 8001938:	40021000 	.word	0x40021000
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40010000 	.word	0x40010000

08001944 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim == &htim3)
 8001944:	4b02      	ldr	r3, [pc, #8]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8001946:	4283      	cmp	r3, r0
 8001948:	d000      	beq.n	800194c <HAL_TIM_PeriodElapsedCallback+0x8>
	{
		BLE_Receive_Clear();
	}
}
 800194a:	4770      	bx	lr
		BLE_Receive_Clear();
 800194c:	f7ff bb82 	b.w	8001054 <BLE_Receive_Clear>
 8001950:	20000290 	.word	0x20000290

08001954 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001954:	2300      	movs	r3, #0
{
 8001956:	b5d0      	push	{r4, r6, r7, lr}
 8001958:	b094      	sub	sp, #80	; 0x50
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800195a:	2601      	movs	r6, #1
 800195c:	f44f 3780 	mov.w	r7, #65536	; 0x10000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001960:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001962:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001964:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001968:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800196c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8001970:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001974:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001978:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800197a:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800197c:	9300      	str	r3, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800197e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001980:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001982:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001986:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001988:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800198c:	910e      	str	r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800198e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001990:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001992:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001994:	f001 fe9e 	bl	80036d4 <HAL_RCC_OscConfig>
 8001998:	b108      	cbz	r0, 800199e <SystemClock_Config+0x4a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800199c:	e7fe      	b.n	800199c <SystemClock_Config+0x48>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199e:	220f      	movs	r2, #15
 80019a0:	2302      	movs	r3, #2
 80019a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ac:	9008      	str	r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019ae:	4621      	mov	r1, r4
 80019b0:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b6:	f002 f87d 	bl	8003ab4 <HAL_RCC_ClockConfig>
 80019ba:	b108      	cbz	r0, 80019c0 <SystemClock_Config+0x6c>
 80019bc:	b672      	cpsid	i
  while (1)
 80019be:	e7fe      	b.n	80019be <SystemClock_Config+0x6a>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019c4:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80019c6:	9400      	str	r4, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80019c8:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ca:	f002 f963 	bl	8003c94 <HAL_RCCEx_PeriphCLKConfig>
 80019ce:	b108      	cbz	r0, 80019d4 <SystemClock_Config+0x80>
 80019d0:	b672      	cpsid	i
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <SystemClock_Config+0x7e>
}
 80019d4:	b014      	add	sp, #80	; 0x50
 80019d6:	bdd0      	pop	{r4, r6, r7, pc}

080019d8 <main>:
{
 80019d8:	b508      	push	{r3, lr}
  HAL_Init();
 80019da:	f000 fb4f 	bl	800207c <HAL_Init>
  SystemClock_Config();
 80019de:	f7ff ffb9 	bl	8001954 <SystemClock_Config>
  MX_GPIO_Init();
 80019e2:	f7ff fee5 	bl	80017b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80019e6:	f7ff fec1 	bl	800176c <MX_DMA_Init>
  MX_USART1_UART_Init();
 80019ea:	f000 f9bf 	bl	8001d6c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80019ee:	f000 f82f 	bl	8001a50 <MX_SPI1_Init>
  MX_I2C1_Init();
 80019f2:	f7ff ff4b 	bl	800188c <MX_I2C1_Init>
  MX_SPI2_Init();
 80019f6:	f000 f84f 	bl	8001a98 <MX_SPI2_Init>
  MX_ADC1_Init();
 80019fa:	f7ff fe31 	bl	8001660 <MX_ADC1_Init>
  MX_CRC_Init();
 80019fe:	f7ff fe8f 	bl	8001720 <MX_CRC_Init>
  MX_TIM3_Init();
 8001a02:	f000 f959 	bl	8001cb8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001a06:	f000 f9cd 	bl	8001da4 <MX_USART2_UART_Init>
  HAL_Delay(1000);   //I2C从机先上电主机后上电
 8001a0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a0e:	f000 fb59 	bl	80020c4 <HAL_Delay>
  IMU_Init();
 8001a12:	f7ff fdcd 	bl	80015b0 <IMU_Init>
  HAL_UART_Receive_DMA(&huart2,IMU_Receive_Data,Imu_Uart_Buffer);
 8001a16:	2221      	movs	r2, #33	; 0x21
 8001a18:	490a      	ldr	r1, [pc, #40]	; (8001a44 <main+0x6c>)
 8001a1a:	480b      	ldr	r0, [pc, #44]	; (8001a48 <main+0x70>)
 8001a1c:	f003 f872 	bl	8004b04 <HAL_UART_Receive_DMA>
  Battery_Detection_Init();
 8001a20:	f7ff fb20 	bl	8001064 <Battery_Detection_Init>
  BLE_Init();
 8001a24:	f7ff fa52 	bl	8000ecc <BLE_Init>
  Master_Slave_Communication_Init();
 8001a28:	f7ff fdfa 	bl	8001620 <Master_Slave_Communication_Init>
	  BLE_Detection();
 8001a2c:	f7ff fa0c 	bl	8000e48 <BLE_Detection>
	  Battery_Detection();
 8001a30:	f7ff fb1e 	bl	8001070 <Battery_Detection>
	  Tracking_Detection();
 8001a34:	f000 faaa 	bl	8001f8c <Tracking_Detection>
	  Encoder_Detection();
 8001a38:	f7ff fcca 	bl	80013d0 <Encoder_Detection>
	  Master_Slave_Communication();
 8001a3c:	f7ff fdf8 	bl	8001630 <Master_Slave_Communication>
  while (1)
 8001a40:	e7f4      	b.n	8001a2c <main+0x54>
 8001a42:	bf00      	nop
 8001a44:	200000c4 	.word	0x200000c4
 8001a48:	200003a4 	.word	0x200003a4

08001a4c <Error_Handler>:
 8001a4c:	b672      	cpsid	i
  while (1)
 8001a4e:	e7fe      	b.n	8001a4e <Error_Handler+0x2>

08001a50 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi2;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001a50:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a52:	2102      	movs	r1, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a54:	2300      	movs	r3, #0
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a56:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001a5a:	2401      	movs	r4, #1
  hspi1.Instance = SPI1;
 8001a5c:	480c      	ldr	r0, [pc, #48]	; (8001a90 <MX_SPI1_Init+0x40>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a5e:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001a62:	e9c0 3103 	strd	r3, r1, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a66:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a6a:	2110      	movs	r1, #16
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
 8001a6c:	220a      	movs	r2, #10
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a6e:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a72:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a76:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Instance = SPI1;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_SPI1_Init+0x44>)
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a7a:	61c1      	str	r1, [r0, #28]
  hspi1.Instance = SPI1;
 8001a7c:	6003      	str	r3, [r0, #0]
  hspi1.Init.CRCPolynomial = 10;
 8001a7e:	62c2      	str	r2, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a80:	f002 fa62 	bl	8003f48 <HAL_SPI_Init>
 8001a84:	b900      	cbnz	r0, 8001a88 <MX_SPI1_Init+0x38>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a86:	bd38      	pop	{r3, r4, r5, pc}
 8001a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001a8c:	f7ff bfde 	b.w	8001a4c <Error_Handler>
 8001a90:	200001e0 	.word	0x200001e0
 8001a94:	40013000 	.word	0x40013000

08001a98 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001a98:	b538      	push	{r3, r4, r5, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a9e:	2300      	movs	r3, #0
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001aa0:	f44f 7582 	mov.w	r5, #260	; 0x104
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001aa4:	f44f 6400 	mov.w	r4, #2048	; 0x800
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 10;
 8001aa8:	220a      	movs	r2, #10
  hspi2.Instance = SPI2;
 8001aaa:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <MX_SPI2_Init+0x40>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aac:	e9c0 5301 	strd	r5, r3, [r0, #4]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ab0:	e9c0 4303 	strd	r4, r3, [r0, #12]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ab4:	e9c0 3105 	strd	r3, r1, [r0, #20]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab8:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001abc:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
  hspi2.Instance = SPI2;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <MX_SPI2_Init+0x44>)
  hspi2.Init.CRCPolynomial = 10;
 8001ac2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi2.Instance = SPI2;
 8001ac4:	6003      	str	r3, [r0, #0]
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ac6:	f002 fa3f 	bl	8003f48 <HAL_SPI_Init>
 8001aca:	b900      	cbnz	r0, 8001ace <MX_SPI2_Init+0x36>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001acc:	bd38      	pop	{r3, r4, r5, pc}
 8001ace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Error_Handler();
 8001ad2:	f7ff bfbb 	b.w	8001a4c <Error_Handler>
 8001ad6:	bf00      	nop
 8001ad8:	20000238 	.word	0x20000238
 8001adc:	40003800 	.word	0x40003800

08001ae0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001ae0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	2400      	movs	r4, #0
  if(spiHandle->Instance==SPI1)
 8001ae4:	4a30      	ldr	r2, [pc, #192]	; (8001ba8 <HAL_SPI_MspInit+0xc8>)
 8001ae6:	6803      	ldr	r3, [r0, #0]
{
 8001ae8:	b089      	sub	sp, #36	; 0x24
  if(spiHandle->Instance==SPI1)
 8001aea:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001af0:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(spiHandle->Instance==SPI1)
 8001af4:	d004      	beq.n	8001b00 <HAL_SPI_MspInit+0x20>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8001af6:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <HAL_SPI_MspInit+0xcc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d02a      	beq.n	8001b52 <HAL_SPI_MspInit+0x72>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001afc:	b009      	add	sp, #36	; 0x24
 8001afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b00:	2003      	movs	r0, #3
    GPIO_InitStruct.Pin = ENCODER_SPI1_SCK_Pin|ENCODER_SPI1_MOSI_Pin;
 8001b02:	24a0      	movs	r4, #160	; 0xa0
 8001b04:	2502      	movs	r5, #2
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b06:	4b2a      	ldr	r3, [pc, #168]	; (8001bb0 <HAL_SPI_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b08:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b0a:	699a      	ldr	r2, [r3, #24]
 8001b0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b10:	619a      	str	r2, [r3, #24]
 8001b12:	699a      	ldr	r2, [r3, #24]
 8001b14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b18:	9200      	str	r2, [sp, #0]
 8001b1a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	699a      	ldr	r2, [r3, #24]
 8001b1e:	f042 0204 	orr.w	r2, r2, #4
 8001b22:	619a      	str	r2, [r3, #24]
 8001b24:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b26:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2e:	4821      	ldr	r0, [pc, #132]	; (8001bb4 <HAL_SPI_MspInit+0xd4>)
    GPIO_InitStruct.Pin = ENCODER_SPI1_SCK_Pin|ENCODER_SPI1_MOSI_Pin;
 8001b30:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b34:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = ENCODER_SPI1_MISO_Pin;
 8001b36:	2440      	movs	r4, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f000 ffc6 	bl	8002ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_SPI1_MISO_Pin;
 8001b3c:	2500      	movs	r5, #0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b3e:	2301      	movs	r3, #1
    HAL_GPIO_Init(ENCODER_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b40:	481c      	ldr	r0, [pc, #112]	; (8001bb4 <HAL_SPI_MspInit+0xd4>)
 8001b42:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = ENCODER_SPI1_MISO_Pin;
 8001b44:	e9cd 4504 	strd	r4, r5, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b48:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(ENCODER_SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f000 ffbd 	bl	8002ac8 <HAL_GPIO_Init>
}
 8001b4e:	b009      	add	sp, #36	; 0x24
 8001b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_SPI_MspInit+0xd0>)
    GPIO_InitStruct.Pin = MASTER_SLAVE_SPI2_SCK_Pin|MASTER_SLAVE_SPI2_MOSI_Pin;
 8001b54:	f44f 4620 	mov.w	r6, #40960	; 0xa000
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b58:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = MASTER_SLAVE_SPI2_SCK_Pin|MASTER_SLAVE_SPI2_MOSI_Pin;
 8001b5a:	2702      	movs	r7, #2
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b60:	61da      	str	r2, [r3, #28]
 8001b62:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b64:	a904      	add	r1, sp, #16
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b66:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b6a:	9202      	str	r2, [sp, #8]
 8001b6c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6e:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <HAL_SPI_MspInit+0xd8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	f042 0208 	orr.w	r2, r2, #8
 8001b76:	619a      	str	r2, [r3, #24]
 8001b78:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = MASTER_SLAVE_SPI2_SCK_Pin|MASTER_SLAVE_SPI2_MOSI_Pin;
 8001b7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b84:	2303      	movs	r3, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b86:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b88:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f000 ff9d 	bl	8002ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = MASTER_SLAVE_SPI2_MISO_Pin;
 8001b8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b92:	2300      	movs	r3, #0
    HAL_GPIO_Init(MASTER_SLAVE_SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b94:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <HAL_SPI_MspInit+0xd8>)
 8001b96:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = MASTER_SLAVE_SPI2_MISO_Pin;
 8001b98:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(MASTER_SLAVE_SPI2_MISO_GPIO_Port, &GPIO_InitStruct);
 8001b9e:	f000 ff93 	bl	8002ac8 <HAL_GPIO_Init>
}
 8001ba2:	b009      	add	sp, #36	; 0x24
 8001ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40013000 	.word	0x40013000
 8001bac:	40003800 	.word	0x40003800
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40010800 	.word	0x40010800
 8001bb8:	40010c00 	.word	0x40010c00

08001bbc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bbc:	4b0e      	ldr	r3, [pc, #56]	; (8001bf8 <HAL_MspInit+0x3c>)
{
 8001bbe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc0:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001bc2:	490e      	ldr	r1, [pc, #56]	; (8001bfc <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	619a      	str	r2, [r3, #24]
 8001bca:	699a      	ldr	r2, [r3, #24]
 8001bcc:	f002 0201 	and.w	r2, r2, #1
 8001bd0:	9200      	str	r2, [sp, #0]
 8001bd2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bda:	61da      	str	r2, [r3, #28]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001be6:	684b      	ldr	r3, [r1, #4]
 8001be8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bf0:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	b002      	add	sp, #8
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40010000 	.word	0x40010000

08001c00 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <NMI_Handler>
 8001c02:	bf00      	nop

08001c04 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c04:	e7fe      	b.n	8001c04 <HardFault_Handler>
 8001c06:	bf00      	nop

08001c08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c08:	e7fe      	b.n	8001c08 <MemManage_Handler>
 8001c0a:	bf00      	nop

08001c0c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <BusFault_Handler>
 8001c0e:	bf00      	nop

08001c10 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler>
 8001c12:	bf00      	nop

08001c14 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop

08001c18 <DebugMon_Handler>:
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop

08001c1c <PendSV_Handler>:
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop

08001c20 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c20:	f000 ba3e 	b.w	80020a0 <HAL_IncTick>

08001c24 <DMA1_Channel5_IRQHandler>:
void DMA1_Channel5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c24:	4801      	ldr	r0, [pc, #4]	; (8001c2c <DMA1_Channel5_IRQHandler+0x8>)
 8001c26:	f000 bebb 	b.w	80029a0 <HAL_DMA_IRQHandler>
 8001c2a:	bf00      	nop
 8001c2c:	200002d8 	.word	0x200002d8

08001c30 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001c30:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c32:	4803      	ldr	r0, [pc, #12]	; (8001c40 <DMA1_Channel6_IRQHandler+0x10>)
 8001c34:	f000 feb4 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */
  IMU_Receive();
  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001c38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  IMU_Receive();
 8001c3c:	f7ff bbd4 	b.w	80013e8 <IMU_Receive>
 8001c40:	2000031c 	.word	0x2000031c

08001c44 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c44:	4801      	ldr	r0, [pc, #4]	; (8001c4c <TIM3_IRQHandler+0x8>)
 8001c46:	f002 bd87 	b.w	8004758 <HAL_TIM_IRQHandler>
 8001c4a:	bf00      	nop
 8001c4c:	20000290 	.word	0x20000290

08001c50 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c50:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	uint32_t tmp_flag = 0;
	uint32_t temp;
	tmp_flag =__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE);
 8001c52:	4c15      	ldr	r4, [pc, #84]	; (8001ca8 <USART1_IRQHandler+0x58>)
{
 8001c54:	b083      	sub	sp, #12
	tmp_flag =__HAL_UART_GET_FLAG(&huart1,UART_FLAG_IDLE);
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
	if((tmp_flag != RESET))
 8001c5a:	06d2      	lsls	r2, r2, #27
 8001c5c:	d405      	bmi.n	8001c6a <USART1_IRQHandler+0x1a>
		BLE_Receive();
		memset(BLE_Receive_Data,0,BLE_Uart_Buffer);
		HAL_UART_Receive_DMA(&huart1,BLE_Receive_Data,BLE_Uart_Buffer);//重新打开DMA接收
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c5e:	4812      	ldr	r0, [pc, #72]	; (8001ca8 <USART1_IRQHandler+0x58>)
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c60:	b003      	add	sp, #12
 8001c62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_UART_IRQHandler(&huart1);
 8001c66:	f003 b8c9 	b.w	8004dfc <HAL_UART_IRQHandler>
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001c6a:	2500      	movs	r5, #0
 8001c6c:	9501      	str	r5, [sp, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
		HAL_UART_DMAStop(&huart1);
 8001c70:	4620      	mov	r0, r4
		__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8001c72:	9201      	str	r2, [sp, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	9301      	str	r3, [sp, #4]
 8001c78:	9b01      	ldr	r3, [sp, #4]
		HAL_UART_DMAStop(&huart1);
 8001c7a:	f002 ff93 	bl	8004ba4 <HAL_UART_DMAStop>
		temp  =  __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8001c7e:	4b0b      	ldr	r3, [pc, #44]	; (8001cac <USART1_IRQHandler+0x5c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
		BLE_Receive();
 8001c84:	f7ff f928 	bl	8000ed8 <BLE_Receive>
		memset(BLE_Receive_Data,0,BLE_Uart_Buffer);
 8001c88:	4629      	mov	r1, r5
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	4808      	ldr	r0, [pc, #32]	; (8001cb0 <USART1_IRQHandler+0x60>)
 8001c8e:	f003 fa0d 	bl	80050ac <memset>
		HAL_UART_Receive_DMA(&huart1,BLE_Receive_Data,BLE_Uart_Buffer);//重新打开DMA接收
 8001c92:	2224      	movs	r2, #36	; 0x24
 8001c94:	4620      	mov	r0, r4
 8001c96:	4906      	ldr	r1, [pc, #24]	; (8001cb0 <USART1_IRQHandler+0x60>)
 8001c98:	f002 ff34 	bl	8004b04 <HAL_UART_Receive_DMA>
  HAL_UART_IRQHandler(&huart1);
 8001c9c:	4802      	ldr	r0, [pc, #8]	; (8001ca8 <USART1_IRQHandler+0x58>)
}
 8001c9e:	b003      	add	sp, #12
 8001ca0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  HAL_UART_IRQHandler(&huart1);
 8001ca4:	f003 b8aa 	b.w	8004dfc <HAL_UART_IRQHandler>
 8001ca8:	20000360 	.word	0x20000360
 8001cac:	200002d8 	.word	0x200002d8
 8001cb0:	200000a0 	.word	0x200000a0

08001cb4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop

08001cb8 <MX_TIM3_Init>:

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cb8:	2300      	movs	r3, #0

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 7200-1;
 8001cba:	f641 411f 	movw	r1, #7199	; 0x1c1f
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 3000-1;
 8001cbe:	f640 32b7 	movw	r2, #2999	; 0xbb7
{
 8001cc2:	b510      	push	{r4, lr}
  htim3.Instance = TIM3;
 8001cc4:	4817      	ldr	r0, [pc, #92]	; (8001d24 <MX_TIM3_Init+0x6c>)
 8001cc6:	4c18      	ldr	r4, [pc, #96]	; (8001d28 <MX_TIM3_Init+0x70>)
{
 8001cc8:	b086      	sub	sp, #24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cca:	e9c0 3202 	strd	r3, r2, [r0, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cce:	e9cd 3303 	strd	r3, r3, [sp, #12]
  htim3.Instance = TIM3;
 8001cd2:	6004      	str	r4, [r0, #0]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd4:	9302      	str	r3, [sp, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	9300      	str	r3, [sp, #0]
  htim3.Init.Prescaler = 7200-1;
 8001cd8:	6041      	str	r1, [r0, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cdc:	6183      	str	r3, [r0, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cde:	9305      	str	r3, [sp, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce0:	9301      	str	r3, [sp, #4]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ce2:	f002 fbf1 	bl	80044c8 <HAL_TIM_Base_Init>
 8001ce6:	b990      	cbnz	r0, 8001d0e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cec:	480d      	ldr	r0, [pc, #52]	; (8001d24 <MX_TIM3_Init+0x6c>)
 8001cee:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cf0:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cf2:	f002 fc83 	bl	80045fc <HAL_TIM_ConfigClockSource>
 8001cf6:	b988      	cbnz	r0, 8001d1c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cfc:	4669      	mov	r1, sp
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <MX_TIM3_Init+0x6c>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d00:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d04:	f002 fdd2 	bl	80048ac <HAL_TIMEx_MasterConfigSynchronization>
 8001d08:	b920      	cbnz	r0, 8001d14 <MX_TIM3_Init+0x5c>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d0a:	b006      	add	sp, #24
 8001d0c:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001d0e:	f7ff fe9d 	bl	8001a4c <Error_Handler>
 8001d12:	e7e9      	b.n	8001ce8 <MX_TIM3_Init+0x30>
    Error_Handler();
 8001d14:	f7ff fe9a 	bl	8001a4c <Error_Handler>
}
 8001d18:	b006      	add	sp, #24
 8001d1a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001d1c:	f7ff fe96 	bl	8001a4c <Error_Handler>
 8001d20:	e7ea      	b.n	8001cf8 <MX_TIM3_Init+0x40>
 8001d22:	bf00      	nop
 8001d24:	20000290 	.word	0x20000290
 8001d28:	40000400 	.word	0x40000400

08001d2c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM3)
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_TIM_Base_MspInit+0x3c>)
 8001d2e:	6802      	ldr	r2, [r0, #0]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d000      	beq.n	8001d36 <HAL_TIM_Base_MspInit+0xa>
 8001d34:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d36:	f503 3303 	add.w	r3, r3, #134144	; 0x20c00
 8001d3a:	69d9      	ldr	r1, [r3, #28]
{
 8001d3c:	b500      	push	{lr}
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d3e:	f041 0102 	orr.w	r1, r1, #2
 8001d42:	61d9      	str	r1, [r3, #28]
 8001d44:	69db      	ldr	r3, [r3, #28]
{
 8001d46:	b083      	sub	sp, #12
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	9301      	str	r3, [sp, #4]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8001d4e:	201d      	movs	r0, #29
 8001d50:	2200      	movs	r2, #0
 8001d52:	2104      	movs	r1, #4
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d54:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 8001d56:	f000 fcad 	bl	80026b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d5a:	201d      	movs	r0, #29
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d5c:	b003      	add	sp, #12
 8001d5e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d62:	f000 bce5 	b.w	8002730 <HAL_NVIC_EnableIRQ>
 8001d66:	bf00      	nop
 8001d68:	40000400 	.word	0x40000400

08001d6c <MX_USART1_UART_Init>:
  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6c:	2300      	movs	r3, #0
  huart1.Init.BaudRate = 9600;
 8001d6e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d72:	220c      	movs	r2, #12
{
 8001d74:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 8001d76:	4809      	ldr	r0, [pc, #36]	; (8001d9c <MX_USART1_UART_Init+0x30>)
 8001d78:	4c09      	ldr	r4, [pc, #36]	; (8001da0 <MX_USART1_UART_Init+0x34>)
  huart1.Init.BaudRate = 9600;
 8001d7a:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d7e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d82:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Instance = USART1;
 8001d86:	6004      	str	r4, [r0, #0]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d88:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d8a:	f002 fdc5 	bl	8004918 <HAL_UART_Init>
 8001d8e:	b900      	cbnz	r0, 8001d92 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d90:	bd10      	pop	{r4, pc}
 8001d92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001d96:	f7ff be59 	b.w	8001a4c <Error_Handler>
 8001d9a:	bf00      	nop
 8001d9c:	20000360 	.word	0x20000360
 8001da0:	40013800 	.word	0x40013800

08001da4 <MX_USART2_UART_Init>:
  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da4:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001da6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001daa:	220c      	movs	r2, #12
{
 8001dac:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001dae:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <MX_USART2_UART_Init+0x30>)
 8001db0:	4c09      	ldr	r4, [pc, #36]	; (8001dd8 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 115200;
 8001db2:	e9c0 1301 	strd	r1, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001db6:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dba:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Instance = USART2;
 8001dbe:	6004      	str	r4, [r0, #0]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001dc2:	f002 fda9 	bl	8004918 <HAL_UART_Init>
 8001dc6:	b900      	cbnz	r0, 8001dca <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001dc8:	bd10      	pop	{r4, pc}
 8001dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8001dce:	f7ff be3d 	b.w	8001a4c <Error_Handler>
 8001dd2:	bf00      	nop
 8001dd4:	200003a4 	.word	0x200003a4
 8001dd8:	40004400 	.word	0x40004400

08001ddc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ddc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dde:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 8001de0:	4a4d      	ldr	r2, [pc, #308]	; (8001f18 <HAL_UART_MspInit+0x13c>)
 8001de2:	6803      	ldr	r3, [r0, #0]
{
 8001de4:	b088      	sub	sp, #32
  if(uartHandle->Instance==USART1)
 8001de6:	4293      	cmp	r3, r2
{
 8001de8:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8001dee:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(uartHandle->Instance==USART1)
 8001df2:	d004      	beq.n	8001dfe <HAL_UART_MspInit+0x22>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(uartHandle->Instance==USART2)
 8001df4:	4a49      	ldr	r2, [pc, #292]	; (8001f1c <HAL_UART_MspInit+0x140>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d04d      	beq.n	8001e96 <HAL_UART_MspInit+0xba>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dfa:	b008      	add	sp, #32
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001dfe:	4b48      	ldr	r3, [pc, #288]	; (8001f20 <HAL_UART_MspInit+0x144>)
    HAL_GPIO_Init(BLE_MCU_UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001e00:	4848      	ldr	r0, [pc, #288]	; (8001f24 <HAL_UART_MspInit+0x148>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e02:	699a      	ldr	r2, [r3, #24]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e04:	4e48      	ldr	r6, [pc, #288]	; (8001f28 <HAL_UART_MspInit+0x14c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e0a:	619a      	str	r2, [r3, #24]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	f042 0208 	orr.w	r2, r2, #8
 8001e1c:	619a      	str	r2, [r3, #24]
 8001e1e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = BLE_MCU_UART1_TX_Pin;
 8001e20:	2240      	movs	r2, #64	; 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	9901      	ldr	r1, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2a:	2103      	movs	r1, #3
    GPIO_InitStruct.Pin = BLE_MCU_UART1_TX_Pin;
 8001e2c:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e2e:	9107      	str	r1, [sp, #28]
    HAL_GPIO_Init(BLE_MCU_UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001e30:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = BLE_MCU_UART1_TX_Pin;
 8001e32:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BLE_MCU_UART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001e36:	f000 fe47 	bl	8002ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3a:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = BLE_MCU_UART1_RX_Pin;
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	2300      	movs	r3, #0
    HAL_GPIO_Init(BLE_MCU_UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001e40:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e42:	9006      	str	r0, [sp, #24]
    HAL_GPIO_Init(BLE_MCU_UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001e44:	4837      	ldr	r0, [pc, #220]	; (8001f24 <HAL_UART_MspInit+0x148>)
    GPIO_InitStruct.Pin = BLE_MCU_UART1_RX_Pin;
 8001e46:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(BLE_MCU_UART1_RX_GPIO_Port, &GPIO_InitStruct);
 8001e4a:	f000 fe3d 	bl	8002ac8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001e4e:	4a37      	ldr	r2, [pc, #220]	; (8001f2c <HAL_UART_MspInit+0x150>)
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e50:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_UART_MspInit+0x154>)
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001e52:	6853      	ldr	r3, [r2, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e54:	6074      	str	r4, [r6, #4]
    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001e56:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	6053      	str	r3, [r2, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e60:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e66:	4630      	mov	r0, r6
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e68:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8001e6c:	6031      	str	r1, [r6, #0]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e6e:	60b4      	str	r4, [r6, #8]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001e70:	61b4      	str	r4, [r6, #24]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e72:	60f2      	str	r2, [r6, #12]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001e74:	61f3      	str	r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001e76:	f000 fcad 	bl	80027d4 <HAL_DMA_Init>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d145      	bne.n	8001f0a <HAL_UART_MspInit+0x12e>
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2102      	movs	r1, #2
 8001e82:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001e84:	63ae      	str	r6, [r5, #56]	; 0x38
 8001e86:	6275      	str	r5, [r6, #36]	; 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 8001e88:	f000 fc14 	bl	80026b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e8c:	2025      	movs	r0, #37	; 0x25
 8001e8e:	f000 fc4f 	bl	8002730 <HAL_NVIC_EnableIRQ>
}
 8001e92:	b008      	add	sp, #32
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e96:	4b22      	ldr	r3, [pc, #136]	; (8001f20 <HAL_UART_MspInit+0x144>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e98:	4826      	ldr	r0, [pc, #152]	; (8001f34 <HAL_UART_MspInit+0x158>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9a:	69da      	ldr	r2, [r3, #28]
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001e9c:	4e26      	ldr	r6, [pc, #152]	; (8001f38 <HAL_UART_MspInit+0x15c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e9e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001ea2:	61da      	str	r2, [r3, #28]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eae:	699a      	ldr	r2, [r3, #24]
 8001eb0:	f042 0204 	orr.w	r2, r2, #4
 8001eb4:	619a      	str	r2, [r3, #24]
 8001eb6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eb8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	9303      	str	r3, [sp, #12]
 8001ec0:	9903      	ldr	r1, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec2:	2103      	movs	r1, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ec4:	2302      	movs	r3, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ec6:	9107      	str	r1, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001eca:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ece:	f000 fdfb 	bl	8002ac8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ed2:	2208      	movs	r2, #8
 8001ed4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed6:	4817      	ldr	r0, [pc, #92]	; (8001f34 <HAL_UART_MspInit+0x158>)
 8001ed8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001eda:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ede:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f000 fdf2 	bl	8002ac8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ee4:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001ee6:	2320      	movs	r3, #32
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8001ee8:	4914      	ldr	r1, [pc, #80]	; (8001f3c <HAL_UART_MspInit+0x160>)
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001eea:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001eec:	e9c6 1400 	strd	r1, r4, [r6]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ef0:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef4:	60b4      	str	r4, [r6, #8]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ef6:	61f4      	str	r4, [r6, #28]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef8:	60f2      	str	r2, [r6, #12]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8001efa:	61b3      	str	r3, [r6, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001efc:	f000 fc6a 	bl	80027d4 <HAL_DMA_Init>
 8001f00:	b930      	cbnz	r0, 8001f10 <HAL_UART_MspInit+0x134>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001f02:	63ae      	str	r6, [r5, #56]	; 0x38
 8001f04:	6275      	str	r5, [r6, #36]	; 0x24
}
 8001f06:	b008      	add	sp, #32
 8001f08:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8001f0a:	f7ff fd9f 	bl	8001a4c <Error_Handler>
 8001f0e:	e7b6      	b.n	8001e7e <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8001f10:	f7ff fd9c 	bl	8001a4c <Error_Handler>
 8001f14:	e7f5      	b.n	8001f02 <HAL_UART_MspInit+0x126>
 8001f16:	bf00      	nop
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40004400 	.word	0x40004400
 8001f20:	40021000 	.word	0x40021000
 8001f24:	40010c00 	.word	0x40010c00
 8001f28:	200002d8 	.word	0x200002d8
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	40020058 	.word	0x40020058
 8001f34:	40010800 	.word	0x40010800
 8001f38:	2000031c 	.word	0x2000031c
 8001f3c:	4002006c 	.word	0x4002006c

08001f40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f40:	480c      	ldr	r0, [pc, #48]	; (8001f74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f42:	490d      	ldr	r1, [pc, #52]	; (8001f78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f44:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f48:	e002      	b.n	8001f50 <LoopCopyDataInit>

08001f4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f4e:	3304      	adds	r3, #4

08001f50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f54:	d3f9      	bcc.n	8001f4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f56:	4a0a      	ldr	r2, [pc, #40]	; (8001f80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f58:	4c0a      	ldr	r4, [pc, #40]	; (8001f84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f5c:	e001      	b.n	8001f62 <LoopFillZerobss>

08001f5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f60:	3204      	adds	r2, #4

08001f62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f64:	d3fb      	bcc.n	8001f5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001f66:	f7ff fea5 	bl	8001cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6a:	f003 f87b 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f6e:	f7ff fd33 	bl	80019d8 <main>
  bx lr
 8001f72:	4770      	bx	lr
  ldr r0, =_sdata
 8001f74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001f7c:	080052c0 	.word	0x080052c0
  ldr r2, =_sbss
 8001f80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001f84:	200003ec 	.word	0x200003ec

08001f88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f88:	e7fe      	b.n	8001f88 <ADC1_2_IRQHandler>
	...

08001f8c <Tracking_Detection>:
    return res;
}


void Tracking_Detection()
{
 8001f8c:	b570      	push	{r4, r5, r6, lr}

	if(Tracking_Slaver_Address != 0x04)		Tracking_Slaver_Address++;
 8001f8e:	4c26      	ldr	r4, [pc, #152]	; (8002028 <Tracking_Detection+0x9c>)
{
 8001f90:	b084      	sub	sp, #16
	if(Tracking_Slaver_Address != 0x04)		Tracking_Slaver_Address++;
 8001f92:	7823      	ldrb	r3, [r4, #0]
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d043      	beq.n	8002020 <Tracking_Detection+0x94>
 8001f98:	3301      	adds	r3, #1
 8001f9a:	b2db      	uxtb	r3, r3
	else									Tracking_Slaver_Address = 0x01;
	uint8_t data=0xFF;
	HAL_I2C_Master_Transmit(&hi2c1,Tracking_Slaver_Address<<1,&data,1,100);
 8001f9c:	0059      	lsls	r1, r3, #1
 8001f9e:	2564      	movs	r5, #100	; 0x64
	uint8_t data=0xFF;
 8001fa0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001fa4:	7023      	strb	r3, [r4, #0]
	HAL_I2C_Master_Transmit(&hi2c1,Tracking_Slaver_Address<<1,&data,1,100);
 8001fa6:	f10d 020f 	add.w	r2, sp, #15
 8001faa:	2301      	movs	r3, #1
 8001fac:	481f      	ldr	r0, [pc, #124]	; (800202c <Tracking_Detection+0xa0>)
 8001fae:	9500      	str	r5, [sp, #0]
	uint8_t data=0xFF;
 8001fb0:	f88d c00f 	strb.w	ip, [sp, #15]
	HAL_I2C_Master_Transmit(&hi2c1,Tracking_Slaver_Address<<1,&data,1,100);
 8001fb4:	f000 ff68 	bl	8002e88 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1,Tracking_Slaver_Address<<1,&Sensor_Msg.Tracking_Data[Tracking_Slaver_Address-1],1,100);
 8001fb8:	2301      	movs	r3, #1
 8001fba:	7821      	ldrb	r1, [r4, #0]
 8001fbc:	4e1c      	ldr	r6, [pc, #112]	; (8002030 <Tracking_Detection+0xa4>)
 8001fbe:	f101 025f 	add.w	r2, r1, #95	; 0x5f
 8001fc2:	4432      	add	r2, r6
 8001fc4:	4099      	lsls	r1, r3
 8001fc6:	4819      	ldr	r0, [pc, #100]	; (800202c <Tracking_Detection+0xa0>)
 8001fc8:	9500      	str	r5, [sp, #0]
 8001fca:	f001 f8f3 	bl	80031b4 <HAL_I2C_Master_Receive>

	if(Tracking_Slaver_Address == 0x03 || Tracking_Slaver_Address == 0x02)
 8001fce:	7823      	ldrb	r3, [r4, #0]
 8001fd0:	1e9a      	subs	r2, r3, #2
 8001fd2:	2a01      	cmp	r2, #1
 8001fd4:	d822      	bhi.n	800201c <Tracking_Detection+0x90>
	{
		Sensor_Msg.Tracking_Data[Tracking_Slaver_Address-1] = reverse_bits(Sensor_Msg.Tracking_Data[Tracking_Slaver_Address-1]);
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	18f1      	adds	r1, r6, r3
 8001fda:	f891 3060 	ldrb.w	r3, [r1, #96]	; 0x60
        res <<= 1;   // 左移一位，为下一位做准备
 8001fde:	005a      	lsls	r2, r3, #1
        res |= num & 1;   // 将原数的一位加入新数中
 8001fe0:	f3c3 0040 	ubfx	r0, r3, #1, #1
        res <<= 1;   // 左移一位，为下一位做准备
 8001fe4:	f002 0202 	and.w	r2, r2, #2
        res |= num & 1;   // 将原数的一位加入新数中
 8001fe8:	4302      	orrs	r2, r0
 8001fea:	f3c3 0080 	ubfx	r0, r3, #2, #1
 8001fee:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
 8001ff2:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 8001ff6:	ea40 0242 	orr.w	r2, r0, r2, lsl #1
 8001ffa:	f3c3 1000 	ubfx	r0, r3, #4, #1
 8001ffe:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
 8002002:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8002006:	ea42 0040 	orr.w	r0, r2, r0, lsl #1
 800200a:	f3c3 1280 	ubfx	r2, r3, #6, #1
 800200e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
        res <<= 1;   // 左移一位，为下一位做准备
 8002012:	0052      	lsls	r2, r2, #1
        res |= num & 1;   // 将原数的一位加入新数中
 8002014:	ea42 13d3 	orr.w	r3, r2, r3, lsr #7
		Sensor_Msg.Tracking_Data[Tracking_Slaver_Address-1] = reverse_bits(Sensor_Msg.Tracking_Data[Tracking_Slaver_Address-1]);
 8002018:	f881 3060 	strb.w	r3, [r1, #96]	; 0x60
	}
}
 800201c:	b004      	add	sp, #16
 800201e:	bd70      	pop	{r4, r5, r6, pc}
 8002020:	2102      	movs	r1, #2
	else									Tracking_Slaver_Address = 0x01;
 8002022:	2301      	movs	r3, #1
 8002024:	e7bb      	b.n	8001f9e <Tracking_Detection+0x12>
 8002026:	bf00      	nop
 8002028:	20000004 	.word	0x20000004
 800202c:	2000018c 	.word	0x2000018c
 8002030:	200000e8 	.word	0x200000e8

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800203a:	4a0d      	ldr	r2, [pc, #52]	; (8002070 <HAL_InitTick+0x3c>)
{
 800203c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203e:	7811      	ldrb	r1, [r2, #0]
 8002040:	4a0c      	ldr	r2, [pc, #48]	; (8002074 <HAL_InitTick+0x40>)
 8002042:	fbb3 f3f1 	udiv	r3, r3, r1
 8002046:	6812      	ldr	r2, [r2, #0]
 8002048:	fbb2 f0f3 	udiv	r0, r2, r3
 800204c:	f000 fb7e 	bl	800274c <HAL_SYSTICK_Config>
 8002050:	b908      	cbnz	r0, 8002056 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002052:	2d0f      	cmp	r5, #15
 8002054:	d901      	bls.n	800205a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002056:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002058:	bd38      	pop	{r3, r4, r5, pc}
 800205a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800205c:	4602      	mov	r2, r0
 800205e:	4629      	mov	r1, r5
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f000 fb26 	bl	80026b4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <HAL_InitTick+0x44>)
 800206a:	4620      	mov	r0, r4
 800206c:	601d      	str	r5, [r3, #0]
}
 800206e:	bd38      	pop	{r3, r4, r5, pc}
 8002070:	20000005 	.word	0x20000005
 8002074:	20000000 	.word	0x20000000
 8002078:	20000008 	.word	0x20000008

0800207c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_Init+0x20>)
{
 800207e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002080:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002082:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002084:	f043 0310 	orr.w	r3, r3, #16
 8002088:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800208a:	f000 fb01 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800208e:	2000      	movs	r0, #0
 8002090:	f7ff ffd0 	bl	8002034 <HAL_InitTick>
  HAL_MspInit();
 8002094:	f7ff fd92 	bl	8001bbc <HAL_MspInit>
}
 8002098:	2000      	movs	r0, #0
 800209a:	bd08      	pop	{r3, pc}
 800209c:	40022000 	.word	0x40022000

080020a0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80020a0:	4a03      	ldr	r2, [pc, #12]	; (80020b0 <HAL_IncTick+0x10>)
 80020a2:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_IncTick+0x14>)
 80020a4:	6811      	ldr	r1, [r2, #0]
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	440b      	add	r3, r1
 80020aa:	6013      	str	r3, [r2, #0]
}
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	200003e8 	.word	0x200003e8
 80020b4:	20000005 	.word	0x20000005

080020b8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020b8:	4b01      	ldr	r3, [pc, #4]	; (80020c0 <HAL_GetTick+0x8>)
 80020ba:	6818      	ldr	r0, [r3, #0]
}
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200003e8 	.word	0x200003e8

080020c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020c4:	b538      	push	{r3, r4, r5, lr}
 80020c6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80020c8:	f7ff fff6 	bl	80020b8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020cc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80020ce:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80020d0:	d002      	beq.n	80020d8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <HAL_Delay+0x20>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020d8:	f7ff ffee 	bl	80020b8 <HAL_GetTick>
 80020dc:	1b40      	subs	r0, r0, r5
 80020de:	42a0      	cmp	r0, r4
 80020e0:	d3fa      	bcc.n	80020d8 <HAL_Delay+0x14>
  {
  }
}
 80020e2:	bd38      	pop	{r3, r4, r5, pc}
 80020e4:	20000005 	.word	0x20000005

080020e8 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020e8:	2800      	cmp	r0, #0
 80020ea:	f000 8089 	beq.w	8002200 <HAL_ADC_Init+0x118>
{
 80020ee:	b538      	push	{r3, r4, r5, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80020f2:	4604      	mov	r4, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d06b      	beq.n	80021d0 <HAL_ADC_Init+0xe8>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	07d1      	lsls	r1, r2, #31
 80020fe:	d440      	bmi.n	8002182 <HAL_ADC_Init+0x9a>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002100:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002102:	06d2      	lsls	r2, r2, #27
 8002104:	d45e      	bmi.n	80021c4 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 8002106:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002108:	6861      	ldr	r1, [r4, #4]
 800210a:	69e0      	ldr	r0, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 800210c:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002110:	7b25      	ldrb	r5, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8002112:	f022 0202 	bic.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002116:	4301      	orrs	r1, r0
    ADC_STATE_CLR_SET(hadc->State,
 8002118:	f042 0202 	orr.w	r2, r2, #2
 800211c:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800211e:	ea41 0245 	orr.w	r2, r1, r5, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002122:	68a1      	ldr	r1, [r4, #8]
 8002124:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002128:	d058      	beq.n	80021dc <HAL_ADC_Init+0xf4>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800212a:	7d20      	ldrb	r0, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800212c:	2901      	cmp	r1, #1
 800212e:	bf0c      	ite	eq
 8002130:	f44f 7c80 	moveq.w	ip, #256	; 0x100
 8002134:	f04f 0c00 	movne.w	ip, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002138:	2801      	cmp	r0, #1
 800213a:	d06d      	beq.n	8002218 <HAL_ADC_Init+0x130>
      MODIFY_REG(hadc->Instance->CR1,
 800213c:	6858      	ldr	r0, [r3, #4]
 800213e:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8002142:	ea40 000c 	orr.w	r0, r0, ip
 8002146:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8002148:	689d      	ldr	r5, [r3, #8]
 800214a:	4844      	ldr	r0, [pc, #272]	; (800225c <HAL_ADC_Init+0x174>)
 800214c:	4028      	ands	r0, r5
 800214e:	4310      	orrs	r0, r2
 8002150:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002152:	2901      	cmp	r1, #1
 8002154:	d050      	beq.n	80021f8 <HAL_ADC_Init+0x110>
  uint32_t tmp_sqr1 = 0U;
 8002156:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8002158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 800215e:	4301      	orrs	r1, r0
 8002160:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_ADC_Init+0x178>)
 8002166:	400b      	ands	r3, r1
 8002168:	429a      	cmp	r2, r3
 800216a:	d04b      	beq.n	8002204 <HAL_ADC_Init+0x11c>
      tmp_hal_status = HAL_ERROR;
 800216c:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 800216e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002170:	f023 0312 	bic.w	r3, r3, #18
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800217c:	4303      	orrs	r3, r0
 800217e:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002180:	bd38      	pop	{r3, r4, r5, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	f022 0201 	bic.w	r2, r2, #1
 8002188:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800218a:	f7ff ff95 	bl	80020b8 <HAL_GetTick>
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800218e:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002190:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	07d2      	lsls	r2, r2, #31
 8002196:	d5b3      	bpl.n	8002100 <HAL_ADC_Init+0x18>
 8002198:	e002      	b.n	80021a0 <HAL_ADC_Init+0xb8>
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	07d1      	lsls	r1, r2, #31
 800219e:	d5af      	bpl.n	8002100 <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021a0:	f7ff ff8a 	bl	80020b8 <HAL_GetTick>
 80021a4:	1b40      	subs	r0, r0, r5
 80021a6:	2802      	cmp	r0, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021a8:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80021aa:	d9f6      	bls.n	800219a <HAL_ADC_Init+0xb2>
        if(ADC_IS_ENABLE(hadc) != RESET)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	07d0      	lsls	r0, r2, #31
 80021b0:	d5f3      	bpl.n	800219a <HAL_ADC_Init+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80021c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 80021c6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021c8:	f043 0310 	orr.w	r3, r3, #16
 80021cc:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 80021d0:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80021d2:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80021d6:	f7ff fa71 	bl	80016bc <HAL_ADC_MspInit>
 80021da:	e78d      	b.n	80020f8 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021dc:	7d20      	ldrb	r0, [r4, #20]
 80021de:	2801      	cmp	r0, #1
 80021e0:	d019      	beq.n	8002216 <HAL_ADC_Init+0x12e>
      MODIFY_REG(hadc->Instance->CR1,
 80021e2:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80021e4:	491d      	ldr	r1, [pc, #116]	; (800225c <HAL_ADC_Init+0x174>)
      MODIFY_REG(hadc->Instance->CR1,
 80021e6:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 80021ea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80021ee:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 80021f0:	6898      	ldr	r0, [r3, #8]
 80021f2:	4001      	ands	r1, r0
 80021f4:	4311      	orrs	r1, r2
 80021f6:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80021f8:	6921      	ldr	r1, [r4, #16]
 80021fa:	3901      	subs	r1, #1
 80021fc:	0508      	lsls	r0, r1, #20
 80021fe:	e7ab      	b.n	8002158 <HAL_ADC_Init+0x70>
    return HAL_ERROR;
 8002200:	2001      	movs	r0, #1
}
 8002202:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8002204:	2000      	movs	r0, #0
 8002206:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8002208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800220a:	f023 0303 	bic.w	r3, r3, #3
 800220e:	f043 0301 	orr.w	r3, r3, #1
 8002212:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002214:	bd38      	pop	{r3, r4, r5, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002216:	468c      	mov	ip, r1
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002218:	b1c5      	cbz	r5, 800224c <HAL_ADC_Init+0x164>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800221c:	f040 0020 	orr.w	r0, r0, #32
 8002220:	62a0      	str	r0, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002222:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002224:	f040 0001 	orr.w	r0, r0, #1
 8002228:	62e0      	str	r0, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 800222a:	6858      	ldr	r0, [r3, #4]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800222c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8002230:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8002234:	ea40 000c 	orr.w	r0, r0, ip
 8002238:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800223a:	689d      	ldr	r5, [r3, #8]
 800223c:	4807      	ldr	r0, [pc, #28]	; (800225c <HAL_ADC_Init+0x174>)
 800223e:	ea00 0005 	and.w	r0, r0, r5
 8002242:	ea40 0002 	orr.w	r0, r0, r2
 8002246:	6098      	str	r0, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002248:	d183      	bne.n	8002152 <HAL_ADC_Init+0x6a>
 800224a:	e7d5      	b.n	80021f8 <HAL_ADC_Init+0x110>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800224c:	69a0      	ldr	r0, [r4, #24]
 800224e:	3801      	subs	r0, #1
 8002250:	ea4c 3040 	orr.w	r0, ip, r0, lsl #13
 8002254:	f440 6c00 	orr.w	ip, r0, #2048	; 0x800
 8002258:	e7e7      	b.n	800222a <HAL_ADC_Init+0x142>
 800225a:	bf00      	nop
 800225c:	ffe1f7fd 	.word	0xffe1f7fd
 8002260:	ff1f0efe 	.word	0xff1f0efe

08002264 <HAL_ADC_PollForConversion>:
{
 8002264:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002268:	4605      	mov	r5, r0
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800226a:	2400      	movs	r4, #0
{
 800226c:	b082      	sub	sp, #8
 800226e:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002270:	9401      	str	r4, [sp, #4]
  tickstart = HAL_GetTick();
 8002272:	f7ff ff21 	bl	80020b8 <HAL_GetTick>
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002276:	682b      	ldr	r3, [r5, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	05d7      	lsls	r7, r2, #23
 800227c:	d46e      	bmi.n	800235c <HAL_ADC_PollForConversion+0xf8>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800227e:	685a      	ldr	r2, [r3, #4]
 8002280:	4607      	mov	r7, r0
 8002282:	05d1      	lsls	r1, r2, #23
 8002284:	d41a      	bmi.n	80022bc <HAL_ADC_PollForConversion+0x58>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002288:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 800228c:	d116      	bne.n	80022bc <HAL_ADC_PollForConversion+0x58>
 800228e:	1c72      	adds	r2, r6, #1
 8002290:	d16e      	bne.n	8002370 <HAL_ADC_PollForConversion+0x10c>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	0794      	lsls	r4, r2, #30
 8002296:	d5fc      	bpl.n	8002292 <HAL_ADC_PollForConversion+0x2e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002298:	f06f 0212 	mvn.w	r2, #18
 800229c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800229e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80022a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022a4:	62aa      	str	r2, [r5, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80022ac:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80022b0:	f000 808a 	beq.w	80023c8 <HAL_ADC_PollForConversion+0x164>
  return HAL_OK;
 80022b4:	2000      	movs	r0, #0
}
 80022b6:	b002      	add	sp, #8
 80022b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022bc:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_ADC_PollForConversion+0x18c>)
 80022be:	2002      	movs	r0, #2
 80022c0:	f8d3 8000 	ldr.w	r8, [r3]
 80022c4:	f001 fd68 	bl	8003d98 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80022c8:	682a      	ldr	r2, [r5, #0]
 80022ca:	494a      	ldr	r1, [pc, #296]	; (80023f4 <HAL_ADC_PollForConversion+0x190>)
 80022cc:	6914      	ldr	r4, [r2, #16]
 80022ce:	4613      	mov	r3, r2
 80022d0:	420c      	tst	r4, r1
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80022d2:	fbb8 f0f0 	udiv	r0, r8, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80022d6:	d110      	bne.n	80022fa <HAL_ADC_PollForConversion+0x96>
 80022d8:	68d4      	ldr	r4, [r2, #12]
 80022da:	f101 415c 	add.w	r1, r1, #3690987520	; 0xdc000000
 80022de:	420c      	tst	r4, r1
 80022e0:	d10b      	bne.n	80022fa <HAL_ADC_PollForConversion+0x96>
 80022e2:	6914      	ldr	r4, [r2, #16]
 80022e4:	4944      	ldr	r1, [pc, #272]	; (80023f8 <HAL_ADC_PollForConversion+0x194>)
 80022e6:	420c      	tst	r4, r1
 80022e8:	d17f      	bne.n	80023ea <HAL_ADC_PollForConversion+0x186>
 80022ea:	68d4      	ldr	r4, [r2, #12]
 80022ec:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 80022f0:	420c      	tst	r4, r1
 80022f2:	bf14      	ite	ne
 80022f4:	2429      	movne	r4, #41	; 0x29
 80022f6:	2414      	moveq	r4, #20
 80022f8:	e009      	b.n	800230e <HAL_ADC_PollForConversion+0xaa>
 80022fa:	6914      	ldr	r4, [r2, #16]
 80022fc:	493e      	ldr	r1, [pc, #248]	; (80023f8 <HAL_ADC_PollForConversion+0x194>)
 80022fe:	420c      	tst	r4, r1
 8002300:	d122      	bne.n	8002348 <HAL_ADC_PollForConversion+0xe4>
 8002302:	68d4      	ldr	r4, [r2, #12]
 8002304:	f101 416e 	add.w	r1, r1, #3992977408	; 0xee000000
 8002308:	420c      	tst	r4, r1
 800230a:	d11d      	bne.n	8002348 <HAL_ADC_PollForConversion+0xe4>
 800230c:	2454      	movs	r4, #84	; 0x54
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800230e:	fb00 f404 	mul.w	r4, r0, r4
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002312:	9901      	ldr	r1, [sp, #4]
 8002314:	428c      	cmp	r4, r1
 8002316:	d9bf      	bls.n	8002298 <HAL_ADC_PollForConversion+0x34>
 8002318:	1c71      	adds	r1, r6, #1
 800231a:	d032      	beq.n	8002382 <HAL_ADC_PollForConversion+0x11e>
 800231c:	b136      	cbz	r6, 800232c <HAL_ADC_PollForConversion+0xc8>
 800231e:	e038      	b.n	8002392 <HAL_ADC_PollForConversion+0x12e>
      Conversion_Timeout_CPU_cycles ++;
 8002320:	9b01      	ldr	r3, [sp, #4]
 8002322:	3301      	adds	r3, #1
 8002324:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002326:	9b01      	ldr	r3, [sp, #4]
 8002328:	42a3      	cmp	r3, r4
 800232a:	d230      	bcs.n	800238e <HAL_ADC_PollForConversion+0x12a>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800232c:	9b01      	ldr	r3, [sp, #4]
 800232e:	42a3      	cmp	r3, r4
 8002330:	d2f6      	bcs.n	8002320 <HAL_ADC_PollForConversion+0xbc>
            __HAL_UNLOCK(hadc);
 8002332:	2200      	movs	r2, #0
            return HAL_TIMEOUT;
 8002334:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002336:	6aab      	ldr	r3, [r5, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8002338:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	62ab      	str	r3, [r5, #40]	; 0x28
}
 8002342:	b002      	add	sp, #8
 8002344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002348:	6914      	ldr	r4, [r2, #16]
 800234a:	492c      	ldr	r1, [pc, #176]	; (80023fc <HAL_ADC_PollForConversion+0x198>)
 800234c:	420c      	tst	r4, r1
 800234e:	d131      	bne.n	80023b4 <HAL_ADC_PollForConversion+0x150>
 8002350:	68d4      	ldr	r4, [r2, #12]
 8002352:	420c      	tst	r4, r1
 8002354:	bf14      	ite	ne
 8002356:	24fc      	movne	r4, #252	; 0xfc
 8002358:	2454      	moveq	r4, #84	; 0x54
 800235a:	e7d8      	b.n	800230e <HAL_ADC_PollForConversion+0xaa>
    return HAL_ERROR;
 800235c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800235e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002360:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002364:	f043 0320 	orr.w	r3, r3, #32
 8002368:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800236a:	b002      	add	sp, #8
 800236c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	0790      	lsls	r0, r2, #30
 8002374:	d490      	bmi.n	8002298 <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002376:	b9fe      	cbnz	r6, 80023b8 <HAL_ADC_PollForConversion+0x154>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	f012 0202 	ands.w	r2, r2, #2
 800237e:	d186      	bne.n	800228e <HAL_ADC_PollForConversion+0x2a>
 8002380:	e7d8      	b.n	8002334 <HAL_ADC_PollForConversion+0xd0>
      Conversion_Timeout_CPU_cycles ++;
 8002382:	9b01      	ldr	r3, [sp, #4]
 8002384:	3301      	adds	r3, #1
 8002386:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002388:	9b01      	ldr	r3, [sp, #4]
 800238a:	429c      	cmp	r4, r3
 800238c:	d8f9      	bhi.n	8002382 <HAL_ADC_PollForConversion+0x11e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800238e:	4613      	mov	r3, r2
 8002390:	e782      	b.n	8002298 <HAL_ADC_PollForConversion+0x34>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002392:	f7ff fe91 	bl	80020b8 <HAL_GetTick>
 8002396:	1bc3      	subs	r3, r0, r7
 8002398:	429e      	cmp	r6, r3
 800239a:	d202      	bcs.n	80023a2 <HAL_ADC_PollForConversion+0x13e>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800239c:	9b01      	ldr	r3, [sp, #4]
 800239e:	429c      	cmp	r4, r3
 80023a0:	d8c7      	bhi.n	8002332 <HAL_ADC_PollForConversion+0xce>
      Conversion_Timeout_CPU_cycles ++;
 80023a2:	9b01      	ldr	r3, [sp, #4]
 80023a4:	3301      	adds	r3, #1
 80023a6:	9301      	str	r3, [sp, #4]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80023a8:	9b01      	ldr	r3, [sp, #4]
 80023aa:	429c      	cmp	r4, r3
 80023ac:	d8f1      	bhi.n	8002392 <HAL_ADC_PollForConversion+0x12e>
 80023ae:	682a      	ldr	r2, [r5, #0]
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023b0:	4613      	mov	r3, r2
 80023b2:	e771      	b.n	8002298 <HAL_ADC_PollForConversion+0x34>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80023b4:	24fc      	movs	r4, #252	; 0xfc
 80023b6:	e7aa      	b.n	800230e <HAL_ADC_PollForConversion+0xaa>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023b8:	f7ff fe7e 	bl	80020b8 <HAL_GetTick>
 80023bc:	1bc3      	subs	r3, r0, r7
 80023be:	42b3      	cmp	r3, r6
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80023c0:	682b      	ldr	r3, [r5, #0]
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80023c2:	f67f af64 	bls.w	800228e <HAL_ADC_PollForConversion+0x2a>
 80023c6:	e7d7      	b.n	8002378 <HAL_ADC_PollForConversion+0x114>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80023c8:	7b28      	ldrb	r0, [r5, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80023ca:	2800      	cmp	r0, #0
 80023cc:	f47f af72 	bne.w	80022b4 <HAL_ADC_PollForConversion+0x50>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023d6:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023da:	04db      	lsls	r3, r3, #19
 80023dc:	f53f af6a 	bmi.w	80022b4 <HAL_ADC_PollForConversion+0x50>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023e0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	62ab      	str	r3, [r5, #40]	; 0x28
 80023e8:	e765      	b.n	80022b6 <HAL_ADC_PollForConversion+0x52>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80023ea:	2429      	movs	r4, #41	; 0x29
 80023ec:	e78f      	b.n	800230e <HAL_ADC_PollForConversion+0xaa>
 80023ee:	bf00      	nop
 80023f0:	20000000 	.word	0x20000000
 80023f4:	24924924 	.word	0x24924924
 80023f8:	12492492 	.word	0x12492492
 80023fc:	00249249 	.word	0x00249249

08002400 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8002400:	6803      	ldr	r3, [r0, #0]
 8002402:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop

08002408 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 8002408:	2300      	movs	r3, #0
{ 
 800240a:	b530      	push	{r4, r5, lr}
 800240c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 800240e:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002410:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8002414:	2b01      	cmp	r3, #1
 8002416:	d074      	beq.n	8002502 <HAL_ADC_ConfigChannel+0xfa>
 8002418:	2301      	movs	r3, #1
 800241a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 800241e:	684b      	ldr	r3, [r1, #4]
 8002420:	4602      	mov	r2, r0
 8002422:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002424:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7U)
 8002426:	d932      	bls.n	800248e <HAL_ADC_ConfigChannel+0x86>
  else if (sConfig->Rank < 13U)
 8002428:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800242a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 800242e:	d84e      	bhi.n	80024ce <HAL_ADC_ConfigChannel+0xc6>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002430:	f04f 0c1f 	mov.w	ip, #31
 8002434:	6808      	ldr	r0, [r1, #0]
 8002436:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8002438:	3b23      	subs	r3, #35	; 0x23
 800243a:	fa00 fe03 	lsl.w	lr, r0, r3
 800243e:	fa0c f303 	lsl.w	r3, ip, r3
 8002442:	ea25 0303 	bic.w	r3, r5, r3
 8002446:	ea43 030e 	orr.w	r3, r3, lr
 800244a:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800244c:	2809      	cmp	r0, #9
 800244e:	d930      	bls.n	80024b2 <HAL_ADC_ConfigChannel+0xaa>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002450:	f04f 0c07 	mov.w	ip, #7
 8002454:	688d      	ldr	r5, [r1, #8]
 8002456:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800245a:	68e3      	ldr	r3, [r4, #12]
 800245c:	391e      	subs	r1, #30
 800245e:	408d      	lsls	r5, r1
 8002460:	fa0c f101 	lsl.w	r1, ip, r1
 8002464:	ea23 0301 	bic.w	r3, r3, r1
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002468:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800246c:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800246e:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002470:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002472:	d844      	bhi.n	80024fe <HAL_ADC_ConfigChannel+0xf6>
    if (hadc->Instance == ADC1)
 8002474:	4b2e      	ldr	r3, [pc, #184]	; (8002530 <HAL_ADC_ConfigChannel+0x128>)
 8002476:	429c      	cmp	r4, r3
 8002478:	d038      	beq.n	80024ec <HAL_ADC_ConfigChannel+0xe4>
      tmp_hal_status = HAL_ERROR;
 800247a:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800247c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800247e:	f043 0320 	orr.w	r3, r3, #32
 8002482:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8002484:	2300      	movs	r3, #0
 8002486:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 800248a:	b003      	add	sp, #12
 800248c:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800248e:	f04f 0c1f 	mov.w	ip, #31
 8002492:	6808      	ldr	r0, [r1, #0]
 8002494:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002498:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800249a:	3b05      	subs	r3, #5
 800249c:	fa00 fe03 	lsl.w	lr, r0, r3
 80024a0:	fa0c f303 	lsl.w	r3, ip, r3
 80024a4:	ea25 0303 	bic.w	r3, r5, r3
 80024a8:	ea43 030e 	orr.w	r3, r3, lr
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024ac:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024ae:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024b0:	d8ce      	bhi.n	8002450 <HAL_ADC_ConfigChannel+0x48>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024b2:	2507      	movs	r5, #7
 80024b4:	6889      	ldr	r1, [r1, #8]
 80024b6:	6923      	ldr	r3, [r4, #16]
 80024b8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80024bc:	4081      	lsls	r1, r0
 80024be:	fa05 f000 	lsl.w	r0, r5, r0
 80024c2:	ea23 0300 	bic.w	r3, r3, r0
 80024c6:	430b      	orrs	r3, r1
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c8:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80024ca:	6123      	str	r3, [r4, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80024cc:	e7da      	b.n	8002484 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024ce:	f04f 0c1f 	mov.w	ip, #31
 80024d2:	6808      	ldr	r0, [r1, #0]
 80024d4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80024d6:	3b41      	subs	r3, #65	; 0x41
 80024d8:	fa00 fe03 	lsl.w	lr, r0, r3
 80024dc:	fa0c f303 	lsl.w	r3, ip, r3
 80024e0:	ea25 0303 	bic.w	r3, r5, r3
 80024e4:	ea43 030e 	orr.w	r3, r3, lr
 80024e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80024ea:	e7af      	b.n	800244c <HAL_ADC_ConfigChannel+0x44>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80024ec:	68a3      	ldr	r3, [r4, #8]
 80024ee:	021b      	lsls	r3, r3, #8
 80024f0:	d405      	bmi.n	80024fe <HAL_ADC_ConfigChannel+0xf6>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024f2:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024f4:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80024f6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024fa:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024fc:	d004      	beq.n	8002508 <HAL_ADC_ConfigChannel+0x100>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024fe:	2000      	movs	r0, #0
 8002500:	e7c0      	b.n	8002484 <HAL_ADC_ConfigChannel+0x7c>
  __HAL_LOCK(hadc);
 8002502:	2002      	movs	r0, #2
}
 8002504:	b003      	add	sp, #12
 8002506:	bd30      	pop	{r4, r5, pc}
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <HAL_ADC_ConfigChannel+0x12c>)
 800250a:	490b      	ldr	r1, [pc, #44]	; (8002538 <HAL_ADC_ConfigChannel+0x130>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	fba1 1303 	umull	r1, r3, r1, r3
 8002512:	0c9b      	lsrs	r3, r3, #18
 8002514:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800251c:	9b01      	ldr	r3, [sp, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0ed      	beq.n	80024fe <HAL_ADC_ConfigChannel+0xf6>
            wait_loop_index--;
 8002522:	9b01      	ldr	r3, [sp, #4]
 8002524:	3b01      	subs	r3, #1
 8002526:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002528:	9b01      	ldr	r3, [sp, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f9      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x11a>
 800252e:	e7e6      	b.n	80024fe <HAL_ADC_ConfigChannel+0xf6>
 8002530:	40012400 	.word	0x40012400
 8002534:	20000000 	.word	0x20000000
 8002538:	431bde83 	.word	0x431bde83

0800253c <ADC_Enable>:
  __IO uint32_t wait_loop_index = 0U;
 800253c:	2300      	movs	r3, #0
{
 800253e:	b530      	push	{r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002540:	6802      	ldr	r2, [r0, #0]
{
 8002542:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002544:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002546:	6893      	ldr	r3, [r2, #8]
 8002548:	07d9      	lsls	r1, r3, #31
 800254a:	d427      	bmi.n	800259c <ADC_Enable+0x60>
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <ADC_Enable+0x80>)
 800254e:	4604      	mov	r4, r0
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	481b      	ldr	r0, [pc, #108]	; (80025c0 <ADC_Enable+0x84>)
    __HAL_ADC_ENABLE(hadc);
 8002554:	6891      	ldr	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002556:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 800255a:	f041 0101 	orr.w	r1, r1, #1
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800255e:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8002560:	6091      	str	r1, [r2, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002562:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8002564:	9b01      	ldr	r3, [sp, #4]
 8002566:	b12b      	cbz	r3, 8002574 <ADC_Enable+0x38>
      wait_loop_index--;
 8002568:	9b01      	ldr	r3, [sp, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800256e:	9b01      	ldr	r3, [sp, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f9      	bne.n	8002568 <ADC_Enable+0x2c>
    tickstart = HAL_GetTick();
 8002574:	f7ff fda0 	bl	80020b8 <HAL_GetTick>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002578:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800257a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	07da      	lsls	r2, r3, #31
 8002580:	d40c      	bmi.n	800259c <ADC_Enable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002582:	f7ff fd99 	bl	80020b8 <HAL_GetTick>
 8002586:	1b43      	subs	r3, r0, r5
 8002588:	2b02      	cmp	r3, #2
        if(ADC_IS_ENABLE(hadc) == RESET)
 800258a:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800258c:	d903      	bls.n	8002596 <ADC_Enable+0x5a>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800258e:	689a      	ldr	r2, [r3, #8]
 8002590:	f012 0201 	ands.w	r2, r2, #1
 8002594:	d005      	beq.n	80025a2 <ADC_Enable+0x66>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	07db      	lsls	r3, r3, #31
 800259a:	d5f2      	bpl.n	8002582 <ADC_Enable+0x46>
  return HAL_OK;
 800259c:	2000      	movs	r0, #0
}
 800259e:	b003      	add	sp, #12
 80025a0:	bd30      	pop	{r4, r5, pc}
          __HAL_UNLOCK(hadc);
 80025a2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 80025a6:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80025b2:	4303      	orrs	r3, r0
 80025b4:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80025b6:	b003      	add	sp, #12
 80025b8:	bd30      	pop	{r4, r5, pc}
 80025ba:	bf00      	nop
 80025bc:	20000000 	.word	0x20000000
 80025c0:	431bde83 	.word	0x431bde83

080025c4 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 80025c4:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d038      	beq.n	800263e <HAL_ADC_Start+0x7a>
 80025cc:	2301      	movs	r3, #1
{
 80025ce:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80025d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80025d4:	4604      	mov	r4, r0
 80025d6:	f7ff ffb1 	bl	800253c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80025da:	bb60      	cbnz	r0, 8002636 <HAL_ADC_Start+0x72>
    ADC_STATE_CLR_SET(hadc->State,
 80025dc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025de:	6822      	ldr	r2, [r4, #0]
 80025e0:	4929      	ldr	r1, [pc, #164]	; (8002688 <HAL_ADC_Start+0xc4>)
    ADC_STATE_CLR_SET(hadc->State,
 80025e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025e6:	f023 0301 	bic.w	r3, r3, #1
 80025ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025ee:	428a      	cmp	r2, r1
    ADC_STATE_CLR_SET(hadc->State,
 80025f0:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025f2:	d026      	beq.n	8002642 <HAL_ADC_Start+0x7e>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80025f6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80025fa:	62a3      	str	r3, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025fc:	6853      	ldr	r3, [r2, #4]
 80025fe:	0559      	lsls	r1, r3, #21
 8002600:	d42b      	bmi.n	800265a <HAL_ADC_Start+0x96>
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 8002604:	2100      	movs	r1, #0
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002606:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800260a:	bf18      	it	ne
 800260c:	6ae3      	ldrne	r3, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 800260e:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002612:	bf18      	it	ne
 8002614:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002618:	62e3      	str	r3, [r4, #44]	; 0x2c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800261a:	f06f 0302 	mvn.w	r3, #2
 800261e:	6013      	str	r3, [r2, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002620:	6893      	ldr	r3, [r2, #8]
 8002622:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002626:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800262a:	d01d      	beq.n	8002668 <HAL_ADC_Start+0xa4>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800262c:	6893      	ldr	r3, [r2, #8]
 800262e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002632:	6093      	str	r3, [r2, #8]
}
 8002634:	bd10      	pop	{r4, pc}
    __HAL_UNLOCK(hadc);
 8002636:	2300      	movs	r3, #0
 8002638:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 800263c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800263e:	2002      	movs	r0, #2
}
 8002640:	4770      	bx	lr
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002642:	4b12      	ldr	r3, [pc, #72]	; (800268c <HAL_ADC_Start+0xc8>)
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	f411 2f70 	tst.w	r1, #983040	; 0xf0000
 800264a:	d0d3      	beq.n	80025f4 <HAL_ADC_Start+0x30>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800264c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800264e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002652:	62a1      	str	r1, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	055b      	lsls	r3, r3, #21
 8002658:	d5d3      	bpl.n	8002602 <HAL_ADC_Start+0x3e>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800265a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800265c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002660:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002664:	62a3      	str	r3, [r4, #40]	; 0x28
 8002666:	e7cc      	b.n	8002602 <HAL_ADC_Start+0x3e>
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002668:	4b07      	ldr	r3, [pc, #28]	; (8002688 <HAL_ADC_Start+0xc4>)
 800266a:	429a      	cmp	r2, r3
 800266c:	d004      	beq.n	8002678 <HAL_ADC_Start+0xb4>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800266e:	6893      	ldr	r3, [r2, #8]
 8002670:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 8002674:	6093      	str	r3, [r2, #8]
}
 8002676:	bd10      	pop	{r4, pc}
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002678:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800267c:	685b      	ldr	r3, [r3, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800267e:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
 8002682:	d1d3      	bne.n	800262c <HAL_ADC_Start+0x68>
 8002684:	e7f3      	b.n	800266e <HAL_ADC_Start+0xaa>
 8002686:	bf00      	nop
 8002688:	40012800 	.word	0x40012800
 800268c:	40012400 	.word	0x40012400

08002690 <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002690:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4906      	ldr	r1, [pc, #24]	; (80026b0 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002696:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002698:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800269a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269e:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80026ac:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80026ae:	4770      	bx	lr
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026b4:	4b1c      	ldr	r3, [pc, #112]	; (8002728 <HAL_NVIC_SetPriority+0x74>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b6:	b500      	push	{lr}
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026be:	f1c3 0e07 	rsb	lr, r3, #7
 80026c2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026ca:	bf28      	it	cs
 80026cc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026d0:	f1bc 0f06 	cmp.w	ip, #6
 80026d4:	d91b      	bls.n	800270e <HAL_NVIC_SetPriority+0x5a>

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026d6:	f04f 3cff 	mov.w	ip, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026dc:	fa0c fc03 	lsl.w	ip, ip, r3
 80026e0:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026e4:	f04f 3cff 	mov.w	ip, #4294967295
 80026e8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80026ec:	ea21 010c 	bic.w	r1, r1, ip
 80026f0:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80026f2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80026f8:	db0c      	blt.n	8002714 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fa:	0109      	lsls	r1, r1, #4
 80026fc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8002700:	b2c9      	uxtb	r1, r1
 8002702:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002706:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800270a:	f85d fb04 	ldr.w	pc, [sp], #4
 800270e:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002710:	4613      	mov	r3, r2
 8002712:	e7e7      	b.n	80026e4 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_NVIC_SetPriority+0x78>)
 8002716:	f000 000f 	and.w	r0, r0, #15
 800271a:	0109      	lsls	r1, r1, #4
 800271c:	b2c9      	uxtb	r1, r1
 800271e:	4403      	add	r3, r0
 8002720:	7619      	strb	r1, [r3, #24]
 8002722:	f85d fb04 	ldr.w	pc, [sp], #4
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00
 800272c:	e000ecfc 	.word	0xe000ecfc

08002730 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002730:	2800      	cmp	r0, #0
 8002732:	db07      	blt.n	8002744 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002734:	2301      	movs	r3, #1
 8002736:	f000 011f 	and.w	r1, r0, #31
 800273a:	4a03      	ldr	r2, [pc, #12]	; (8002748 <HAL_NVIC_EnableIRQ+0x18>)
 800273c:	0940      	lsrs	r0, r0, #5
 800273e:	408b      	lsls	r3, r1
 8002740:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	e000e100 	.word	0xe000e100

0800274c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800274c:	3801      	subs	r0, #1
 800274e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002752:	d20f      	bcs.n	8002774 <HAL_SYSTICK_Config+0x28>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002754:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002758:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800275c:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800275e:	2107      	movs	r1, #7
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002760:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002762:	4c05      	ldr	r4, [pc, #20]	; (8002778 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002764:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002766:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800276a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800276c:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 800276e:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002770:	6119      	str	r1, [r3, #16]
 8002772:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002774:	2001      	movs	r0, #1
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800277c:	b180      	cbz	r0, 80027a0 <HAL_CRC_Init+0x24>
{
 800277e:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002780:	7943      	ldrb	r3, [r0, #5]
 8002782:	4604      	mov	r4, r0
 8002784:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002788:	b11b      	cbz	r3, 8002792 <HAL_CRC_Init+0x16>
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800278a:	2301      	movs	r3, #1
 800278c:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 800278e:	2000      	movs	r0, #0
}
 8002790:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
 8002792:	7102      	strb	r2, [r0, #4]
    HAL_CRC_MspInit(hcrc);
 8002794:	f7fe ffd4 	bl	8001740 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_READY;
 8002798:	2301      	movs	r3, #1
 800279a:	7163      	strb	r3, [r4, #5]
  return HAL_OK;
 800279c:	2000      	movs	r0, #0
}
 800279e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027a0:	2001      	movs	r0, #1
}
 80027a2:	4770      	bx	lr

080027a4 <HAL_CRC_Calculate>:
{
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80027a4:	2302      	movs	r3, #2
{
 80027a6:	b410      	push	{r4}

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80027a8:	6804      	ldr	r4, [r0, #0]
  hcrc->State = HAL_CRC_STATE_BUSY;
 80027aa:	7143      	strb	r3, [r0, #5]
  __HAL_CRC_DR_RESET(hcrc);
 80027ac:	68a3      	ldr	r3, [r4, #8]
{
 80027ae:	4684      	mov	ip, r0
  __HAL_CRC_DR_RESET(hcrc);
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	60a3      	str	r3, [r4, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80027b6:	b13a      	cbz	r2, 80027c8 <HAL_CRC_Calculate+0x24>
 80027b8:	3904      	subs	r1, #4
 80027ba:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  {
    hcrc->Instance->DR = pBuffer[index];
 80027be:	f851 3f04 	ldr.w	r3, [r1, #4]!
  for (index = 0U; index < BufferLength; index++)
 80027c2:	4291      	cmp	r1, r2
    hcrc->Instance->DR = pBuffer[index];
 80027c4:	6023      	str	r3, [r4, #0]
  for (index = 0U; index < BufferLength; index++)
 80027c6:	d1fa      	bne.n	80027be <HAL_CRC_Calculate+0x1a>
  }
  temp = hcrc->Instance->DR;

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80027c8:	2301      	movs	r3, #1
  temp = hcrc->Instance->DR;
 80027ca:	6820      	ldr	r0, [r4, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 80027cc:	f88c 3005 	strb.w	r3, [ip, #5]

  /* Return the CRC computed value */
  return temp;
}
 80027d0:	bc10      	pop	{r4}
 80027d2:	4770      	bx	lr

080027d4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80027d4:	b340      	cbz	r0, 8002828 <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027d6:	4603      	mov	r3, r0
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027d8:	c805      	ldmia	r0, {r0, r2}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80027da:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 80027de:	b430      	push	{r4, r5}
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e0:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 80027e2:	6899      	ldr	r1, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e4:	68dd      	ldr	r5, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027e6:	430a      	orrs	r2, r1
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027e8:	4910      	ldr	r1, [pc, #64]	; (800282c <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ea:	432a      	orrs	r2, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027ec:	4d10      	ldr	r5, [pc, #64]	; (8002830 <HAL_DMA_Init+0x5c>)
 80027ee:	4401      	add	r1, r0
 80027f0:	fba5 5101 	umull	r5, r1, r5, r1
 80027f4:	0909      	lsrs	r1, r1, #4
 80027f6:	0089      	lsls	r1, r1, #2
 80027f8:	6419      	str	r1, [r3, #64]	; 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fa:	6919      	ldr	r1, [r3, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fc:	699d      	ldr	r5, [r3, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fe:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002800:	6959      	ldr	r1, [r3, #20]
 8002802:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CCR;
 8002804:	6801      	ldr	r1, [r0, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002806:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8002808:	69dd      	ldr	r5, [r3, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800280a:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 800280e:	f021 0130 	bic.w	r1, r1, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8002812:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Direction        |
 8002814:	430a      	orrs	r2, r1
  hdma->DmaBaseAddress = DMA1;
 8002816:	4907      	ldr	r1, [pc, #28]	; (8002834 <HAL_DMA_Init+0x60>)
 8002818:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 800281a:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 800281c:	f8a3 c020 	strh.w	ip, [r3, #32]

  return HAL_OK;
 8002820:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002822:	639c      	str	r4, [r3, #56]	; 0x38
}
 8002824:	bc30      	pop	{r4, r5}
 8002826:	4770      	bx	lr
    return HAL_ERROR;
 8002828:	2001      	movs	r0, #1
}
 800282a:	4770      	bx	lr
 800282c:	bffdfff8 	.word	0xbffdfff8
 8002830:	cccccccd 	.word	0xcccccccd
 8002834:	40020000 	.word	0x40020000

08002838 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002838:	4684      	mov	ip, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800283a:	f890 0020 	ldrb.w	r0, [r0, #32]
 800283e:	2801      	cmp	r0, #1
 8002840:	d03f      	beq.n	80028c2 <HAL_DMA_Start_IT+0x8a>
{
 8002842:	b430      	push	{r4, r5}
  __HAL_LOCK(hdma);
 8002844:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002846:	f89c 0021 	ldrb.w	r0, [ip, #33]	; 0x21
  __HAL_LOCK(hdma);
 800284a:	f88c 4020 	strb.w	r4, [ip, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800284e:	42a0      	cmp	r0, r4
 8002850:	d005      	beq.n	800285e <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002852:	2300      	movs	r3, #0
 8002854:	f88c 3020 	strb.w	r3, [ip, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002858:	2002      	movs	r0, #2
  }    
  return status;
}
 800285a:	bc30      	pop	{r4, r5}
 800285c:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800285e:	2402      	movs	r4, #2
 8002860:	f88c 4021 	strb.w	r4, [ip, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002864:	2400      	movs	r4, #0
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002866:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800286a:	f8cc 4038 	str.w	r4, [ip, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 800286e:	f8dc 4000 	ldr.w	r4, [ip]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002872:	40a8      	lsls	r0, r5
    __HAL_DMA_DISABLE(hdma);
 8002874:	6825      	ldr	r5, [r4, #0]
 8002876:	f025 0501 	bic.w	r5, r5, #1
 800287a:	6025      	str	r5, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800287c:	f8dc 503c 	ldr.w	r5, [ip, #60]	; 0x3c
 8002880:	6068      	str	r0, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002882:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002884:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8002888:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 800288a:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800288e:	bf0b      	itete	eq
 8002890:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002892:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8002894:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002896:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8002898:	b153      	cbz	r3, 80028b0 <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800289a:	6823      	ldr	r3, [r4, #0]
 800289c:	f043 030e 	orr.w	r3, r3, #14
 80028a0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80028a2:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6023      	str	r3, [r4, #0]
}
 80028ac:	bc30      	pop	{r4, r5}
 80028ae:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028b0:	6823      	ldr	r3, [r4, #0]
 80028b2:	f023 0304 	bic.w	r3, r3, #4
 80028b6:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028b8:	6823      	ldr	r3, [r4, #0]
 80028ba:	f043 030a 	orr.w	r3, r3, #10
 80028be:	6023      	str	r3, [r4, #0]
 80028c0:	e7ef      	b.n	80028a2 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 80028c2:	2002      	movs	r0, #2
}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028c8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 80028cc:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ce:	2a02      	cmp	r2, #2
 80028d0:	d006      	beq.n	80028e0 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d2:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 80028d4:	2200      	movs	r2, #0
    return HAL_ERROR;
 80028d6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028d8:	6399      	str	r1, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80028da:	f883 2020 	strb.w	r2, [r3, #32]
}
 80028de:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028e0:	2101      	movs	r1, #1
  __HAL_UNLOCK(hdma);      
 80028e2:	f44f 7c80 	mov.w	ip, #256	; 0x100
{
 80028e6:	b410      	push	{r4}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028e8:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028ea:	6c1c      	ldr	r4, [r3, #64]	; 0x40
  return status; 
 80028ec:	2000      	movs	r0, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028ee:	40a1      	lsls	r1, r4
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028f0:	6814      	ldr	r4, [r2, #0]
 80028f2:	f024 040e 	bic.w	r4, r4, #14
 80028f6:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80028f8:	6814      	ldr	r4, [r2, #0]
 80028fa:	f024 0401 	bic.w	r4, r4, #1
 80028fe:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002900:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002902:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 8002904:	f8a3 c020 	strh.w	ip, [r3, #32]
}
 8002908:	bc10      	pop	{r4}
 800290a:	4770      	bx	lr

0800290c <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800290c:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{  
 8002910:	4603      	mov	r3, r0
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002912:	2a02      	cmp	r2, #2
 8002914:	d003      	beq.n	800291e <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002916:	2204      	movs	r2, #4
    status = HAL_ERROR;
 8002918:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800291a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800291c:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800291e:	6802      	ldr	r2, [r0, #0]
{  
 8002920:	b510      	push	{r4, lr}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002922:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002924:	481b      	ldr	r0, [pc, #108]	; (8002994 <HAL_DMA_Abort_IT+0x88>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002926:	f021 010e 	bic.w	r1, r1, #14
 800292a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800292c:	6811      	ldr	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800292e:	4282      	cmp	r2, r0
    __HAL_DMA_DISABLE(hdma);
 8002930:	f021 0101 	bic.w	r1, r1, #1
 8002934:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002936:	d021      	beq.n	800297c <HAL_DMA_Abort_IT+0x70>
 8002938:	4917      	ldr	r1, [pc, #92]	; (8002998 <HAL_DMA_Abort_IT+0x8c>)
 800293a:	428a      	cmp	r2, r1
 800293c:	d01a      	beq.n	8002974 <HAL_DMA_Abort_IT+0x68>
 800293e:	3114      	adds	r1, #20
 8002940:	428a      	cmp	r2, r1
 8002942:	d01d      	beq.n	8002980 <HAL_DMA_Abort_IT+0x74>
 8002944:	3114      	adds	r1, #20
 8002946:	428a      	cmp	r2, r1
 8002948:	d01d      	beq.n	8002986 <HAL_DMA_Abort_IT+0x7a>
 800294a:	3114      	adds	r1, #20
 800294c:	428a      	cmp	r2, r1
 800294e:	d01d      	beq.n	800298c <HAL_DMA_Abort_IT+0x80>
 8002950:	3114      	adds	r1, #20
 8002952:	428a      	cmp	r2, r1
 8002954:	bf0c      	ite	eq
 8002956:	f44f 1280 	moveq.w	r2, #1048576	; 0x100000
 800295a:	f04f 7280 	movne.w	r2, #16777216	; 0x1000000
    __HAL_UNLOCK(hdma);
 800295e:	f44f 7080 	mov.w	r0, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002962:	4c0e      	ldr	r4, [pc, #56]	; (800299c <HAL_DMA_Abort_IT+0x90>)
    if(hdma->XferAbortCallback != NULL)
 8002964:	6b59      	ldr	r1, [r3, #52]	; 0x34
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002966:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002968:	8418      	strh	r0, [r3, #32]
    if(hdma->XferAbortCallback != NULL)
 800296a:	b129      	cbz	r1, 8002978 <HAL_DMA_Abort_IT+0x6c>
      hdma->XferAbortCallback(hdma);
 800296c:	4618      	mov	r0, r3
 800296e:	4788      	blx	r1
  HAL_StatusTypeDef status = HAL_OK;
 8002970:	2000      	movs	r0, #0
}
 8002972:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002974:	2210      	movs	r2, #16
 8002976:	e7f2      	b.n	800295e <HAL_DMA_Abort_IT+0x52>
  HAL_StatusTypeDef status = HAL_OK;
 8002978:	4608      	mov	r0, r1
}
 800297a:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800297c:	2201      	movs	r2, #1
 800297e:	e7ee      	b.n	800295e <HAL_DMA_Abort_IT+0x52>
 8002980:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002984:	e7eb      	b.n	800295e <HAL_DMA_Abort_IT+0x52>
 8002986:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800298a:	e7e8      	b.n	800295e <HAL_DMA_Abort_IT+0x52>
 800298c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002990:	e7e5      	b.n	800295e <HAL_DMA_Abort_IT+0x52>
 8002992:	bf00      	nop
 8002994:	40020008 	.word	0x40020008
 8002998:	4002001c 	.word	0x4002001c
 800299c:	40020000 	.word	0x40020000

080029a0 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029a0:	2204      	movs	r2, #4
{
 80029a2:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029a4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029a6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029a8:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029aa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029ac:	408a      	lsls	r2, r1
 80029ae:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 80029b0:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80029b2:	d01f      	beq.n	80029f4 <HAL_DMA_IRQHandler+0x54>
 80029b4:	076a      	lsls	r2, r5, #29
 80029b6:	d51d      	bpl.n	80029f4 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	0691      	lsls	r1, r2, #26
 80029bc:	d403      	bmi.n	80029c6 <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f022 0204 	bic.w	r2, r2, #4
 80029c4:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80029c6:	4a3e      	ldr	r2, [pc, #248]	; (8002ac0 <HAL_DMA_IRQHandler+0x120>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d050      	beq.n	8002a6e <HAL_DMA_IRQHandler+0xce>
 80029cc:	3214      	adds	r2, #20
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d060      	beq.n	8002a94 <HAL_DMA_IRQHandler+0xf4>
 80029d2:	3214      	adds	r2, #20
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d067      	beq.n	8002aa8 <HAL_DMA_IRQHandler+0x108>
 80029d8:	3214      	adds	r2, #20
 80029da:	4293      	cmp	r3, r2
 80029dc:	d06a      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x114>
 80029de:	3214      	adds	r2, #20
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d05c      	beq.n	8002a9e <HAL_DMA_IRQHandler+0xfe>
 80029e4:	3214      	adds	r2, #20
 80029e6:	4293      	cmp	r3, r2
 80029e8:	bf0c      	ite	eq
 80029ea:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80029ee:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80029f2:	e03d      	b.n	8002a70 <HAL_DMA_IRQHandler+0xd0>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80029f4:	2202      	movs	r2, #2
 80029f6:	408a      	lsls	r2, r1
 80029f8:	4222      	tst	r2, r4
 80029fa:	d022      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xa2>
 80029fc:	07aa      	lsls	r2, r5, #30
 80029fe:	d520      	bpl.n	8002a42 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	0691      	lsls	r1, r2, #26
 8002a04:	d406      	bmi.n	8002a14 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 8002a06:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	f022 020a 	bic.w	r2, r2, #10
 8002a0e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002a10:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a14:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <HAL_DMA_IRQHandler+0x120>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d031      	beq.n	8002a7e <HAL_DMA_IRQHandler+0xde>
 8002a1a:	3214      	adds	r2, #20
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d041      	beq.n	8002aa4 <HAL_DMA_IRQHandler+0x104>
 8002a20:	3214      	adds	r2, #20
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d043      	beq.n	8002aae <HAL_DMA_IRQHandler+0x10e>
 8002a26:	3214      	adds	r2, #20
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d035      	beq.n	8002a98 <HAL_DMA_IRQHandler+0xf8>
 8002a2c:	3214      	adds	r2, #20
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d043      	beq.n	8002aba <HAL_DMA_IRQHandler+0x11a>
 8002a32:	3214      	adds	r2, #20
 8002a34:	4293      	cmp	r3, r2
 8002a36:	bf0c      	ite	eq
 8002a38:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 8002a3c:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 8002a40:	e01e      	b.n	8002a80 <HAL_DMA_IRQHandler+0xe0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002a42:	2208      	movs	r2, #8
 8002a44:	408a      	lsls	r2, r1
 8002a46:	4222      	tst	r2, r4
 8002a48:	d017      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xda>
 8002a4a:	072a      	lsls	r2, r5, #28
 8002a4c:	d515      	bpl.n	8002a7a <HAL_DMA_IRQHandler+0xda>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a4e:	681a      	ldr	r2, [r3, #0]
    __HAL_UNLOCK(hdma);
 8002a50:	f44f 7480 	mov.w	r4, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a54:	f022 020e 	bic.w	r2, r2, #14
 8002a58:	601a      	str	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a5a:	2301      	movs	r3, #1
    if (hdma->XferErrorCallback != NULL)
 8002a5c:	6b02      	ldr	r2, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002a5e:	fa03 f101 	lsl.w	r1, r3, r1
 8002a62:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a64:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002a66:	8404      	strh	r4, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8002a68:	b13a      	cbz	r2, 8002a7a <HAL_DMA_IRQHandler+0xda>
}
 8002a6a:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002a6c:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a6e:	2304      	movs	r3, #4
 8002a70:	4914      	ldr	r1, [pc, #80]	; (8002ac4 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 8002a72:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a74:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002a76:	2a00      	cmp	r2, #0
 8002a78:	d1f7      	bne.n	8002a6a <HAL_DMA_IRQHandler+0xca>
}
 8002a7a:	bc70      	pop	{r4, r5, r6}
 8002a7c:	4770      	bx	lr
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a7e:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8002a80:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a82:	4c10      	ldr	r4, [pc, #64]	; (8002ac4 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 8002a84:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a86:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 8002a88:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	d0f4      	beq.n	8002a7a <HAL_DMA_IRQHandler+0xda>
}
 8002a90:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8002a92:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a94:	2340      	movs	r3, #64	; 0x40
 8002a96:	e7eb      	b.n	8002a70 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a9c:	e7f0      	b.n	8002a80 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002a9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002aa2:	e7e5      	b.n	8002a70 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	e7eb      	b.n	8002a80 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aac:	e7e0      	b.n	8002a70 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002aae:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab2:	e7e5      	b.n	8002a80 <HAL_DMA_IRQHandler+0xe0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002ab4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ab8:	e7da      	b.n	8002a70 <HAL_DMA_IRQHandler+0xd0>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002abe:	e7df      	b.n	8002a80 <HAL_DMA_IRQHandler+0xe0>
 8002ac0:	40020008 	.word	0x40020008
 8002ac4:	40020000 	.word	0x40020000

08002ac8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002acc:	680e      	ldr	r6, [r1, #0]
{
 8002ace:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ad0:	2e00      	cmp	r6, #0
 8002ad2:	f000 80b5 	beq.w	8002c40 <HAL_GPIO_Init+0x178>
 8002ad6:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002ad8:	4f7a      	ldr	r7, [pc, #488]	; (8002cc4 <HAL_GPIO_Init+0x1fc>)
  uint32_t config = 0x00u;
 8002ada:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8002adc:	4613      	mov	r3, r2
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ade:	4d7a      	ldr	r5, [pc, #488]	; (8002cc8 <HAL_GPIO_Init+0x200>)
      switch (GPIO_Init->Mode)
 8002ae0:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8002ccc <HAL_GPIO_Init+0x204>
 8002ae4:	e006      	b.n	8002af4 <HAL_GPIO_Init+0x2c>
        }
      }
    }

	position++;
 8002ae6:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae8:	fa36 f403 	lsrs.w	r4, r6, r3
 8002aec:	f102 0204 	add.w	r2, r2, #4
 8002af0:	f000 80a6 	beq.w	8002c40 <HAL_GPIO_Init+0x178>
    ioposition = (0x01uL << position);
 8002af4:	2401      	movs	r4, #1
 8002af6:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8002af8:	ea34 0e06 	bics.w	lr, r4, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002afc:	ea04 0c06 	and.w	ip, r4, r6
    if (iocurrent == ioposition)
 8002b00:	d1f1      	bne.n	8002ae6 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8002b02:	684e      	ldr	r6, [r1, #4]
 8002b04:	2e12      	cmp	r6, #18
 8002b06:	f200 809e 	bhi.w	8002c46 <HAL_GPIO_Init+0x17e>
 8002b0a:	2e12      	cmp	r6, #18
 8002b0c:	d81a      	bhi.n	8002b44 <HAL_GPIO_Init+0x7c>
 8002b0e:	e8df f006 	tbb	[pc, r6]
 8002b12:	b9a7      	.short	0xb9a7
 8002b14:	1919ceb5 	.word	0x1919ceb5
 8002b18:	19191919 	.word	0x19191919
 8002b1c:	19191919 	.word	0x19191919
 8002b20:	b1191919 	.word	0xb1191919
 8002b24:	bc          	.byte	0xbc
 8002b25:	00          	.byte	0x00
 8002b26:	f8df e1a8 	ldr.w	lr, [pc, #424]	; 8002cd0 <HAL_GPIO_Init+0x208>
 8002b2a:	4576      	cmp	r6, lr
 8002b2c:	f000 8098 	beq.w	8002c60 <HAL_GPIO_Init+0x198>
 8002b30:	f50e 2e70 	add.w	lr, lr, #983040	; 0xf0000
 8002b34:	4576      	cmp	r6, lr
 8002b36:	f000 8093 	beq.w	8002c60 <HAL_GPIO_Init+0x198>
 8002b3a:	f5ae 1e80 	sub.w	lr, lr, #1048576	; 0x100000
 8002b3e:	4576      	cmp	r6, lr
 8002b40:	f000 808e 	beq.w	8002c60 <HAL_GPIO_Init+0x198>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b44:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8002b48:	bf9c      	itt	ls
 8002b4a:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b4c:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b4e:	f04f 060f 	mov.w	r6, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b52:	bf84      	itt	hi
 8002b54:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b58:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b5c:	f8de 4000 	ldr.w	r4, [lr]
 8002b60:	fa0a f90b 	lsl.w	r9, sl, fp
 8002b64:	fa06 fb0b 	lsl.w	fp, r6, fp
 8002b68:	ea24 040b 	bic.w	r4, r4, fp
 8002b6c:	ea44 0409 	orr.w	r4, r4, r9
 8002b70:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b74:	684c      	ldr	r4, [r1, #4]
 8002b76:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002b7a:	d079      	beq.n	8002c70 <HAL_GPIO_Init+0x1a8>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b7c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b80:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b84:	f04e 0e01 	orr.w	lr, lr, #1
 8002b88:	f8c7 e018 	str.w	lr, [r7, #24]
 8002b8c:	f8d7 e018 	ldr.w	lr, [r7, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b90:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b94:	f00e 0e01 	and.w	lr, lr, #1
 8002b98:	f8cd e004 	str.w	lr, [sp, #4]
 8002b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 8002ba0:	f023 0e03 	bic.w	lr, r3, #3
 8002ba4:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 8002ba8:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002bac:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002bb0:	fa06 f609 	lsl.w	r6, r6, r9
 8002bb4:	ea2b 0606 	bic.w	r6, fp, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bb8:	f8df b118 	ldr.w	fp, [pc, #280]	; 8002cd4 <HAL_GPIO_Init+0x20c>
 8002bbc:	4558      	cmp	r0, fp
 8002bbe:	d013      	beq.n	8002be8 <HAL_GPIO_Init+0x120>
 8002bc0:	f50b 6b80 	add.w	fp, fp, #1024	; 0x400
 8002bc4:	4558      	cmp	r0, fp
 8002bc6:	d06b      	beq.n	8002ca0 <HAL_GPIO_Init+0x1d8>
 8002bc8:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8002cd8 <HAL_GPIO_Init+0x210>
 8002bcc:	4558      	cmp	r0, fp
 8002bce:	d060      	beq.n	8002c92 <HAL_GPIO_Init+0x1ca>
 8002bd0:	f8df b108 	ldr.w	fp, [pc, #264]	; 8002cdc <HAL_GPIO_Init+0x214>
 8002bd4:	4558      	cmp	r0, fp
 8002bd6:	bf0c      	ite	eq
 8002bd8:	f04f 0b03 	moveq.w	fp, #3
 8002bdc:	f04f 0b04 	movne.w	fp, #4
 8002be0:	fa0b f909 	lsl.w	r9, fp, r9
 8002be4:	ea46 0609 	orr.w	r6, r6, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8002be8:	f8ce 6008 	str.w	r6, [lr, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8002bec:	682e      	ldr	r6, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bee:	f414 3f80 	tst.w	r4, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8002bf2:	bf14      	ite	ne
 8002bf4:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bf8:	ea26 060c 	biceq.w	r6, r6, ip
 8002bfc:	602e      	str	r6, [r5, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8002bfe:	686e      	ldr	r6, [r5, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c00:	f414 3f00 	tst.w	r4, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8002c04:	bf14      	ite	ne
 8002c06:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c0a:	ea26 060c 	biceq.w	r6, r6, ip
 8002c0e:	606e      	str	r6, [r5, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c10:	68ae      	ldr	r6, [r5, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c12:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c16:	bf14      	ite	ne
 8002c18:	ea46 060c 	orrne.w	r6, r6, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c1c:	ea26 060c 	biceq.w	r6, r6, ip
 8002c20:	60ae      	str	r6, [r5, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c22:	f414 1f00 	tst.w	r4, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c26:	68ec      	ldr	r4, [r5, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c28:	d01f      	beq.n	8002c6a <HAL_GPIO_Init+0x1a2>
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c2a:	ea44 040c 	orr.w	r4, r4, ip
 8002c2e:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c30:	680e      	ldr	r6, [r1, #0]
	position++;
 8002c32:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c34:	fa36 f403 	lsrs.w	r4, r6, r3
 8002c38:	f102 0204 	add.w	r2, r2, #4
 8002c3c:	f47f af5a 	bne.w	8002af4 <HAL_GPIO_Init+0x2c>
  }
}
 8002c40:	b003      	add	sp, #12
 8002c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 8002c46:	4546      	cmp	r6, r8
 8002c48:	d00a      	beq.n	8002c60 <HAL_GPIO_Init+0x198>
 8002c4a:	f67f af6c 	bls.w	8002b26 <HAL_GPIO_Init+0x5e>
 8002c4e:	f8df e090 	ldr.w	lr, [pc, #144]	; 8002ce0 <HAL_GPIO_Init+0x218>
 8002c52:	4576      	cmp	r6, lr
 8002c54:	d004      	beq.n	8002c60 <HAL_GPIO_Init+0x198>
 8002c56:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8002c5a:	4576      	cmp	r6, lr
 8002c5c:	f47f af72 	bne.w	8002b44 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c60:	688e      	ldr	r6, [r1, #8]
 8002c62:	bb3e      	cbnz	r6, 8002cb4 <HAL_GPIO_Init+0x1ec>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c64:	f04f 0a04 	mov.w	sl, #4
 8002c68:	e76c      	b.n	8002b44 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c6a:	ea24 040c 	bic.w	r4, r4, ip
 8002c6e:	60ec      	str	r4, [r5, #12]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c70:	680e      	ldr	r6, [r1, #0]
 8002c72:	e738      	b.n	8002ae6 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c74:	68cc      	ldr	r4, [r1, #12]
 8002c76:	f104 0a04 	add.w	sl, r4, #4
          break;
 8002c7a:	e763      	b.n	8002b44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c7c:	68cc      	ldr	r4, [r1, #12]
 8002c7e:	f104 0a08 	add.w	sl, r4, #8
          break;
 8002c82:	e75f      	b.n	8002b44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c84:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 8002c88:	e75c      	b.n	8002b44 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c8a:	68cc      	ldr	r4, [r1, #12]
 8002c8c:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8002c90:	e758      	b.n	8002b44 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c92:	f04f 0b02 	mov.w	fp, #2
 8002c96:	fa0b f909 	lsl.w	r9, fp, r9
 8002c9a:	ea46 0609 	orr.w	r6, r6, r9
 8002c9e:	e7a3      	b.n	8002be8 <HAL_GPIO_Init+0x120>
 8002ca0:	f04f 0b01 	mov.w	fp, #1
 8002ca4:	fa0b f909 	lsl.w	r9, fp, r9
 8002ca8:	ea46 0609 	orr.w	r6, r6, r9
 8002cac:	e79c      	b.n	8002be8 <HAL_GPIO_Init+0x120>
      switch (GPIO_Init->Mode)
 8002cae:	f04f 0a00 	mov.w	sl, #0
 8002cb2:	e747      	b.n	8002b44 <HAL_GPIO_Init+0x7c>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002cb4:	2e01      	cmp	r6, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002cb6:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 8002cba:	bf0c      	ite	eq
 8002cbc:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8002cbe:	6144      	strne	r4, [r0, #20]
 8002cc0:	e740      	b.n	8002b44 <HAL_GPIO_Init+0x7c>
 8002cc2:	bf00      	nop
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40010400 	.word	0x40010400
 8002ccc:	10220000 	.word	0x10220000
 8002cd0:	10120000 	.word	0x10120000
 8002cd4:	40010800 	.word	0x40010800
 8002cd8:	40011000 	.word	0x40011000
 8002cdc:	40011400 	.word	0x40011400
 8002ce0:	10310000 	.word	0x10310000

08002ce4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ce4:	6883      	ldr	r3, [r0, #8]
 8002ce6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002ce8:	bf14      	ite	ne
 8002cea:	2001      	movne	r0, #1
 8002cec:	2000      	moveq	r0, #0
 8002cee:	4770      	bx	lr

08002cf0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cf0:	b902      	cbnz	r2, 8002cf4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cf2:	0409      	lsls	r1, r1, #16
 8002cf4:	6101      	str	r1, [r0, #16]
  }
}
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_I2C_Init>:
{
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf8:	2800      	cmp	r0, #0
 8002cfa:	f000 80b9 	beq.w	8002e70 <HAL_I2C_Init+0x178>
{
 8002cfe:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d00:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d04:	4604      	mov	r4, r0
 8002d06:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8098 	beq.w	8002e40 <HAL_I2C_Init+0x148>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d10:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d12:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d14:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	f022 0201 	bic.w	r2, r2, #1
 8002d1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d30:	f000 ff90 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d34:	6863      	ldr	r3, [r4, #4]
 8002d36:	494f      	ldr	r1, [pc, #316]	; (8002e74 <HAL_I2C_Init+0x17c>)
 8002d38:	428b      	cmp	r3, r1
 8002d3a:	d84f      	bhi.n	8002ddc <HAL_I2C_Init+0xe4>
 8002d3c:	4a4e      	ldr	r2, [pc, #312]	; (8002e78 <HAL_I2C_Init+0x180>)
 8002d3e:	4290      	cmp	r0, r2
 8002d40:	d97c      	bls.n	8002e3c <HAL_I2C_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d42:	4d4e      	ldr	r5, [pc, #312]	; (8002e7c <HAL_I2C_Init+0x184>)
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d44:	005a      	lsls	r2, r3, #1
  freqrange = I2C_FREQRANGE(pclk1);
 8002d46:	fba5 3500 	umull	r3, r5, r5, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d4a:	1e43      	subs	r3, r0, #1
 8002d4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002d50:	f640 7efc 	movw	lr, #4092	; 0xffc
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d54:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8002d56:	0ca9      	lsrs	r1, r5, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d58:	6850      	ldr	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d5a:	f101 0c01 	add.w	ip, r1, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d5e:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 8002d62:	ea40 4095 	orr.w	r0, r0, r5, lsr #18
 8002d66:	6050      	str	r0, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d68:	6a11      	ldr	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d6a:	3301      	adds	r3, #1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d6c:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002d70:	ea41 010c 	orr.w	r1, r1, ip
 8002d74:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d76:	69d1      	ldr	r1, [r2, #28]
 8002d78:	ea13 0f0e 	tst.w	r3, lr
 8002d7c:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002d80:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002d84:	d161      	bne.n	8002e4a <HAL_I2C_Init+0x152>
 8002d86:	2304      	movs	r3, #4
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	61d3      	str	r3, [r2, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d8c:	6811      	ldr	r1, [r2, #0]
 8002d8e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002d92:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002d96:	4303      	orrs	r3, r0
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d9c:	6891      	ldr	r1, [r2, #8]
 8002d9e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002da2:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002da6:	4303      	orrs	r3, r0
 8002da8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002db0:	68d0      	ldr	r0, [r2, #12]
 8002db2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8002db6:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8002dba:	430b      	orrs	r3, r1
 8002dbc:	4303      	orrs	r3, r0
 8002dbe:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dc0:	6813      	ldr	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dc2:	2100      	movs	r1, #0
  __HAL_I2C_ENABLE(hi2c);
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dcc:	6421      	str	r1, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dd2:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd4:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e

  return HAL_OK;
 8002dd8:	4608      	mov	r0, r1
}
 8002dda:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ddc:	4a28      	ldr	r2, [pc, #160]	; (8002e80 <HAL_I2C_Init+0x188>)
 8002dde:	4290      	cmp	r0, r2
 8002de0:	d92c      	bls.n	8002e3c <HAL_I2C_Init+0x144>
  freqrange = I2C_FREQRANGE(pclk1);
 8002de2:	4d26      	ldr	r5, [pc, #152]	; (8002e7c <HAL_I2C_Init+0x184>)
 8002de4:	fba5 2c00 	umull	r2, ip, r5, r0
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002de8:	f44f 7296 	mov.w	r2, #300	; 0x12c
  freqrange = I2C_FREQRANGE(pclk1);
 8002dec:	ea4f 419c 	mov.w	r1, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002df0:	fb02 f101 	mul.w	r1, r2, r1
 8002df4:	4d23      	ldr	r5, [pc, #140]	; (8002e84 <HAL_I2C_Init+0x18c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002df6:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002df8:	fba5 5101 	umull	r5, r1, r5, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dfc:	6855      	ldr	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dfe:	0989      	lsrs	r1, r1, #6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e00:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002e04:	ea45 459c 	orr.w	r5, r5, ip, lsr #18
 8002e08:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e0a:	6a15      	ldr	r5, [r2, #32]
 8002e0c:	3101      	adds	r1, #1
 8002e0e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002e12:	4329      	orrs	r1, r5
 8002e14:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e16:	69d1      	ldr	r1, [r2, #28]
 8002e18:	68a5      	ldr	r5, [r4, #8]
 8002e1a:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8002e1e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002e22:	b9ad      	cbnz	r5, 8002e50 <HAL_I2C_Init+0x158>
 8002e24:	3801      	subs	r0, #1
 8002e26:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002e2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	b1d3      	cbz	r3, 8002e6c <HAL_I2C_Init+0x174>
 8002e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3a:	e7a5      	b.n	8002d88 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002e3c:	2001      	movs	r0, #1
}
 8002e3e:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002e40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002e44:	f7fe fd42 	bl	80018cc <HAL_I2C_MspInit>
 8002e48:	e762      	b.n	8002d10 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4e:	e79b      	b.n	8002d88 <HAL_I2C_Init+0x90>
 8002e50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e54:	3801      	subs	r0, #1
 8002e56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	b113      	cbz	r3, 8002e6c <HAL_I2C_Init+0x174>
 8002e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e6a:	e78d      	b.n	8002d88 <HAL_I2C_Init+0x90>
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e78b      	b.n	8002d88 <HAL_I2C_Init+0x90>
    return HAL_ERROR;
 8002e70:	2001      	movs	r0, #1
}
 8002e72:	4770      	bx	lr
 8002e74:	000186a0 	.word	0x000186a0
 8002e78:	001e847f 	.word	0x001e847f
 8002e7c:	431bde83 	.word	0x431bde83
 8002e80:	003d08ff 	.word	0x003d08ff
 8002e84:	10624dd3 	.word	0x10624dd3

08002e88 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e8c:	4605      	mov	r5, r0
 8002e8e:	b083      	sub	sp, #12
 8002e90:	4699      	mov	r9, r3
 8002e92:	4688      	mov	r8, r1
 8002e94:	4692      	mov	sl, r2
 8002e96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e98:	f7ff f90e 	bl	80020b8 <HAL_GetTick>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9c:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d003      	beq.n	8002eac <HAL_I2C_Master_Transmit+0x24>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002ea4:	2002      	movs	r0, #2
  }
}
 8002ea6:	b003      	add	sp, #12
 8002ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002eac:	4606      	mov	r6, r0
 8002eae:	e005      	b.n	8002ebc <HAL_I2C_Master_Transmit+0x34>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb0:	f7ff f902 	bl	80020b8 <HAL_GetTick>
 8002eb4:	1b80      	subs	r0, r0, r6
 8002eb6:	2819      	cmp	r0, #25
 8002eb8:	f200 80f8 	bhi.w	80030ac <HAL_I2C_Master_Transmit+0x224>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ebc:	682c      	ldr	r4, [r5, #0]
 8002ebe:	69a3      	ldr	r3, [r4, #24]
 8002ec0:	ea6f 0c03 	mvn.w	ip, r3
 8002ec4:	f01c 0b02 	ands.w	fp, ip, #2
 8002ec8:	d0f2      	beq.n	8002eb0 <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8002eca:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d0e8      	beq.n	8002ea4 <HAL_I2C_Master_Transmit+0x1c>
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	07d9      	lsls	r1, r3, #31
 8002edc:	d571      	bpl.n	8002fc2 <HAL_I2C_Master_Transmit+0x13a>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ede:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ee0:	2021      	movs	r0, #33	; 0x21
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ee2:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ee4:	6823      	ldr	r3, [r4, #0]
 8002ee6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002eea:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eec:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ef0:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ef4:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002ef6:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002efa:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002efc:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8002f00:	62ea      	str	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8002f02:	852b      	strh	r3, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f04:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8002f06:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d006      	beq.n	8002f1c <HAL_I2C_Master_Transmit+0x94>
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d004      	beq.n	8002f1c <HAL_I2C_Master_Transmit+0x94>
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d002      	beq.n	8002f1c <HAL_I2C_Master_Transmit+0x94>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002f18:	2b12      	cmp	r3, #18
 8002f1a:	d103      	bne.n	8002f24 <HAL_I2C_Master_Transmit+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1c:	6823      	ldr	r3, [r4, #0]
 8002f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f22:	6023      	str	r3, [r4, #0]
 8002f24:	1c7b      	adds	r3, r7, #1
 8002f26:	d13e      	bne.n	8002fa6 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f28:	6963      	ldr	r3, [r4, #20]
 8002f2a:	07d8      	lsls	r0, r3, #31
 8002f2c:	d5fc      	bpl.n	8002f28 <HAL_I2C_Master_Transmit+0xa0>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f2e:	692b      	ldr	r3, [r5, #16]
 8002f30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f34:	d14a      	bne.n	8002fcc <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f36:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 8002f3a:	6121      	str	r1, [r4, #16]
 8002f3c:	1c78      	adds	r0, r7, #1
 8002f3e:	d004      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0xc2>
 8002f40:	e0dd      	b.n	80030fe <HAL_I2C_Master_Transmit+0x276>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f42:	6963      	ldr	r3, [r4, #20]
 8002f44:	055a      	lsls	r2, r3, #21
 8002f46:	f100 80c2 	bmi.w	80030ce <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f4a:	6963      	ldr	r3, [r4, #20]
 8002f4c:	0799      	lsls	r1, r3, #30
 8002f4e:	d5f8      	bpl.n	8002f42 <HAL_I2C_Master_Transmit+0xba>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f50:	2200      	movs	r2, #0
 8002f52:	9201      	str	r2, [sp, #4]
 8002f54:	6962      	ldr	r2, [r4, #20]
    while (hi2c->XferSize > 0U)
 8002f56:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f58:	9201      	str	r2, [sp, #4]
 8002f5a:	69a2      	ldr	r2, [r4, #24]
 8002f5c:	9201      	str	r2, [sp, #4]
 8002f5e:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d075      	beq.n	8003050 <HAL_I2C_Master_Transmit+0x1c8>
 8002f64:	1c79      	adds	r1, r7, #1
 8002f66:	f040 8081 	bne.w	800306c <HAL_I2C_Master_Transmit+0x1e4>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f6a:	6963      	ldr	r3, [r4, #20]
 8002f6c:	061a      	lsls	r2, r3, #24
 8002f6e:	d441      	bmi.n	8002ff4 <HAL_I2C_Master_Transmit+0x16c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f70:	6963      	ldr	r3, [r4, #20]
 8002f72:	055b      	lsls	r3, r3, #21
 8002f74:	d5f9      	bpl.n	8002f6a <HAL_I2C_Master_Transmit+0xe2>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f76:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f7a:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8002f7e:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f80:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f82:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f86:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f8a:	6c2b      	ldr	r3, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f90:	f043 0304 	orr.w	r3, r3, #4
 8002f94:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f96:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	f000 80e6 	beq.w	800316a <HAL_I2C_Master_Transmit+0x2e2>
      return HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
}
 8002fa0:	b003      	add	sp, #12
 8002fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa6:	6963      	ldr	r3, [r4, #20]
 8002fa8:	07d9      	lsls	r1, r3, #31
 8002faa:	d4c0      	bmi.n	8002f2e <HAL_I2C_Master_Transmit+0xa6>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fac:	f7ff f884 	bl	80020b8 <HAL_GetTick>
 8002fb0:	1b80      	subs	r0, r0, r6
 8002fb2:	4287      	cmp	r7, r0
 8002fb4:	f0c0 80b3 	bcc.w	800311e <HAL_I2C_Master_Transmit+0x296>
 8002fb8:	2f00      	cmp	r7, #0
 8002fba:	f000 80b0 	beq.w	800311e <HAL_I2C_Master_Transmit+0x296>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fbe:	682c      	ldr	r4, [r5, #0]
 8002fc0:	e7b0      	b.n	8002f24 <HAL_I2C_Master_Transmit+0x9c>
      __HAL_I2C_ENABLE(hi2c);
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6023      	str	r3, [r4, #0]
 8002fca:	e788      	b.n	8002ede <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fcc:	ea4f 13e8 	mov.w	r3, r8, asr #7
 8002fd0:	f003 0306 	and.w	r3, r3, #6
 8002fd4:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8002fd8:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8002fda:	1c7b      	adds	r3, r7, #1
 8002fdc:	d003      	beq.n	8002fe6 <HAL_I2C_Master_Transmit+0x15e>
 8002fde:	e0b5      	b.n	800314c <HAL_I2C_Master_Transmit+0x2c4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fe0:	6963      	ldr	r3, [r4, #20]
 8002fe2:	0559      	lsls	r1, r3, #21
 8002fe4:	d473      	bmi.n	80030ce <HAL_I2C_Master_Transmit+0x246>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fe6:	6963      	ldr	r3, [r4, #20]
 8002fe8:	0718      	lsls	r0, r3, #28
 8002fea:	d5f9      	bpl.n	8002fe0 <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fec:	fa5f f388 	uxtb.w	r3, r8
 8002ff0:	6123      	str	r3, [r4, #16]
 8002ff2:	e7a3      	b.n	8002f3c <HAL_I2C_Master_Transmit+0xb4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ff4:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8002ff6:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ffa:	4601      	mov	r1, r0
 8002ffc:	f811 3b01 	ldrb.w	r3, [r1], #1
      hi2c->XferSize--;
 8003000:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003004:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8003006:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 8003008:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800300a:	3b01      	subs	r3, #1
 800300c:	b29b      	uxth	r3, r3
 800300e:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003010:	6963      	ldr	r3, [r4, #20]
      hi2c->pBuffPtr++;
 8003012:	6269      	str	r1, [r5, #36]	; 0x24
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003014:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8003016:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003018:	d50c      	bpl.n	8003034 <HAL_I2C_Master_Transmit+0x1ac>
 800301a:	b15a      	cbz	r2, 8003034 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301c:	7843      	ldrb	r3, [r0, #1]
        hi2c->XferSize--;
 800301e:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003022:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 8003024:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        hi2c->pBuffPtr++;
 8003026:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8003028:	3b01      	subs	r3, #1
 800302a:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800302c:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8003030:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8003032:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 8003034:	1c78      	adds	r0, r7, #1
 8003036:	d129      	bne.n	800308c <HAL_I2C_Master_Transmit+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003038:	6963      	ldr	r3, [r4, #20]
 800303a:	0759      	lsls	r1, r3, #29
 800303c:	d405      	bmi.n	800304a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800303e:	6963      	ldr	r3, [r4, #20]
 8003040:	055a      	lsls	r2, r3, #21
 8003042:	d498      	bmi.n	8002f76 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003044:	6963      	ldr	r3, [r4, #20]
 8003046:	0759      	lsls	r1, r3, #29
 8003048:	d5f9      	bpl.n	800303e <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 800304a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d189      	bne.n	8002f64 <HAL_I2C_Master_Transmit+0xdc>
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003050:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003052:	2120      	movs	r1, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003054:	6822      	ldr	r2, [r4, #0]
    return HAL_OK;
 8003056:	4618      	mov	r0, r3
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	6022      	str	r2, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800305e:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8003062:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003066:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 800306a:	e71c      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800306c:	6963      	ldr	r3, [r4, #20]
 800306e:	0618      	lsls	r0, r3, #24
 8003070:	d4c0      	bmi.n	8002ff4 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003072:	6963      	ldr	r3, [r4, #20]
 8003074:	0558      	lsls	r0, r3, #21
 8003076:	f53f af7e 	bmi.w	8002f76 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7ff f81d 	bl	80020b8 <HAL_GetTick>
 800307e:	1b80      	subs	r0, r0, r6
 8003080:	4287      	cmp	r7, r0
 8003082:	d379      	bcc.n	8003178 <HAL_I2C_Master_Transmit+0x2f0>
 8003084:	2f00      	cmp	r7, #0
 8003086:	d077      	beq.n	8003178 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003088:	682c      	ldr	r4, [r5, #0]
 800308a:	e76b      	b.n	8002f64 <HAL_I2C_Master_Transmit+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800308c:	6963      	ldr	r3, [r4, #20]
 800308e:	075b      	lsls	r3, r3, #29
 8003090:	d4db      	bmi.n	800304a <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003092:	6963      	ldr	r3, [r4, #20]
 8003094:	055b      	lsls	r3, r3, #21
 8003096:	f53f af6e 	bmi.w	8002f76 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309a:	f7ff f80d 	bl	80020b8 <HAL_GetTick>
 800309e:	1b80      	subs	r0, r0, r6
 80030a0:	4287      	cmp	r7, r0
 80030a2:	d369      	bcc.n	8003178 <HAL_I2C_Master_Transmit+0x2f0>
 80030a4:	2f00      	cmp	r7, #0
 80030a6:	d067      	beq.n	8003178 <HAL_I2C_Master_Transmit+0x2f0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a8:	682c      	ldr	r4, [r5, #0]
 80030aa:	e7c3      	b.n	8003034 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 80030ac:	2320      	movs	r3, #32
      return HAL_BUSY;
 80030ae:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030b0:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030b4:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030b8:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030bc:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80030be:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	642b      	str	r3, [r5, #64]	; 0x40
}
 80030c8:	b003      	add	sp, #12
 80030ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ce:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030d0:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d4:	2120      	movs	r1, #32
      return HAL_ERROR;
 80030d6:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030de:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030e0:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030ec:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80030ee:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	642b      	str	r3, [r5, #64]	; 0x40
}
 80030f8:	b003      	add	sp, #12
 80030fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030fe:	6963      	ldr	r3, [r4, #20]
 8003100:	079b      	lsls	r3, r3, #30
 8003102:	f53f af25 	bmi.w	8002f50 <HAL_I2C_Master_Transmit+0xc8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003106:	6963      	ldr	r3, [r4, #20]
 8003108:	055b      	lsls	r3, r3, #21
 800310a:	d4e0      	bmi.n	80030ce <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fe ffd4 	bl	80020b8 <HAL_GetTick>
 8003110:	1b80      	subs	r0, r0, r6
 8003112:	4287      	cmp	r7, r0
 8003114:	d33e      	bcc.n	8003194 <HAL_I2C_Master_Transmit+0x30c>
 8003116:	2f00      	cmp	r7, #0
 8003118:	d03c      	beq.n	8003194 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800311a:	682c      	ldr	r4, [r5, #0]
 800311c:	e70e      	b.n	8002f3c <HAL_I2C_Master_Transmit+0xb4>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800311e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003120:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003122:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003124:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003128:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800312e:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 8003134:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003138:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800313a:	680b      	ldr	r3, [r1, #0]
 800313c:	05da      	lsls	r2, r3, #23
 800313e:	f57f af2e 	bpl.w	8002f9e <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003142:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 8003146:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003148:	642b      	str	r3, [r5, #64]	; 0x40
 800314a:	e6ac      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800314c:	6963      	ldr	r3, [r4, #20]
 800314e:	071a      	lsls	r2, r3, #28
 8003150:	f53f af4c 	bmi.w	8002fec <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003154:	6963      	ldr	r3, [r4, #20]
 8003156:	055a      	lsls	r2, r3, #21
 8003158:	d4b9      	bmi.n	80030ce <HAL_I2C_Master_Transmit+0x246>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7fe ffad 	bl	80020b8 <HAL_GetTick>
 800315e:	1b83      	subs	r3, r0, r6
 8003160:	429f      	cmp	r7, r3
 8003162:	d317      	bcc.n	8003194 <HAL_I2C_Master_Transmit+0x30c>
 8003164:	b1b7      	cbz	r7, 8003194 <HAL_I2C_Master_Transmit+0x30c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003166:	682c      	ldr	r4, [r5, #0]
 8003168:	e737      	b.n	8002fda <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	682a      	ldr	r2, [r5, #0]
        return HAL_ERROR;
 800316c:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316e:	6813      	ldr	r3, [r2, #0]
 8003170:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e696      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003178:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 800317a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800317c:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800317e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003182:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003186:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003188:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800318c:	f043 0320 	orr.w	r3, r3, #32
 8003190:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8003192:	e700      	b.n	8002f96 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003194:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003196:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003198:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800319a:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800319e:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 80031a4:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031a6:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 80031aa:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031ae:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 80031b0:	e679      	b.n	8002ea6 <HAL_I2C_Master_Transmit+0x1e>
 80031b2:	bf00      	nop

080031b4 <HAL_I2C_Master_Receive>:
{
 80031b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031b8:	4605      	mov	r5, r0
  __IO uint32_t count = 0U;
 80031ba:	2400      	movs	r4, #0
{
 80031bc:	b087      	sub	sp, #28
 80031be:	4699      	mov	r9, r3
 80031c0:	4688      	mov	r8, r1
 80031c2:	4692      	mov	sl, r2
 80031c4:	9f10      	ldr	r7, [sp, #64]	; 0x40
  __IO uint32_t count = 0U;
 80031c6:	9400      	str	r4, [sp, #0]
  uint32_t tickstart = HAL_GetTick();
 80031c8:	f7fe ff76 	bl	80020b8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80031cc:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d003      	beq.n	80031dc <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80031d4:	2002      	movs	r0, #2
}
 80031d6:	b007      	add	sp, #28
 80031d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031dc:	4606      	mov	r6, r0
 80031de:	e005      	b.n	80031ec <HAL_I2C_Master_Receive+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e0:	f7fe ff6a 	bl	80020b8 <HAL_GetTick>
 80031e4:	1b80      	subs	r0, r0, r6
 80031e6:	2819      	cmp	r0, #25
 80031e8:	f200 80ac 	bhi.w	8003344 <HAL_I2C_Master_Receive+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ec:	682c      	ldr	r4, [r5, #0]
 80031ee:	69a3      	ldr	r3, [r4, #24]
 80031f0:	ea6f 0c03 	mvn.w	ip, r3
 80031f4:	f01c 0b02 	ands.w	fp, ip, #2
 80031f8:	d0f2      	beq.n	80031e0 <HAL_I2C_Master_Receive+0x2c>
    __HAL_LOCK(hi2c);
 80031fa:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d0e8      	beq.n	80031d4 <HAL_I2C_Master_Receive+0x20>
 8003202:	2301      	movs	r3, #1
 8003204:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003208:	6823      	ldr	r3, [r4, #0]
 800320a:	07db      	lsls	r3, r3, #31
 800320c:	d564      	bpl.n	80032d8 <HAL_I2C_Master_Receive+0x124>
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800320e:	2200      	movs	r2, #0
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003210:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003212:	2110      	movs	r1, #16
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003214:	6823      	ldr	r3, [r4, #0]
 8003216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800321a:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800321c:	f885 003d 	strb.w	r0, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003220:	f885 103e 	strb.w	r1, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003224:	642a      	str	r2, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8003226:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800322a:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800322c:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
 8003230:	62ea      	str	r2, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003232:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8003234:	852b      	strh	r3, [r5, #40]	; 0x28
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003236:	6823      	ldr	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003238:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    hi2c->pBuffPtr    = pData;
 800323e:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003242:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003244:	d007      	beq.n	8003256 <HAL_I2C_Master_Receive+0xa2>
 8003246:	2a01      	cmp	r2, #1
 8003248:	d005      	beq.n	8003256 <HAL_I2C_Master_Receive+0xa2>
 800324a:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 800324e:	d002      	beq.n	8003256 <HAL_I2C_Master_Receive+0xa2>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003250:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003252:	2b11      	cmp	r3, #17
 8003254:	d103      	bne.n	800325e <HAL_I2C_Master_Receive+0xaa>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003256:	6823      	ldr	r3, [r4, #0]
 8003258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325c:	6023      	str	r3, [r4, #0]
 800325e:	1c78      	adds	r0, r7, #1
 8003260:	d12c      	bne.n	80032bc <HAL_I2C_Master_Receive+0x108>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003262:	6963      	ldr	r3, [r4, #20]
 8003264:	07d9      	lsls	r1, r3, #31
 8003266:	d5fc      	bpl.n	8003262 <HAL_I2C_Master_Receive+0xae>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003268:	692b      	ldr	r3, [r5, #16]
 800326a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326e:	d138      	bne.n	80032e2 <HAL_I2C_Master_Receive+0x12e>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003270:	f048 0801 	orr.w	r8, r8, #1
 8003274:	fa5f f388 	uxtb.w	r3, r8
 8003278:	6123      	str	r3, [r4, #16]
 800327a:	1c79      	adds	r1, r7, #1
 800327c:	d003      	beq.n	8003286 <HAL_I2C_Master_Receive+0xd2>
 800327e:	e111      	b.n	80034a4 <HAL_I2C_Master_Receive+0x2f0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003280:	6963      	ldr	r3, [r4, #20]
 8003282:	055b      	lsls	r3, r3, #21
 8003284:	d46f      	bmi.n	8003366 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003286:	6963      	ldr	r3, [r4, #20]
 8003288:	079a      	lsls	r2, r3, #30
 800328a:	d5f9      	bpl.n	8003280 <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 800328c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800328e:	2b00      	cmp	r3, #0
 8003290:	f040 8081 	bne.w	8003396 <HAL_I2C_Master_Receive+0x1e2>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003294:	9301      	str	r3, [sp, #4]
 8003296:	6963      	ldr	r3, [r4, #20]
 8003298:	9301      	str	r3, [sp, #4]
 800329a:	69a3      	ldr	r3, [r4, #24]
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	6823      	ldr	r3, [r4, #0]
 80032a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a6:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032a8:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80032aa:	2220      	movs	r2, #32
    return HAL_OK;
 80032ac:	4618      	mov	r0, r3
    hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80032b2:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032b6:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    return HAL_OK;
 80032ba:	e78c      	b.n	80031d6 <HAL_I2C_Master_Receive+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	6963      	ldr	r3, [r4, #20]
 80032be:	07da      	lsls	r2, r3, #31
 80032c0:	d4d2      	bmi.n	8003268 <HAL_I2C_Master_Receive+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c2:	f7fe fef9 	bl	80020b8 <HAL_GetTick>
 80032c6:	1b80      	subs	r0, r0, r6
 80032c8:	4287      	cmp	r7, r0
 80032ca:	f0c0 80d4 	bcc.w	8003476 <HAL_I2C_Master_Receive+0x2c2>
 80032ce:	2f00      	cmp	r7, #0
 80032d0:	f000 80d1 	beq.w	8003476 <HAL_I2C_Master_Receive+0x2c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032d4:	682c      	ldr	r4, [r5, #0]
 80032d6:	e7c2      	b.n	800325e <HAL_I2C_Master_Receive+0xaa>
      __HAL_I2C_ENABLE(hi2c);
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6023      	str	r3, [r4, #0]
 80032e0:	e795      	b.n	800320e <HAL_I2C_Master_Receive+0x5a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032e2:	ea4f 19e8 	mov.w	r9, r8, asr #7
 80032e6:	f009 0906 	and.w	r9, r9, #6
 80032ea:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 80032ee:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 80032f0:	1c78      	adds	r0, r7, #1
 80032f2:	d003      	beq.n	80032fc <HAL_I2C_Master_Receive+0x148>
 80032f4:	e100      	b.n	80034f8 <HAL_I2C_Master_Receive+0x344>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f6:	6963      	ldr	r3, [r4, #20]
 80032f8:	055a      	lsls	r2, r3, #21
 80032fa:	d434      	bmi.n	8003366 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032fc:	6963      	ldr	r3, [r4, #20]
 80032fe:	0719      	lsls	r1, r3, #28
 8003300:	d5f9      	bpl.n	80032f6 <HAL_I2C_Master_Receive+0x142>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003302:	fa5f f388 	uxtb.w	r3, r8
 8003306:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8003308:	1c79      	adds	r1, r7, #1
 800330a:	d003      	beq.n	8003314 <HAL_I2C_Master_Receive+0x160>
 800330c:	e1c0      	b.n	8003690 <HAL_I2C_Master_Receive+0x4dc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800330e:	6963      	ldr	r3, [r4, #20]
 8003310:	055b      	lsls	r3, r3, #21
 8003312:	d428      	bmi.n	8003366 <HAL_I2C_Master_Receive+0x1b2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003314:	6963      	ldr	r3, [r4, #20]
 8003316:	079a      	lsls	r2, r3, #30
 8003318:	d5f9      	bpl.n	800330e <HAL_I2C_Master_Receive+0x15a>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331a:	2300      	movs	r3, #0
 800331c:	9305      	str	r3, [sp, #20]
 800331e:	6963      	ldr	r3, [r4, #20]
 8003320:	9305      	str	r3, [sp, #20]
 8003322:	69a3      	ldr	r3, [r4, #24]
 8003324:	9305      	str	r3, [sp, #20]
 8003326:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800332e:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8003330:	1c79      	adds	r1, r7, #1
 8003332:	f040 81c0 	bne.w	80036b6 <HAL_I2C_Master_Receive+0x502>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003336:	6963      	ldr	r3, [r4, #20]
 8003338:	07da      	lsls	r2, r3, #31
 800333a:	d5fc      	bpl.n	8003336 <HAL_I2C_Master_Receive+0x182>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800333c:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 8003340:	6123      	str	r3, [r4, #16]
 8003342:	e79a      	b.n	800327a <HAL_I2C_Master_Receive+0xc6>
        hi2c->State             = HAL_I2C_STATE_READY;
 8003344:	2320      	movs	r3, #32
      return HAL_BUSY;
 8003346:	2002      	movs	r0, #2
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003348:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800334c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003350:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003354:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003356:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800335a:	f043 0320 	orr.w	r3, r3, #32
 800335e:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003360:	b007      	add	sp, #28
 8003362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003366:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003368:	f46f 6680 	mvn.w	r6, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800336c:	2120      	movs	r1, #32
      return HAL_ERROR;
 800336e:	2001      	movs	r0, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003376:	6023      	str	r3, [r4, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003378:	6166      	str	r6, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800337a:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800337c:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003384:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003386:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800338a:	f043 0304 	orr.w	r3, r3, #4
 800338e:	642b      	str	r3, [r5, #64]	; 0x40
}
 8003390:	b007      	add	sp, #28
 8003392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 8003396:	2b01      	cmp	r3, #1
 8003398:	f000 8167 	beq.w	800366a <HAL_I2C_Master_Receive+0x4b6>
    else if (hi2c->XferSize == 2U)
 800339c:	2b02      	cmp	r3, #2
 800339e:	f000 8108 	beq.w	80035b2 <HAL_I2C_Master_Receive+0x3fe>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a2:	2100      	movs	r1, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033a4:	6822      	ldr	r2, [r4, #0]
 80033a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033aa:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ac:	9104      	str	r1, [sp, #16]
 80033ae:	6962      	ldr	r2, [r4, #20]
 80033b0:	9204      	str	r2, [sp, #16]
 80033b2:	69a2      	ldr	r2, [r4, #24]
 80033b4:	9204      	str	r2, [sp, #16]
 80033b6:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 80033b8:	2b03      	cmp	r3, #3
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80033ba:	f8df 9248 	ldr.w	r9, [pc, #584]	; 8003604 <HAL_I2C_Master_Receive+0x450>
 80033be:	f8df 8248 	ldr.w	r8, [pc, #584]	; 8003608 <HAL_I2C_Master_Receive+0x454>
      if (hi2c->XferSize <= 3U)
 80033c2:	d834      	bhi.n	800342e <HAL_I2C_Master_Receive+0x27a>
        if (hi2c->XferSize == 1U)
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	f000 811b 	beq.w	8003600 <HAL_I2C_Master_Receive+0x44c>
        else if (hi2c->XferSize == 2U)
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	f040 80b0 	bne.w	8003530 <HAL_I2C_Master_Receive+0x37c>
 80033d0:	1c7a      	adds	r2, r7, #1
 80033d2:	f040 8106 	bne.w	80035e2 <HAL_I2C_Master_Receive+0x42e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d6:	6963      	ldr	r3, [r4, #20]
 80033d8:	075b      	lsls	r3, r3, #29
 80033da:	d5fc      	bpl.n	80033d6 <HAL_I2C_Master_Receive+0x222>
 80033dc:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033de:	682b      	ldr	r3, [r5, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033e8:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80033ee:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 80033f0:	3b01      	subs	r3, #1
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	856b      	strh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80033f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80033f8:	3301      	adds	r3, #1
 80033fa:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 80033fc:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80033fe:	3b01      	subs	r3, #1
 8003400:	852b      	strh	r3, [r5, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8003402:	b662      	cpsie	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	691a      	ldr	r2, [r3, #16]
 8003408:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800340a:	701a      	strb	r2, [r3, #0]
          hi2c->XferCount--;
 800340c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 800340e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8003410:	3a01      	subs	r2, #1
 8003412:	b292      	uxth	r2, r2
 8003414:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8003416:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8003418:	3b01      	subs	r3, #1
 800341a:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 800341c:	3201      	adds	r2, #1
          hi2c->XferSize--;
 800341e:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003420:	626a      	str	r2, [r5, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8003422:	2b00      	cmp	r3, #0
 8003424:	f43f af40 	beq.w	80032a8 <HAL_I2C_Master_Receive+0xf4>
      if (hi2c->XferSize <= 3U)
 8003428:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800342a:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 800342c:	d9ca      	bls.n	80033c4 <HAL_I2C_Master_Receive+0x210>
 800342e:	b957      	cbnz	r7, 8003446 <HAL_I2C_Master_Receive+0x292>
 8003430:	e048      	b.n	80034c4 <HAL_I2C_Master_Receive+0x310>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003432:	6963      	ldr	r3, [r4, #20]
 8003434:	06da      	lsls	r2, r3, #27
 8003436:	f100 80fa 	bmi.w	800362e <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7fe fe3d 	bl	80020b8 <HAL_GetTick>
 800343e:	1b80      	subs	r0, r0, r6
 8003440:	4287      	cmp	r7, r0
 8003442:	d348      	bcc.n	80034d6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003444:	682c      	ldr	r4, [r5, #0]
 8003446:	6963      	ldr	r3, [r4, #20]
 8003448:	0659      	lsls	r1, r3, #25
 800344a:	d5f2      	bpl.n	8003432 <HAL_I2C_Master_Receive+0x27e>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800344c:	6922      	ldr	r2, [r4, #16]
 800344e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003450:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8003452:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003454:	6829      	ldr	r1, [r5, #0]
        hi2c->XferCount--;
 8003456:	3b01      	subs	r3, #1
 8003458:	b29b      	uxth	r3, r3
 800345a:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 800345c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800345e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003460:	6948      	ldr	r0, [r1, #20]
        hi2c->XferSize--;
 8003462:	3b01      	subs	r3, #1
 8003464:	b29b      	uxth	r3, r3
        hi2c->pBuffPtr++;
 8003466:	1c54      	adds	r4, r2, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003468:	0740      	lsls	r0, r0, #29
        hi2c->XferSize--;
 800346a:	852b      	strh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800346c:	626c      	str	r4, [r5, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800346e:	d5d8      	bpl.n	8003422 <HAL_I2C_Master_Receive+0x26e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003470:	690b      	ldr	r3, [r1, #16]
 8003472:	7053      	strb	r3, [r2, #1]
 8003474:	e7ca      	b.n	800340c <HAL_I2C_Master_Receive+0x258>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003476:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003478:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800347a:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800347c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003480:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003484:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003486:	6829      	ldr	r1, [r5, #0]
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003488:	f043 0320 	orr.w	r3, r3, #32
        __HAL_UNLOCK(hi2c);
 800348c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003490:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003492:	680b      	ldr	r3, [r1, #0]
 8003494:	05dc      	lsls	r4, r3, #23
 8003496:	f140 808a 	bpl.w	80035ae <HAL_I2C_Master_Receive+0x3fa>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800349a:	f44f 7300 	mov.w	r3, #512	; 0x200
      return HAL_ERROR;
 800349e:	2001      	movs	r0, #1
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034a0:	642b      	str	r3, [r5, #64]	; 0x40
 80034a2:	e698      	b.n	80031d6 <HAL_I2C_Master_Receive+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034a4:	6963      	ldr	r3, [r4, #20]
 80034a6:	0798      	lsls	r0, r3, #30
 80034a8:	f53f aef0 	bmi.w	800328c <HAL_I2C_Master_Receive+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034ac:	6963      	ldr	r3, [r4, #20]
 80034ae:	0558      	lsls	r0, r3, #21
 80034b0:	f53f af59 	bmi.w	8003366 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034b4:	f7fe fe00 	bl	80020b8 <HAL_GetTick>
 80034b8:	1b83      	subs	r3, r0, r6
 80034ba:	429f      	cmp	r7, r3
 80034bc:	d30b      	bcc.n	80034d6 <HAL_I2C_Master_Receive+0x322>
 80034be:	b157      	cbz	r7, 80034d6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c0:	682c      	ldr	r4, [r5, #0]
 80034c2:	e6da      	b.n	800327a <HAL_I2C_Master_Receive+0xc6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034c4:	6963      	ldr	r3, [r4, #20]
 80034c6:	065b      	lsls	r3, r3, #25
 80034c8:	d4c0      	bmi.n	800344c <HAL_I2C_Master_Receive+0x298>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80034ca:	6963      	ldr	r3, [r4, #20]
 80034cc:	06da      	lsls	r2, r3, #27
 80034ce:	f100 80ae 	bmi.w	800362e <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d2:	f7fe fdf1 	bl	80020b8 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034d6:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80034d8:	2320      	movs	r3, #32
          return HAL_ERROR;
 80034da:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 80034dc:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80034de:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034e2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034e6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80034e8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ec:	f043 0320 	orr.w	r3, r3, #32
 80034f0:	642b      	str	r3, [r5, #64]	; 0x40
}
 80034f2:	b007      	add	sp, #28
 80034f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034f8:	6963      	ldr	r3, [r4, #20]
 80034fa:	071b      	lsls	r3, r3, #28
 80034fc:	f53f af01 	bmi.w	8003302 <HAL_I2C_Master_Receive+0x14e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003500:	6963      	ldr	r3, [r4, #20]
 8003502:	055b      	lsls	r3, r3, #21
 8003504:	f53f af2f 	bmi.w	8003366 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fe fdd6 	bl	80020b8 <HAL_GetTick>
 800350c:	1b83      	subs	r3, r0, r6
 800350e:	429f      	cmp	r7, r3
 8003510:	d3e1      	bcc.n	80034d6 <HAL_I2C_Master_Receive+0x322>
 8003512:	2f00      	cmp	r7, #0
 8003514:	d0df      	beq.n	80034d6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003516:	682c      	ldr	r4, [r5, #0]
 8003518:	e6ea      	b.n	80032f0 <HAL_I2C_Master_Receive+0x13c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800351a:	6963      	ldr	r3, [r4, #20]
 800351c:	075b      	lsls	r3, r3, #29
 800351e:	d40c      	bmi.n	800353a <HAL_I2C_Master_Receive+0x386>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003520:	f7fe fdca 	bl	80020b8 <HAL_GetTick>
 8003524:	1b80      	subs	r0, r0, r6
 8003526:	4287      	cmp	r7, r0
 8003528:	d3d5      	bcc.n	80034d6 <HAL_I2C_Master_Receive+0x322>
 800352a:	2f00      	cmp	r7, #0
 800352c:	d0d3      	beq.n	80034d6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800352e:	682c      	ldr	r4, [r5, #0]
 8003530:	1c79      	adds	r1, r7, #1
 8003532:	d1f2      	bne.n	800351a <HAL_I2C_Master_Receive+0x366>
 8003534:	6963      	ldr	r3, [r4, #20]
 8003536:	075a      	lsls	r2, r3, #29
 8003538:	d5fc      	bpl.n	8003534 <HAL_I2C_Master_Receive+0x380>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353a:	6823      	ldr	r3, [r4, #0]
 800353c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003540:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003542:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003544:	682b      	ldr	r3, [r5, #0]
 8003546:	691a      	ldr	r2, [r3, #16]
 8003548:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800354a:	701a      	strb	r2, [r3, #0]
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800354c:	f8d9 3000 	ldr.w	r3, [r9]
          hi2c->pBuffPtr++;
 8003550:	6a69      	ldr	r1, [r5, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003552:	08db      	lsrs	r3, r3, #3
 8003554:	fba8 2303 	umull	r2, r3, r8, r3
          hi2c->XferCount--;
 8003558:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800355a:	0a1b      	lsrs	r3, r3, #8
 800355c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
          hi2c->XferCount--;
 8003560:	3a01      	subs	r2, #1
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003562:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
          hi2c->XferCount--;
 8003566:	b292      	uxth	r2, r2
 8003568:	856a      	strh	r2, [r5, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800356a:	9300      	str	r3, [sp, #0]
          hi2c->XferSize--;
 800356c:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->pBuffPtr++;
 8003572:	1c4b      	adds	r3, r1, #1
 8003574:	626b      	str	r3, [r5, #36]	; 0x24
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003576:	e003      	b.n	8003580 <HAL_I2C_Master_Receive+0x3cc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003578:	682b      	ldr	r3, [r5, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	0750      	lsls	r0, r2, #29
 800357e:	d468      	bmi.n	8003652 <HAL_I2C_Master_Receive+0x49e>
            count--;
 8003580:	9b00      	ldr	r3, [sp, #0]
 8003582:	3b01      	subs	r3, #1
 8003584:	9300      	str	r3, [sp, #0]
            if (count == 0U)
 8003586:	9b00      	ldr	r3, [sp, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1f5      	bne.n	8003578 <HAL_I2C_Master_Receive+0x3c4>
              hi2c->State               = HAL_I2C_STATE_READY;
 800358c:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	632b      	str	r3, [r5, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003590:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003594:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800359a:	f042 0220 	orr.w	r2, r2, #32
 800359e:	642a      	str	r2, [r5, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80035a0:	b662      	cpsie	i
              return HAL_ERROR;
 80035a2:	2001      	movs	r0, #1
              __HAL_UNLOCK(hi2c);
 80035a4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80035a8:	b007      	add	sp, #28
 80035aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return HAL_ERROR;
 80035ae:	2001      	movs	r0, #1
 80035b0:	e611      	b.n	80031d6 <HAL_I2C_Master_Receive+0x22>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b2:	6823      	ldr	r3, [r4, #0]
 80035b4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80035b8:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80035ba:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035bc:	2200      	movs	r2, #0
 80035be:	682b      	ldr	r3, [r5, #0]
 80035c0:	9203      	str	r2, [sp, #12]
 80035c2:	695a      	ldr	r2, [r3, #20]
 80035c4:	9203      	str	r2, [sp, #12]
 80035c6:	699a      	ldr	r2, [r3, #24]
 80035c8:	9203      	str	r2, [sp, #12]
 80035ca:	9a03      	ldr	r2, [sp, #12]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80035d4:	b662      	cpsie	i
    while (hi2c->XferSize > 0U)
 80035d6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80035d8:	2b00      	cmp	r3, #0
 80035da:	f43f ae65 	beq.w	80032a8 <HAL_I2C_Master_Receive+0xf4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035de:	682c      	ldr	r4, [r5, #0]
 80035e0:	e6ea      	b.n	80033b8 <HAL_I2C_Master_Receive+0x204>
 80035e2:	6963      	ldr	r3, [r4, #20]
 80035e4:	0758      	lsls	r0, r3, #29
 80035e6:	f53f aef9 	bmi.w	80033dc <HAL_I2C_Master_Receive+0x228>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ea:	f7fe fd65 	bl	80020b8 <HAL_GetTick>
 80035ee:	1b80      	subs	r0, r0, r6
 80035f0:	4287      	cmp	r7, r0
 80035f2:	f4ff af70 	bcc.w	80034d6 <HAL_I2C_Master_Receive+0x322>
 80035f6:	2f00      	cmp	r7, #0
 80035f8:	f43f af6d 	beq.w	80034d6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035fc:	682c      	ldr	r4, [r5, #0]
 80035fe:	e6e7      	b.n	80033d0 <HAL_I2C_Master_Receive+0x21c>
 8003600:	b977      	cbnz	r7, 8003620 <HAL_I2C_Master_Receive+0x46c>
 8003602:	e02d      	b.n	8003660 <HAL_I2C_Master_Receive+0x4ac>
 8003604:	20000000 	.word	0x20000000
 8003608:	14f8b589 	.word	0x14f8b589
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800360c:	6963      	ldr	r3, [r4, #20]
 800360e:	06d8      	lsls	r0, r3, #27
 8003610:	d40d      	bmi.n	800362e <HAL_I2C_Master_Receive+0x47a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003612:	f7fe fd51 	bl	80020b8 <HAL_GetTick>
 8003616:	1b80      	subs	r0, r0, r6
 8003618:	4287      	cmp	r7, r0
 800361a:	f4ff af5c 	bcc.w	80034d6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800361e:	682c      	ldr	r4, [r5, #0]
 8003620:	6963      	ldr	r3, [r4, #20]
 8003622:	065b      	lsls	r3, r3, #25
 8003624:	d5f2      	bpl.n	800360c <HAL_I2C_Master_Receive+0x458>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003626:	6922      	ldr	r2, [r4, #16]
 8003628:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800362a:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800362c:	e6ee      	b.n	800340c <HAL_I2C_Master_Receive+0x258>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800362e:	2300      	movs	r3, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003630:	f06f 0110 	mvn.w	r1, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8003634:	2220      	movs	r2, #32
          return HAL_ERROR;
 8003636:	2001      	movs	r0, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003638:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800363a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800363c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003640:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003644:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003646:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800364a:	642a      	str	r2, [r5, #64]	; 0x40
}
 800364c:	b007      	add	sp, #28
 800364e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003658:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	704b      	strb	r3, [r1, #1]
 800365e:	e6c6      	b.n	80033ee <HAL_I2C_Master_Receive+0x23a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003660:	6963      	ldr	r3, [r4, #20]
 8003662:	0659      	lsls	r1, r3, #25
 8003664:	f57f af31 	bpl.w	80034ca <HAL_I2C_Master_Receive+0x316>
 8003668:	e7dd      	b.n	8003626 <HAL_I2C_Master_Receive+0x472>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003670:	6023      	str	r3, [r4, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003672:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003674:	2200      	movs	r2, #0
 8003676:	682b      	ldr	r3, [r5, #0]
 8003678:	9202      	str	r2, [sp, #8]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	9202      	str	r2, [sp, #8]
 800367e:	699a      	ldr	r2, [r3, #24]
 8003680:	9202      	str	r2, [sp, #8]
 8003682:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800368c:	b662      	cpsie	i
}
 800368e:	e7a2      	b.n	80035d6 <HAL_I2C_Master_Receive+0x422>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003690:	6963      	ldr	r3, [r4, #20]
 8003692:	0798      	lsls	r0, r3, #30
 8003694:	f53f ae41 	bmi.w	800331a <HAL_I2C_Master_Receive+0x166>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003698:	6963      	ldr	r3, [r4, #20]
 800369a:	0558      	lsls	r0, r3, #21
 800369c:	f53f ae63 	bmi.w	8003366 <HAL_I2C_Master_Receive+0x1b2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a0:	f7fe fd0a 	bl	80020b8 <HAL_GetTick>
 80036a4:	1b83      	subs	r3, r0, r6
 80036a6:	429f      	cmp	r7, r3
 80036a8:	f4ff af15 	bcc.w	80034d6 <HAL_I2C_Master_Receive+0x322>
 80036ac:	2f00      	cmp	r7, #0
 80036ae:	f43f af12 	beq.w	80034d6 <HAL_I2C_Master_Receive+0x322>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b2:	682c      	ldr	r4, [r5, #0]
 80036b4:	e628      	b.n	8003308 <HAL_I2C_Master_Receive+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b6:	6963      	ldr	r3, [r4, #20]
 80036b8:	07db      	lsls	r3, r3, #31
 80036ba:	f53f ae3f 	bmi.w	800333c <HAL_I2C_Master_Receive+0x188>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036be:	f7fe fcfb 	bl	80020b8 <HAL_GetTick>
 80036c2:	1b83      	subs	r3, r0, r6
 80036c4:	429f      	cmp	r7, r3
 80036c6:	f4ff aed6 	bcc.w	8003476 <HAL_I2C_Master_Receive+0x2c2>
 80036ca:	2f00      	cmp	r7, #0
 80036cc:	f43f aed3 	beq.w	8003476 <HAL_I2C_Master_Receive+0x2c2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036d0:	682c      	ldr	r4, [r5, #0]
 80036d2:	e62d      	b.n	8003330 <HAL_I2C_Master_Receive+0x17c>

080036d4 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036d4:	2800      	cmp	r0, #0
 80036d6:	f000 81b6 	beq.w	8003a46 <HAL_RCC_OscConfig+0x372>
{
 80036da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036de:	6803      	ldr	r3, [r0, #0]
 80036e0:	4604      	mov	r4, r0
 80036e2:	07dd      	lsls	r5, r3, #31
{
 80036e4:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036e6:	d535      	bpl.n	8003754 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036e8:	499a      	ldr	r1, [pc, #616]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 80036ea:	684a      	ldr	r2, [r1, #4]
 80036ec:	f002 020c 	and.w	r2, r2, #12
 80036f0:	2a04      	cmp	r2, #4
 80036f2:	f000 80ef 	beq.w	80038d4 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036f6:	684a      	ldr	r2, [r1, #4]
 80036f8:	f002 020c 	and.w	r2, r2, #12
 80036fc:	2a08      	cmp	r2, #8
 80036fe:	f000 80e5 	beq.w	80038cc <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003702:	6863      	ldr	r3, [r4, #4]
 8003704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003708:	d010      	beq.n	800372c <HAL_RCC_OscConfig+0x58>
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 810c 	beq.w	8003928 <HAL_RCC_OscConfig+0x254>
 8003710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003714:	f000 8182 	beq.w	8003a1c <HAL_RCC_OscConfig+0x348>
 8003718:	4b8e      	ldr	r3, [pc, #568]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e004      	b.n	8003736 <HAL_RCC_OscConfig+0x62>
 800372c:	4a89      	ldr	r2, [pc, #548]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 800372e:	6813      	ldr	r3, [r2, #0]
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003736:	f7fe fcbf 	bl	80020b8 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	4e86      	ldr	r6, [pc, #536]	; (8003954 <HAL_RCC_OscConfig+0x280>)
        tickstart = HAL_GetTick();
 800373c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	e005      	b.n	800374c <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7fe fcba 	bl	80020b8 <HAL_GetTick>
 8003744:	1b40      	subs	r0, r0, r5
 8003746:	2864      	cmp	r0, #100	; 0x64
 8003748:	f200 80ea 	bhi.w	8003920 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374c:	6833      	ldr	r3, [r6, #0]
 800374e:	039a      	lsls	r2, r3, #14
 8003750:	d5f6      	bpl.n	8003740 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003752:	6823      	ldr	r3, [r4, #0]
 8003754:	079f      	lsls	r7, r3, #30
 8003756:	d528      	bpl.n	80037aa <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003758:	4a7e      	ldr	r2, [pc, #504]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 800375a:	6851      	ldr	r1, [r2, #4]
 800375c:	f011 0f0c 	tst.w	r1, #12
 8003760:	f000 808d 	beq.w	800387e <HAL_RCC_OscConfig+0x1aa>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003764:	6851      	ldr	r1, [r2, #4]
 8003766:	f001 010c 	and.w	r1, r1, #12
 800376a:	2908      	cmp	r1, #8
 800376c:	f000 8083 	beq.w	8003876 <HAL_RCC_OscConfig+0x1a2>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003770:	6923      	ldr	r3, [r4, #16]
 8003772:	2b00      	cmp	r3, #0
 8003774:	f000 8118 	beq.w	80039a8 <HAL_RCC_OscConfig+0x2d4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003778:	2201      	movs	r2, #1
 800377a:	4b77      	ldr	r3, [pc, #476]	; (8003958 <HAL_RCC_OscConfig+0x284>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377c:	4e75      	ldr	r6, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x280>)
        __HAL_RCC_HSI_ENABLE();
 800377e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003780:	f7fe fc9a 	bl	80020b8 <HAL_GetTick>
 8003784:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003786:	e005      	b.n	8003794 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003788:	f7fe fc96 	bl	80020b8 <HAL_GetTick>
 800378c:	1b40      	subs	r0, r0, r5
 800378e:	2802      	cmp	r0, #2
 8003790:	f200 80c6 	bhi.w	8003920 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003794:	6833      	ldr	r3, [r6, #0]
 8003796:	0798      	lsls	r0, r3, #30
 8003798:	d5f6      	bpl.n	8003788 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379a:	6833      	ldr	r3, [r6, #0]
 800379c:	6962      	ldr	r2, [r4, #20]
 800379e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80037a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80037a6:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	071a      	lsls	r2, r3, #28
 80037ac:	d41f      	bmi.n	80037ee <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ae:	075d      	lsls	r5, r3, #29
 80037b0:	d542      	bpl.n	8003838 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037b2:	4b68      	ldr	r3, [pc, #416]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 80037b4:	69da      	ldr	r2, [r3, #28]
 80037b6:	00d0      	lsls	r0, r2, #3
 80037b8:	d57d      	bpl.n	80038b6 <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4e67      	ldr	r6, [pc, #412]	; (800395c <HAL_RCC_OscConfig+0x288>)
 80037be:	6833      	ldr	r3, [r6, #0]
 80037c0:	05d9      	lsls	r1, r3, #23
 80037c2:	f140 809d 	bpl.w	8003900 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c6:	68e3      	ldr	r3, [r4, #12]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	f000 80fe 	beq.w	80039ca <HAL_RCC_OscConfig+0x2f6>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80ca 	beq.w	8003968 <HAL_RCC_OscConfig+0x294>
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	4b5f      	ldr	r3, [pc, #380]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	f000 812c 	beq.w	8003a36 <HAL_RCC_OscConfig+0x362>
 80037de:	f022 0201 	bic.w	r2, r2, #1
 80037e2:	621a      	str	r2, [r3, #32]
 80037e4:	6a1a      	ldr	r2, [r3, #32]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	621a      	str	r2, [r3, #32]
 80037ec:	e0f2      	b.n	80039d4 <HAL_RCC_OscConfig+0x300>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ee:	69a3      	ldr	r3, [r4, #24]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d04f      	beq.n	8003894 <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_LSI_ENABLE();
 80037f4:	2201      	movs	r2, #1
 80037f6:	4b58      	ldr	r3, [pc, #352]	; (8003958 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	4e56      	ldr	r6, [pc, #344]	; (8003954 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_ENABLE();
 80037fa:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80037fe:	f7fe fc5b 	bl	80020b8 <HAL_GetTick>
 8003802:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003804:	e005      	b.n	8003812 <HAL_RCC_OscConfig+0x13e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003806:	f7fe fc57 	bl	80020b8 <HAL_GetTick>
 800380a:	1b40      	subs	r0, r0, r5
 800380c:	2802      	cmp	r0, #2
 800380e:	f200 8087 	bhi.w	8003920 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003812:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003814:	079b      	lsls	r3, r3, #30
 8003816:	d5f6      	bpl.n	8003806 <HAL_RCC_OscConfig+0x132>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003818:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_RCC_OscConfig+0x28c>)
 800381a:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_RCC_OscConfig+0x290>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	0a5b      	lsrs	r3, r3, #9
 8003824:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8003826:	bf00      	nop
  }
  while (Delay --);
 8003828:	9b01      	ldr	r3, [sp, #4]
 800382a:	1e5a      	subs	r2, r3, #1
 800382c:	9201      	str	r2, [sp, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f9      	bne.n	8003826 <HAL_RCC_OscConfig+0x152>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003832:	6823      	ldr	r3, [r4, #0]
 8003834:	075d      	lsls	r5, r3, #29
 8003836:	d4bc      	bmi.n	80037b2 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003838:	69e0      	ldr	r0, [r4, #28]
 800383a:	b1c0      	cbz	r0, 800386e <HAL_RCC_OscConfig+0x19a>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383c:	4d45      	ldr	r5, [pc, #276]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 800383e:	686b      	ldr	r3, [r5, #4]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	f000 80d8 	beq.w	80039fa <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_PLL_DISABLE();
 800384a:	2200      	movs	r2, #0
 800384c:	4b42      	ldr	r3, [pc, #264]	; (8003958 <HAL_RCC_OscConfig+0x284>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800384e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003850:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003852:	f000 80fa 	beq.w	8003a4a <HAL_RCC_OscConfig+0x376>
        tickstart = HAL_GetTick();
 8003856:	f7fe fc2f 	bl	80020b8 <HAL_GetTick>
 800385a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800385c:	e004      	b.n	8003868 <HAL_RCC_OscConfig+0x194>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385e:	f7fe fc2b 	bl	80020b8 <HAL_GetTick>
 8003862:	1b00      	subs	r0, r0, r4
 8003864:	2802      	cmp	r0, #2
 8003866:	d85b      	bhi.n	8003920 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003868:	682b      	ldr	r3, [r5, #0]
 800386a:	019b      	lsls	r3, r3, #6
 800386c:	d4f7      	bmi.n	800385e <HAL_RCC_OscConfig+0x18a>
  return HAL_OK;
 800386e:	2000      	movs	r0, #0
}
 8003870:	b002      	add	sp, #8
 8003872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003876:	6852      	ldr	r2, [r2, #4]
 8003878:	03d6      	lsls	r6, r2, #15
 800387a:	f53f af79 	bmi.w	8003770 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800387e:	4a35      	ldr	r2, [pc, #212]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	0795      	lsls	r5, r2, #30
 8003884:	d530      	bpl.n	80038e8 <HAL_RCC_OscConfig+0x214>
 8003886:	6922      	ldr	r2, [r4, #16]
 8003888:	2a01      	cmp	r2, #1
 800388a:	d02d      	beq.n	80038e8 <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800388c:	2001      	movs	r0, #1
}
 800388e:	b002      	add	sp, #8
 8003890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8003894:	4a30      	ldr	r2, [pc, #192]	; (8003958 <HAL_RCC_OscConfig+0x284>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003896:	4e2f      	ldr	r6, [pc, #188]	; (8003954 <HAL_RCC_OscConfig+0x280>)
      __HAL_RCC_LSI_DISABLE();
 8003898:	f8c2 3480 	str.w	r3, [r2, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800389c:	f7fe fc0c 	bl	80020b8 <HAL_GetTick>
 80038a0:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a2:	e004      	b.n	80038ae <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a4:	f7fe fc08 	bl	80020b8 <HAL_GetTick>
 80038a8:	1b40      	subs	r0, r0, r5
 80038aa:	2802      	cmp	r0, #2
 80038ac:	d838      	bhi.n	8003920 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ae:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80038b0:	079f      	lsls	r7, r3, #30
 80038b2:	d4f7      	bmi.n	80038a4 <HAL_RCC_OscConfig+0x1d0>
 80038b4:	e7bd      	b.n	8003832 <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 80038b8:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80038ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038be:	61da      	str	r2, [r3, #28]
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80038ca:	e777      	b.n	80037bc <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80038cc:	684a      	ldr	r2, [r1, #4]
 80038ce:	03d0      	lsls	r0, r2, #15
 80038d0:	f57f af17 	bpl.w	8003702 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	0391      	lsls	r1, r2, #14
 80038da:	f57f af3b 	bpl.w	8003754 <HAL_RCC_OscConfig+0x80>
 80038de:	6862      	ldr	r2, [r4, #4]
 80038e0:	2a00      	cmp	r2, #0
 80038e2:	f47f af37 	bne.w	8003754 <HAL_RCC_OscConfig+0x80>
 80038e6:	e7d1      	b.n	800388c <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e8:	491a      	ldr	r1, [pc, #104]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 80038ea:	6960      	ldr	r0, [r4, #20]
 80038ec:	680a      	ldr	r2, [r1, #0]
 80038ee:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80038f2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80038f6:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038f8:	071a      	lsls	r2, r3, #28
 80038fa:	f57f af58 	bpl.w	80037ae <HAL_RCC_OscConfig+0xda>
 80038fe:	e776      	b.n	80037ee <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003906:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003908:	f7fe fbd6 	bl	80020b8 <HAL_GetTick>
 800390c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800390e:	6833      	ldr	r3, [r6, #0]
 8003910:	05da      	lsls	r2, r3, #23
 8003912:	f53f af58 	bmi.w	80037c6 <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003916:	f7fe fbcf 	bl	80020b8 <HAL_GetTick>
 800391a:	1bc0      	subs	r0, r0, r7
 800391c:	2864      	cmp	r0, #100	; 0x64
 800391e:	d9f6      	bls.n	800390e <HAL_RCC_OscConfig+0x23a>
            return HAL_TIMEOUT;
 8003920:	2003      	movs	r0, #3
}
 8003922:	b002      	add	sp, #8
 8003924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003928:	4d0a      	ldr	r5, [pc, #40]	; (8003954 <HAL_RCC_OscConfig+0x280>)
 800392a:	682b      	ldr	r3, [r5, #0]
 800392c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003930:	602b      	str	r3, [r5, #0]
 8003932:	682b      	ldr	r3, [r5, #0]
 8003934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003938:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800393a:	f7fe fbbd 	bl	80020b8 <HAL_GetTick>
 800393e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003940:	e004      	b.n	800394c <HAL_RCC_OscConfig+0x278>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003942:	f7fe fbb9 	bl	80020b8 <HAL_GetTick>
 8003946:	1b80      	subs	r0, r0, r6
 8003948:	2864      	cmp	r0, #100	; 0x64
 800394a:	d8e9      	bhi.n	8003920 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	039b      	lsls	r3, r3, #14
 8003950:	d4f7      	bmi.n	8003942 <HAL_RCC_OscConfig+0x26e>
 8003952:	e6fe      	b.n	8003752 <HAL_RCC_OscConfig+0x7e>
 8003954:	40021000 	.word	0x40021000
 8003958:	42420000 	.word	0x42420000
 800395c:	40007000 	.word	0x40007000
 8003960:	20000000 	.word	0x20000000
 8003964:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003968:	4e50      	ldr	r6, [pc, #320]	; (8003aac <HAL_RCC_OscConfig+0x3d8>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800396e:	6a33      	ldr	r3, [r6, #32]
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	6233      	str	r3, [r6, #32]
 8003976:	6a33      	ldr	r3, [r6, #32]
 8003978:	f023 0304 	bic.w	r3, r3, #4
 800397c:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 800397e:	f7fe fb9b 	bl	80020b8 <HAL_GetTick>
 8003982:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003984:	e004      	b.n	8003990 <HAL_RCC_OscConfig+0x2bc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003986:	f7fe fb97 	bl	80020b8 <HAL_GetTick>
 800398a:	1bc0      	subs	r0, r0, r7
 800398c:	4540      	cmp	r0, r8
 800398e:	d8c7      	bhi.n	8003920 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003990:	6a33      	ldr	r3, [r6, #32]
 8003992:	0798      	lsls	r0, r3, #30
 8003994:	d4f7      	bmi.n	8003986 <HAL_RCC_OscConfig+0x2b2>
    if (pwrclkchanged == SET)
 8003996:	2d00      	cmp	r5, #0
 8003998:	f43f af4e 	beq.w	8003838 <HAL_RCC_OscConfig+0x164>
      __HAL_RCC_PWR_CLK_DISABLE();
 800399c:	4a43      	ldr	r2, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x3d8>)
 800399e:	69d3      	ldr	r3, [r2, #28]
 80039a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a4:	61d3      	str	r3, [r2, #28]
 80039a6:	e747      	b.n	8003838 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 80039a8:	4a41      	ldr	r2, [pc, #260]	; (8003ab0 <HAL_RCC_OscConfig+0x3dc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039aa:	4e40      	ldr	r6, [pc, #256]	; (8003aac <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_HSI_DISABLE();
 80039ac:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80039ae:	f7fe fb83 	bl	80020b8 <HAL_GetTick>
 80039b2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039b4:	e004      	b.n	80039c0 <HAL_RCC_OscConfig+0x2ec>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b6:	f7fe fb7f 	bl	80020b8 <HAL_GetTick>
 80039ba:	1b40      	subs	r0, r0, r5
 80039bc:	2802      	cmp	r0, #2
 80039be:	d8af      	bhi.n	8003920 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039c0:	6833      	ldr	r3, [r6, #0]
 80039c2:	0799      	lsls	r1, r3, #30
 80039c4:	d4f7      	bmi.n	80039b6 <HAL_RCC_OscConfig+0x2e2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	e6ef      	b.n	80037aa <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ca:	4a38      	ldr	r2, [pc, #224]	; (8003aac <HAL_RCC_OscConfig+0x3d8>)
 80039cc:	6a13      	ldr	r3, [r2, #32]
 80039ce:	f043 0301 	orr.w	r3, r3, #1
 80039d2:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80039d4:	f7fe fb70 	bl	80020b8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d8:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80039dc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039de:	4f33      	ldr	r7, [pc, #204]	; (8003aac <HAL_RCC_OscConfig+0x3d8>)
 80039e0:	e004      	b.n	80039ec <HAL_RCC_OscConfig+0x318>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fe fb69 	bl	80020b8 <HAL_GetTick>
 80039e6:	1b80      	subs	r0, r0, r6
 80039e8:	4540      	cmp	r0, r8
 80039ea:	d899      	bhi.n	8003920 <HAL_RCC_OscConfig+0x24c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	079b      	lsls	r3, r3, #30
 80039f0:	d5f7      	bpl.n	80039e2 <HAL_RCC_OscConfig+0x30e>
    if (pwrclkchanged == SET)
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	f43f af20 	beq.w	8003838 <HAL_RCC_OscConfig+0x164>
 80039f8:	e7d0      	b.n	800399c <HAL_RCC_OscConfig+0x2c8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039fa:	2801      	cmp	r0, #1
 80039fc:	f43f af38 	beq.w	8003870 <HAL_RCC_OscConfig+0x19c>
        pll_config = RCC->CFGR;
 8003a00:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a02:	6a22      	ldr	r2, [r4, #32]
 8003a04:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8003a08:	4291      	cmp	r1, r2
 8003a0a:	f47f af3f 	bne.w	800388c <HAL_RCC_OscConfig+0x1b8>
 8003a0e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 8003a14:	1a18      	subs	r0, r3, r0
 8003a16:	bf18      	it	ne
 8003a18:	2001      	movne	r0, #1
 8003a1a:	e729      	b.n	8003870 <HAL_RCC_OscConfig+0x19c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a20:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	e67f      	b.n	8003736 <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a36:	f042 0204 	orr.w	r2, r2, #4
 8003a3a:	621a      	str	r2, [r3, #32]
 8003a3c:	6a1a      	ldr	r2, [r3, #32]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	621a      	str	r2, [r3, #32]
 8003a44:	e7c6      	b.n	80039d4 <HAL_RCC_OscConfig+0x300>
    return HAL_ERROR;
 8003a46:	2001      	movs	r0, #1
}
 8003a48:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8003a4a:	f7fe fb35 	bl	80020b8 <HAL_GetTick>
 8003a4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a50:	e005      	b.n	8003a5e <HAL_RCC_OscConfig+0x38a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a52:	f7fe fb31 	bl	80020b8 <HAL_GetTick>
 8003a56:	1b80      	subs	r0, r0, r6
 8003a58:	2802      	cmp	r0, #2
 8003a5a:	f63f af61 	bhi.w	8003920 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a5e:	682b      	ldr	r3, [r5, #0]
 8003a60:	0199      	lsls	r1, r3, #6
 8003a62:	d4f6      	bmi.n	8003a52 <HAL_RCC_OscConfig+0x37e>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003a64:	6a23      	ldr	r3, [r4, #32]
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6a:	d105      	bne.n	8003a78 <HAL_RCC_OscConfig+0x3a4>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003a6c:	686a      	ldr	r2, [r5, #4]
 8003a6e:	68a1      	ldr	r1, [r4, #8]
 8003a70:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8003a74:	430a      	orrs	r2, r1
 8003a76:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a78:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a7a:	4d0c      	ldr	r5, [pc, #48]	; (8003aac <HAL_RCC_OscConfig+0x3d8>)
 8003a7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003a7e:	686a      	ldr	r2, [r5, #4]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8003a86:	490a      	ldr	r1, [pc, #40]	; (8003ab0 <HAL_RCC_OscConfig+0x3dc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a8c:	6608      	str	r0, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003a8e:	f7fe fb13 	bl	80020b8 <HAL_GetTick>
 8003a92:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a94:	e005      	b.n	8003aa2 <HAL_RCC_OscConfig+0x3ce>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a96:	f7fe fb0f 	bl	80020b8 <HAL_GetTick>
 8003a9a:	1b00      	subs	r0, r0, r4
 8003a9c:	2802      	cmp	r0, #2
 8003a9e:	f63f af3f 	bhi.w	8003920 <HAL_RCC_OscConfig+0x24c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003aa2:	682b      	ldr	r3, [r5, #0]
 8003aa4:	019a      	lsls	r2, r3, #6
 8003aa6:	d5f6      	bpl.n	8003a96 <HAL_RCC_OscConfig+0x3c2>
 8003aa8:	e6e1      	b.n	800386e <HAL_RCC_OscConfig+0x19a>
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	42420000 	.word	0x42420000

08003ab4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	f000 80b1 	beq.w	8003c1c <HAL_RCC_ClockConfig+0x168>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aba:	4a5e      	ldr	r2, [pc, #376]	; (8003c34 <HAL_RCC_ClockConfig+0x180>)
{
 8003abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	6813      	ldr	r3, [r2, #0]
 8003ac2:	4604      	mov	r4, r0
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	460d      	mov	r5, r1
{
 8003acc:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ace:	d20d      	bcs.n	8003aec <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad0:	6813      	ldr	r3, [r2, #0]
 8003ad2:	f023 0307 	bic.w	r3, r3, #7
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	6813      	ldr	r3, [r2, #0]
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	d003      	beq.n	8003aec <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 8003ae4:	2001      	movs	r0, #1
}
 8003ae6:	b006      	add	sp, #24
 8003ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	6823      	ldr	r3, [r4, #0]
 8003aee:	079e      	lsls	r6, r3, #30
 8003af0:	d514      	bpl.n	8003b1c <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af2:	0758      	lsls	r0, r3, #29
 8003af4:	d504      	bpl.n	8003b00 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af6:	4950      	ldr	r1, [pc, #320]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
 8003af8:	684a      	ldr	r2, [r1, #4]
 8003afa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8003afe:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b00:	0719      	lsls	r1, r3, #28
 8003b02:	d504      	bpl.n	8003b0e <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b04:	494c      	ldr	r1, [pc, #304]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
 8003b06:	684a      	ldr	r2, [r1, #4]
 8003b08:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 8003b0c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0e:	494a      	ldr	r1, [pc, #296]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
 8003b10:	68a0      	ldr	r0, [r4, #8]
 8003b12:	684a      	ldr	r2, [r1, #4]
 8003b14:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003b18:	4302      	orrs	r2, r0
 8003b1a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1c:	07da      	lsls	r2, r3, #31
 8003b1e:	d520      	bpl.n	8003b62 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b20:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	4b45      	ldr	r3, [pc, #276]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b24:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b26:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b28:	d07a      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x16c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b2a:	2a02      	cmp	r2, #2
 8003b2c:	d073      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x162>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2e:	079e      	lsls	r6, r3, #30
 8003b30:	d5d8      	bpl.n	8003ae4 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b32:	4e41      	ldr	r6, [pc, #260]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b34:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b38:	6873      	ldr	r3, [r6, #4]
 8003b3a:	f023 0303 	bic.w	r3, r3, #3
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003b42:	f7fe fab9 	bl	80020b8 <HAL_GetTick>
 8003b46:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b48:	e004      	b.n	8003b54 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b4a:	f7fe fab5 	bl	80020b8 <HAL_GetTick>
 8003b4e:	1bc0      	subs	r0, r0, r7
 8003b50:	4540      	cmp	r0, r8
 8003b52:	d868      	bhi.n	8003c26 <HAL_RCC_ClockConfig+0x172>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b54:	6873      	ldr	r3, [r6, #4]
 8003b56:	6862      	ldr	r2, [r4, #4]
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003b60:	d1f3      	bne.n	8003b4a <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b62:	4a34      	ldr	r2, [pc, #208]	; (8003c34 <HAL_RCC_ClockConfig+0x180>)
 8003b64:	6813      	ldr	r3, [r2, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	42ab      	cmp	r3, r5
 8003b6c:	d909      	bls.n	8003b82 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b6e:	6813      	ldr	r3, [r2, #0]
 8003b70:	f023 0307 	bic.w	r3, r3, #7
 8003b74:	432b      	orrs	r3, r5
 8003b76:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b78:	6813      	ldr	r3, [r2, #0]
 8003b7a:	f003 0307 	and.w	r3, r3, #7
 8003b7e:	42ab      	cmp	r3, r5
 8003b80:	d1b0      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	0758      	lsls	r0, r3, #29
 8003b86:	d506      	bpl.n	8003b96 <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	492b      	ldr	r1, [pc, #172]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
 8003b8a:	68e0      	ldr	r0, [r4, #12]
 8003b8c:	684a      	ldr	r2, [r1, #4]
 8003b8e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b92:	4302      	orrs	r2, r0
 8003b94:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	0719      	lsls	r1, r3, #28
 8003b98:	d507      	bpl.n	8003baa <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b9a:	4a27      	ldr	r2, [pc, #156]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
 8003b9c:	6921      	ldr	r1, [r4, #16]
 8003b9e:	6853      	ldr	r3, [r2, #4]
 8003ba0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003ba4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ba8:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003baa:	f240 2401 	movw	r4, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003bae:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <HAL_RCC_ClockConfig+0x188>)
 8003bb0:	ad06      	add	r5, sp, #24
 8003bb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003bb4:	e905 000f 	stmdb	r5, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 8003bb8:	491f      	ldr	r1, [pc, #124]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003bba:	f8ad 4004 	strh.w	r4, [sp, #4]
  tmpreg = RCC->CFGR;
 8003bbe:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc0:	f002 030c 	and.w	r3, r2, #12
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	d011      	beq.n	8003bec <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	; (8003c40 <HAL_RCC_ClockConfig+0x18c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bca:	4a1b      	ldr	r2, [pc, #108]	; (8003c38 <HAL_RCC_ClockConfig+0x184>)
 8003bcc:	481d      	ldr	r0, [pc, #116]	; (8003c44 <HAL_RCC_ClockConfig+0x190>)
 8003bce:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 8003bd0:	491d      	ldr	r1, [pc, #116]	; (8003c48 <HAL_RCC_ClockConfig+0x194>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bd2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8003bd6:	5c80      	ldrb	r0, [r0, r2]
 8003bd8:	4a1c      	ldr	r2, [pc, #112]	; (8003c4c <HAL_RCC_ClockConfig+0x198>)
 8003bda:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 8003bdc:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bde:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 8003be0:	f7fe fa28 	bl	8002034 <HAL_InitTick>
  return HAL_OK;
 8003be4:	2000      	movs	r0, #0
}
 8003be6:	b006      	add	sp, #24
 8003be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bec:	f3c2 4383 	ubfx	r3, r2, #18, #4
 8003bf0:	3318      	adds	r3, #24
 8003bf2:	446b      	add	r3, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bf4:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bf6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bfa:	d516      	bpl.n	8003c2a <HAL_RCC_ClockConfig+0x176>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bfc:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bfe:	4910      	ldr	r1, [pc, #64]	; (8003c40 <HAL_RCC_ClockConfig+0x18c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c00:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c04:	fb01 f303 	mul.w	r3, r1, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c08:	3218      	adds	r2, #24
 8003c0a:	446a      	add	r2, sp
 8003c0c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c10:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c14:	e7d9      	b.n	8003bca <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c16:	019f      	lsls	r7, r3, #6
 8003c18:	d48b      	bmi.n	8003b32 <HAL_RCC_ClockConfig+0x7e>
 8003c1a:	e763      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8003c1c:	2001      	movs	r0, #1
}
 8003c1e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c20:	039b      	lsls	r3, r3, #14
 8003c22:	d486      	bmi.n	8003b32 <HAL_RCC_ClockConfig+0x7e>
 8003c24:	e75e      	b.n	8003ae4 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 8003c26:	2003      	movs	r0, #3
 8003c28:	e75d      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c2a:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x19c>)
 8003c2c:	fb02 f303 	mul.w	r3, r2, r3
 8003c30:	e7cb      	b.n	8003bca <HAL_RCC_ClockConfig+0x116>
 8003c32:	bf00      	nop
 8003c34:	40022000 	.word	0x40022000
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	080052a4 	.word	0x080052a4
 8003c40:	007a1200 	.word	0x007a1200
 8003c44:	0800528c 	.word	0x0800528c
 8003c48:	20000008 	.word	0x20000008
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	003d0900 	.word	0x003d0900

08003c54 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c54:	4b04      	ldr	r3, [pc, #16]	; (8003c68 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8003c56:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4905      	ldr	r1, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003c5c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	6810      	ldr	r0, [r2, #0]
}
 8003c64:	40d8      	lsrs	r0, r3
 8003c66:	4770      	bx	lr
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	0800529c 	.word	0x0800529c

08003c74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c74:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8003c76:	4a05      	ldr	r2, [pc, #20]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	4905      	ldr	r1, [pc, #20]	; (8003c90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003c7c:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003c80:	5ccb      	ldrb	r3, [r1, r3]
 8003c82:	6810      	ldr	r0, [r2, #0]
}
 8003c84:	40d8      	lsrs	r0, r3
 8003c86:	4770      	bx	lr
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	20000000 	.word	0x20000000
 8003c90:	0800529c 	.word	0x0800529c

08003c94 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c98:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c9a:	6800      	ldr	r0, [r0, #0]
{
 8003c9c:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c9e:	07c1      	lsls	r1, r0, #31
 8003ca0:	d52c      	bpl.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x68>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ca2:	4b3a      	ldr	r3, [pc, #232]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	00d2      	lsls	r2, r2, #3
 8003ca8:	d53f      	bpl.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003caa:	4d39      	ldr	r5, [pc, #228]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
    FlagStatus pwrclkchanged = RESET;
 8003cac:	2600      	movs	r6, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cae:	682b      	ldr	r3, [r5, #0]
 8003cb0:	05df      	lsls	r7, r3, #23
 8003cb2:	d548      	bpl.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003cb4:	4d35      	ldr	r5, [pc, #212]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003cb6:	6a2b      	ldr	r3, [r5, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003cb8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8003cbc:	d011      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003cbe:	6861      	ldr	r1, [r4, #4]
 8003cc0:	f401 7240 	and.w	r2, r1, #768	; 0x300
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d00d      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cc8:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cca:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ccc:	6a2b      	ldr	r3, [r5, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cce:	4a31      	ldr	r2, [pc, #196]	; (8003d94 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8003cd4:	f8c2 7440 	str.w	r7, [r2, #1088]	; 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cd8:	f8c2 0440 	str.w	r0, [r2, #1088]	; 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003cdc:	6229      	str	r1, [r5, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cde:	07d9      	lsls	r1, r3, #31
 8003ce0:	d444      	bmi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0xd8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce2:	6861      	ldr	r1, [r4, #4]
 8003ce4:	4a29      	ldr	r2, [pc, #164]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003ce6:	6a13      	ldr	r3, [r2, #32]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cec:	430b      	orrs	r3, r1
 8003cee:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003cf0:	b11e      	cbz	r6, 8003cfa <HAL_RCCEx_PeriphCLKConfig+0x66>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf2:	69d3      	ldr	r3, [r2, #28]
 8003cf4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cfa:	6820      	ldr	r0, [r4, #0]
 8003cfc:	0783      	lsls	r3, r0, #30
 8003cfe:	d506      	bpl.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d00:	4922      	ldr	r1, [pc, #136]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003d02:	68a3      	ldr	r3, [r4, #8]
 8003d04:	684a      	ldr	r2, [r1, #4]
 8003d06:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8003d0a:	431a      	orrs	r2, r3
 8003d0c:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d0e:	f010 0010 	ands.w	r0, r0, #16
 8003d12:	d007      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003d14:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d16:	4a1d      	ldr	r2, [pc, #116]	; (8003d8c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 8003d18:	68e1      	ldr	r1, [r4, #12]
 8003d1a:	6853      	ldr	r3, [r2, #4]
 8003d1c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6053      	str	r3, [r2, #4]
}
 8003d24:	b002      	add	sp, #8
 8003d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2a:	69da      	ldr	r2, [r3, #28]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	4d18      	ldr	r5, [pc, #96]	; (8003d90 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d32:	61da      	str	r2, [r3, #28]
 8003d34:	69db      	ldr	r3, [r3, #28]
      pwrclkchanged = SET;
 8003d36:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	05df      	lsls	r7, r3, #23
 8003d44:	d4b6      	bmi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	682b      	ldr	r3, [r5, #0]
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003d4e:	f7fe f9b3 	bl	80020b8 <HAL_GetTick>
 8003d52:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	05d8      	lsls	r0, r3, #23
 8003d58:	d4ac      	bmi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fe f9ad 	bl	80020b8 <HAL_GetTick>
 8003d5e:	1bc3      	subs	r3, r0, r7
 8003d60:	2b64      	cmp	r3, #100	; 0x64
 8003d62:	d9f7      	bls.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
          return HAL_TIMEOUT;
 8003d64:	2003      	movs	r0, #3
}
 8003d66:	b002      	add	sp, #8
 8003d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 8003d6c:	f7fe f9a4 	bl	80020b8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d70:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8003d74:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d76:	e004      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xee>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d78:	f7fe f99e 	bl	80020b8 <HAL_GetTick>
 8003d7c:	1bc0      	subs	r0, r0, r7
 8003d7e:	4540      	cmp	r0, r8
 8003d80:	d8f0      	bhi.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xd0>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d82:	6a2b      	ldr	r3, [r5, #32]
 8003d84:	079a      	lsls	r2, r3, #30
 8003d86:	d5f7      	bpl.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 8003d88:	e7ab      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d8a:	bf00      	nop
 8003d8c:	40021000 	.word	0x40021000
 8003d90:	40007000 	.word	0x40007000
 8003d94:	42420000 	.word	0x42420000

08003d98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d98:	4684      	mov	ip, r0
 8003d9a:	b500      	push	{lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003d9c:	4b36      	ldr	r3, [pc, #216]	; (8003e78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
{
 8003d9e:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003da0:	f10d 0e18 	add.w	lr, sp, #24
 8003da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003da6:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
{
 8003daa:	4660      	mov	r0, ip
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003dac:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003db0:	2802      	cmp	r0, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003db2:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8003db6:	d007      	beq.n	8003dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>
 8003db8:	2810      	cmp	r0, #16
 8003dba:	d02a      	beq.n	8003e12 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003dbc:	2801      	cmp	r0, #1
 8003dbe:	d010      	beq.n	8003de2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
  uint32_t temp_reg = 0U, frequency = 0U;
 8003dc0:	2000      	movs	r0, #0
    {
      break;
    }
  }
  return (frequency);
}
 8003dc2:	b007      	add	sp, #28
 8003dc4:	f85d fb04 	ldr.w	pc, [sp], #4
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003dc8:	f7ff ff54 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 8003dcc:	4b2b      	ldr	r3, [pc, #172]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8003ddc:	b007      	add	sp, #28
 8003dde:	f85d fb04 	ldr.w	pc, [sp], #4
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003de2:	f240 3202 	movw	r2, #770	; 0x302
      temp_reg = RCC->BDCR;
 8003de6:	4925      	ldr	r1, [pc, #148]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003de8:	6a0b      	ldr	r3, [r1, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003dea:	401a      	ands	r2, r3
 8003dec:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
 8003df0:	d033      	beq.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dfa:	d031      	beq.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0xc8>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003dfc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e00:	d1de      	bne.n	8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
        frequency = HSE_VALUE / 128U;
 8003e02:	f24f 4324 	movw	r3, #62500	; 0xf424
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003e06:	6808      	ldr	r0, [r1, #0]
        frequency = HSE_VALUE / 128U;
 8003e08:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8003e0c:	bf18      	it	ne
 8003e0e:	4618      	movne	r0, r3
 8003e10:	e7d7      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
      temp_reg = RCC->CFGR;
 8003e12:	4b1a      	ldr	r3, [pc, #104]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003e14:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003e1c:	d0d1      	beq.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e1e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8003e22:	3118      	adds	r1, #24
 8003e24:	4469      	add	r1, sp
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e26:	03d2      	lsls	r2, r2, #15
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e28:	f811 0c10 	ldrb.w	r0, [r1, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e2c:	d520      	bpl.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e2e:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e30:	4a13      	ldr	r2, [pc, #76]	; (8003e80 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e32:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8003e36:	3318      	adds	r3, #24
 8003e38:	446b      	add	r3, sp
 8003e3a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e42:	fb03 f000 	mul.w	r0, r3, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003e46:	4b0d      	ldr	r3, [pc, #52]	; (8003e7c <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	025b      	lsls	r3, r3, #9
 8003e4c:	d4b9      	bmi.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          frequency = (pllclk * 2) / 3;
 8003e4e:	4b0d      	ldr	r3, [pc, #52]	; (8003e84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>)
 8003e50:	0040      	lsls	r0, r0, #1
 8003e52:	fba3 3000 	umull	r3, r0, r3, r0
 8003e56:	0840      	lsrs	r0, r0, #1
 8003e58:	e7b3      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSE_VALUE;
 8003e5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003e5e:	e7b0      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
        frequency = LSI_VALUE;
 8003e60:	f649 4340 	movw	r3, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003e64:	6a48      	ldr	r0, [r1, #36]	; 0x24
        frequency = LSI_VALUE;
 8003e66:	f010 0002 	ands.w	r0, r0, #2
 8003e6a:	bf18      	it	ne
 8003e6c:	4618      	movne	r0, r3
 8003e6e:	e7a8      	b.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x2a>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e70:	4b05      	ldr	r3, [pc, #20]	; (8003e88 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>)
 8003e72:	fb03 f000 	mul.w	r0, r3, r0
 8003e76:	e7e6      	b.n	8003e46 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
 8003e78:	080052a4 	.word	0x080052a4
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	007a1200 	.word	0x007a1200
 8003e84:	aaaaaaab 	.word	0xaaaaaaab
 8003e88:	003d0900 	.word	0x003d0900

08003e8c <SPI_WaitFlagStateUntilTimeout.constprop.1>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e90:	461d      	mov	r5, r3
 8003e92:	4616      	mov	r6, r2
 8003e94:	b082      	sub	sp, #8
 8003e96:	460c      	mov	r4, r1
 8003e98:	4607      	mov	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e9a:	f7fe f90d 	bl	80020b8 <HAL_GetTick>
 8003e9e:	4435      	add	r5, r6
 8003ea0:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003ea2:	f7fe f909 	bl	80020b8 <HAL_GetTick>
 8003ea6:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ea8:	4b26      	ldr	r3, [pc, #152]	; (8003f44 <SPI_WaitFlagStateUntilTimeout.constprop.1+0xb8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8003eb0:	fb05 f303 	mul.w	r3, r5, r3
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	1c73      	adds	r3, r6, #1

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003eb8:	6839      	ldr	r1, [r7, #0]
 8003eba:	d107      	bne.n	8003ecc <SPI_WaitFlagStateUntilTimeout.constprop.1+0x40>
 8003ebc:	688b      	ldr	r3, [r1, #8]
 8003ebe:	ea34 0303 	bics.w	r3, r4, r3
 8003ec2:	d0fb      	beq.n	8003ebc <SPI_WaitFlagStateUntilTimeout.constprop.1+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8003ec4:	2000      	movs	r0, #0
}
 8003ec6:	b002      	add	sp, #8
 8003ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ecc:	688b      	ldr	r3, [r1, #8]
 8003ece:	ea34 0303 	bics.w	r3, r4, r3
 8003ed2:	d1f7      	bne.n	8003ec4 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ed4:	f7fe f8f0 	bl	80020b8 <HAL_GetTick>
 8003ed8:	eba0 0308 	sub.w	r3, r0, r8
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	d207      	bcs.n	8003ef0 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x64>
      if(count == 0U)
 8003ee0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003ee2:	2b00      	cmp	r3, #0
      count--;
 8003ee4:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003ee6:	bf08      	it	eq
 8003ee8:	2500      	moveq	r5, #0
      count--;
 8003eea:	3b01      	subs	r3, #1
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	e7e2      	b.n	8003eb6 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x2a>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef0:	e9d7 3100 	ldrd	r3, r1, [r7]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ef4:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ef6:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003efa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003efe:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f00:	d014      	beq.n	8003f2c <SPI_WaitFlagStateUntilTimeout.constprop.1+0xa0>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003f04:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003f08:	d007      	beq.n	8003f1a <SPI_WaitFlagStateUntilTimeout.constprop.1+0x8e>
        hspi->State = HAL_SPI_STATE_READY;
 8003f0a:	2201      	movs	r2, #1
        __HAL_UNLOCK(hspi);
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 8003f10:	f887 2051 	strb.w	r2, [r7, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003f14:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        return HAL_TIMEOUT;
 8003f18:	e7d5      	b.n	8003ec6 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x3a>
          SPI_RESET_CRC(hspi);
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f28:	601a      	str	r2, [r3, #0]
 8003f2a:	e7ee      	b.n	8003f0a <SPI_WaitFlagStateUntilTimeout.constprop.1+0x7e>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003f32:	d002      	beq.n	8003f3a <SPI_WaitFlagStateUntilTimeout.constprop.1+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f34:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003f38:	d1e3      	bne.n	8003f02 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x76>
          __HAL_SPI_DISABLE(hspi);
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f40:	601a      	str	r2, [r3, #0]
 8003f42:	e7de      	b.n	8003f02 <SPI_WaitFlagStateUntilTimeout.constprop.1+0x76>
 8003f44:	20000000 	.word	0x20000000

08003f48 <HAL_SPI_Init>:
  if (hspi == NULL)
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d058      	beq.n	8003ffe <HAL_SPI_Init+0xb6>
{
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f4e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003f50:	4604      	mov	r4, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d044      	beq.n	8003fe0 <HAL_SPI_Init+0x98>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f56:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f58:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f5c:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f5e:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f62:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f64:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8003f68:	2a00      	cmp	r2, #0
 8003f6a:	d03f      	beq.n	8003fec <HAL_SPI_Init+0xa4>
 8003f6c:	469c      	mov	ip, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f6e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f72:	2602      	movs	r6, #2
  hspi->State     = HAL_SPI_STATE_READY;
 8003f74:	f04f 0e01 	mov.w	lr, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f78:	2500      	movs	r5, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f7a:	f402 4204 	and.w	r2, r2, #33792	; 0x8400
 8003f7e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003f82:	4313      	orrs	r3, r2
 8003f84:	68e2      	ldr	r2, [r4, #12]
 8003f86:	69a0      	ldr	r0, [r4, #24]
 8003f88:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	6922      	ldr	r2, [r4, #16]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003f90:	f884 6051 	strb.w	r6, [r4, #81]	; 0x51
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f94:	4032      	ands	r2, r6
 8003f96:	4313      	orrs	r3, r2
 8003f98:	6962      	ldr	r2, [r4, #20]
  __HAL_SPI_DISABLE(hspi);
 8003f9a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f9c:	ea02 020e 	and.w	r2, r2, lr
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	69e3      	ldr	r3, [r4, #28]
 8003fa4:	6a26      	ldr	r6, [r4, #32]
 8003fa6:	f003 0738 	and.w	r7, r3, #56	; 0x38
 8003faa:	f400 7300 	and.w	r3, r0, #512	; 0x200
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f006 0680 	and.w	r6, r6, #128	; 0x80
  __HAL_SPI_DISABLE(hspi);
 8003fb4:	680a      	ldr	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fb6:	433b      	orrs	r3, r7
 8003fb8:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fba:	0c00      	lsrs	r0, r0, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fbc:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fc0:	f000 0004 	and.w	r0, r0, #4
  __HAL_SPI_DISABLE(hspi);
 8003fc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fc8:	600a      	str	r2, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003fcc:	6048      	str	r0, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fce:	69cb      	ldr	r3, [r1, #28]
  return HAL_OK;
 8003fd0:	4628      	mov	r0, r5
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fd6:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fd8:	6565      	str	r5, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fda:	f884 e051 	strb.w	lr, [r4, #81]	; 0x51
}
 8003fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fe0:	6842      	ldr	r2, [r0, #4]
 8003fe2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003fe6:	d0b9      	beq.n	8003f5c <HAL_SPI_Init+0x14>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fe8:	61c3      	str	r3, [r0, #28]
 8003fea:	e7b7      	b.n	8003f5c <HAL_SPI_Init+0x14>
    HAL_SPI_MspInit(hspi);
 8003fec:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003fee:	f884 1050 	strb.w	r1, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003ff2:	f7fd fd75 	bl	8001ae0 <HAL_SPI_MspInit>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ff6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ff8:	f403 5c00 	and.w	ip, r3, #8192	; 0x2000
 8003ffc:	e7b7      	b.n	8003f6e <HAL_SPI_Init+0x26>
    return HAL_ERROR;
 8003ffe:	2001      	movs	r0, #1
}
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop

08004004 <HAL_SPI_Transmit>:
{
 8004004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004008:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800400a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800400e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8004010:	2b01      	cmp	r3, #1
 8004012:	d074      	beq.n	80040fe <HAL_SPI_Transmit+0xfa>
 8004014:	2301      	movs	r3, #1
 8004016:	4604      	mov	r4, r0
 8004018:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
 800401c:	4688      	mov	r8, r1
 800401e:	4617      	mov	r7, r2
  tickstart = HAL_GetTick();
 8004020:	f7fe f84a 	bl	80020b8 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004024:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004028:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800402a:	2b01      	cmp	r3, #1
 800402c:	b2d8      	uxtb	r0, r3
 800402e:	d009      	beq.n	8004044 <HAL_SPI_Transmit+0x40>
    errorcode = HAL_BUSY;
 8004030:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8004032:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 8004034:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 8004036:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800403a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800403e:	b002      	add	sp, #8
 8004040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 8004044:	f1b8 0f00 	cmp.w	r8, #0
 8004048:	d0f3      	beq.n	8004032 <HAL_SPI_Transmit+0x2e>
 800404a:	2f00      	cmp	r7, #0
 800404c:	d0f1      	beq.n	8004032 <HAL_SPI_Transmit+0x2e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800404e:	2300      	movs	r3, #0
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004050:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004052:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004054:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  hspi->RxXferSize  = 0U;
 8004058:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800405a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 800405c:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->TxXferCount = Size;
 800405e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004060:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferCount = 0U;
 8004062:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004064:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004066:	6820      	ldr	r0, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800406c:	4602      	mov	r2, r0
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800406e:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004072:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004074:	d076      	beq.n	8004164 <HAL_SPI_Transmit+0x160>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004076:	6803      	ldr	r3, [r0, #0]
 8004078:	065b      	lsls	r3, r3, #25
 800407a:	d403      	bmi.n	8004084 <HAL_SPI_Transmit+0x80>
    __HAL_SPI_ENABLE(hspi);
 800407c:	6803      	ldr	r3, [r0, #0]
 800407e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004082:	6003      	str	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004084:	68e3      	ldr	r3, [r4, #12]
 8004086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408a:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800408c:	d03b      	beq.n	8004106 <HAL_SPI_Transmit+0x102>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 808a 	beq.w	80041a8 <HAL_SPI_Transmit+0x1a4>
 8004094:	2f01      	cmp	r7, #1
 8004096:	f000 8087 	beq.w	80041a8 <HAL_SPI_Transmit+0x1a4>
    while (hspi->TxXferCount > 0U)
 800409a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800409c:	b29b      	uxth	r3, r3
 800409e:	b1bb      	cbz	r3, 80040d0 <HAL_SPI_Transmit+0xcc>
 80040a0:	2d00      	cmp	r5, #0
 80040a2:	f000 80be 	beq.w	8004222 <HAL_SPI_Transmit+0x21e>
 80040a6:	1c6f      	adds	r7, r5, #1
 80040a8:	d173      	bne.n	8004192 <HAL_SPI_Transmit+0x18e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	689a      	ldr	r2, [r3, #8]
 80040ae:	0790      	lsls	r0, r2, #30
 80040b0:	f140 8085 	bpl.w	80041be <HAL_SPI_Transmit+0x1ba>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80040b6:	7812      	ldrb	r2, [r2, #0]
 80040b8:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 80040ba:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80040be:	3901      	subs	r1, #1
 80040c0:	b289      	uxth	r1, r1
 80040c2:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80040c4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040c6:	3301      	adds	r3, #1
    while (hspi->TxXferCount > 0U)
 80040c8:	b289      	uxth	r1, r1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80040ca:	6323      	str	r3, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 80040cc:	2900      	cmp	r1, #0
 80040ce:	d1ec      	bne.n	80040aa <HAL_SPI_Transmit+0xa6>
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040d0:	4633      	mov	r3, r6
 80040d2:	462a      	mov	r2, r5
 80040d4:	2180      	movs	r1, #128	; 0x80
 80040d6:	4620      	mov	r0, r4
 80040d8:	f7ff fed8 	bl	8003e8c <SPI_WaitFlagStateUntilTimeout.constprop.1>
 80040dc:	2800      	cmp	r0, #0
 80040de:	f040 80b9 	bne.w	8004254 <HAL_SPI_Transmit+0x250>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040e2:	68a3      	ldr	r3, [r4, #8]
 80040e4:	b933      	cbnz	r3, 80040f4 <HAL_SPI_Transmit+0xf0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040e6:	6822      	ldr	r2, [r4, #0]
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	68d3      	ldr	r3, [r2, #12]
 80040ec:	9301      	str	r3, [sp, #4]
 80040ee:	6893      	ldr	r3, [r2, #8]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040f4:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 80040f6:	3800      	subs	r0, #0
 80040f8:	bf18      	it	ne
 80040fa:	2001      	movne	r0, #1
error:
 80040fc:	e799      	b.n	8004032 <HAL_SPI_Transmit+0x2e>
  __HAL_LOCK(hspi);
 80040fe:	2002      	movs	r0, #2
}
 8004100:	b002      	add	sp, #8
 8004102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004106:	2b00      	cmp	r3, #0
 8004108:	d179      	bne.n	80041fe <HAL_SPI_Transmit+0x1fa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800410a:	4641      	mov	r1, r8
 800410c:	f831 3b02 	ldrh.w	r3, [r1], #2
 8004110:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 8004112:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004114:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004116:	3b01      	subs	r3, #1
 8004118:	b29b      	uxth	r3, r3
 800411a:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800411c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0d5      	beq.n	80040d0 <HAL_SPI_Transmit+0xcc>
 8004124:	2d00      	cmp	r5, #0
 8004126:	f000 8091 	beq.w	800424c <HAL_SPI_Transmit+0x248>
 800412a:	1c69      	adds	r1, r5, #1
 800412c:	d15e      	bne.n	80041ec <HAL_SPI_Transmit+0x1e8>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800412e:	6883      	ldr	r3, [r0, #8]
 8004130:	079a      	lsls	r2, r3, #30
 8004132:	d50f      	bpl.n	8004154 <HAL_SPI_Transmit+0x150>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004134:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004136:	f832 3b02 	ldrh.w	r3, [r2], #2
 800413a:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 800413c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800413e:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004140:	3b01      	subs	r3, #1
 8004142:	b29b      	uxth	r3, r3
 8004144:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004146:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0c0      	beq.n	80040d0 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800414e:	6883      	ldr	r3, [r0, #8]
 8004150:	079a      	lsls	r2, r3, #30
 8004152:	d4ef      	bmi.n	8004134 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004154:	f7fd ffb0 	bl	80020b8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8004158:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	d0b7      	beq.n	80040d0 <HAL_SPI_Transmit+0xcc>
 8004160:	6820      	ldr	r0, [r4, #0]
 8004162:	e7e4      	b.n	800412e <HAL_SPI_Transmit+0x12a>
    __HAL_SPI_DISABLE(hspi);
 8004164:	6803      	ldr	r3, [r0, #0]
 8004166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800416a:	6003      	str	r3, [r0, #0]
    SPI_1LINE_TX(hspi);
 800416c:	6803      	ldr	r3, [r0, #0]
 800416e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004172:	6003      	str	r3, [r0, #0]
 8004174:	e77f      	b.n	8004076 <HAL_SPI_Transmit+0x72>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004176:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004178:	7812      	ldrb	r2, [r2, #0]
 800417a:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800417c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800417e:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004180:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004182:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 8004184:	b29b      	uxth	r3, r3
 8004186:	86e3      	strh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004188:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800418a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d09e      	beq.n	80040d0 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004192:	6823      	ldr	r3, [r4, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	0791      	lsls	r1, r2, #30
 8004198:	d4ed      	bmi.n	8004176 <HAL_SPI_Transmit+0x172>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800419a:	f7fd ff8d 	bl	80020b8 <HAL_GetTick>
 800419e:	1b83      	subs	r3, r0, r6
 80041a0:	429d      	cmp	r5, r3
 80041a2:	d8f2      	bhi.n	800418a <HAL_SPI_Transmit+0x186>
          errorcode = HAL_TIMEOUT;
 80041a4:	2003      	movs	r0, #3
 80041a6:	e744      	b.n	8004032 <HAL_SPI_Transmit+0x2e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041a8:	f898 3000 	ldrb.w	r3, [r8]
 80041ac:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 80041ae:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b0:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80041b2:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b4:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80041b6:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041b8:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80041ba:	86e3      	strh	r3, [r4, #54]	; 0x36
 80041bc:	e76d      	b.n	800409a <HAL_SPI_Transmit+0x96>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041be:	f7fd ff7b 	bl	80020b8 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 80041c2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f47f af6f 	bne.w	80040aa <HAL_SPI_Transmit+0xa6>
 80041cc:	e780      	b.n	80040d0 <HAL_SPI_Transmit+0xcc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80041ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80041d0:	f831 3b02 	ldrh.w	r3, [r1], #2
 80041d4:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80041d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d8:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80041da:	3b01      	subs	r3, #1
 80041dc:	b29b      	uxth	r3, r3
 80041de:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80041e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f43f af73 	beq.w	80040d0 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80041ea:	6822      	ldr	r2, [r4, #0]
 80041ec:	6893      	ldr	r3, [r2, #8]
 80041ee:	079b      	lsls	r3, r3, #30
 80041f0:	d4ed      	bmi.n	80041ce <HAL_SPI_Transmit+0x1ca>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041f2:	f7fd ff61 	bl	80020b8 <HAL_GetTick>
 80041f6:	1b83      	subs	r3, r0, r6
 80041f8:	429d      	cmp	r5, r3
 80041fa:	d9d3      	bls.n	80041a4 <HAL_SPI_Transmit+0x1a0>
 80041fc:	e7f0      	b.n	80041e0 <HAL_SPI_Transmit+0x1dc>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041fe:	2f01      	cmp	r7, #1
 8004200:	d18c      	bne.n	800411c <HAL_SPI_Transmit+0x118>
 8004202:	e782      	b.n	800410a <HAL_SPI_Transmit+0x106>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004204:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004206:	7812      	ldrb	r2, [r2, #0]
 8004208:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800420a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800420c:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800420e:	3b01      	subs	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004214:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004216:	3201      	adds	r2, #1
    while (hspi->TxXferCount > 0U)
 8004218:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800421a:	6322      	str	r2, [r4, #48]	; 0x30
    while (hspi->TxXferCount > 0U)
 800421c:	2b00      	cmp	r3, #0
 800421e:	f43f af57 	beq.w	80040d0 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004222:	6823      	ldr	r3, [r4, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	0792      	lsls	r2, r2, #30
 8004228:	d4ec      	bmi.n	8004204 <HAL_SPI_Transmit+0x200>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800422a:	f7fd ff45 	bl	80020b8 <HAL_GetTick>
 800422e:	e7b9      	b.n	80041a4 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004230:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004232:	f832 3b02 	ldrh.w	r3, [r2], #2
 8004236:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount--;
 8004238:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800423a:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800423c:	3b01      	subs	r3, #1
 800423e:	b29b      	uxth	r3, r3
 8004240:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8004242:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	f43f af42 	beq.w	80040d0 <HAL_SPI_Transmit+0xcc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800424c:	6883      	ldr	r3, [r0, #8]
 800424e:	079f      	lsls	r7, r3, #30
 8004250:	d5eb      	bpl.n	800422a <HAL_SPI_Transmit+0x226>
 8004252:	e7ed      	b.n	8004230 <HAL_SPI_Transmit+0x22c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004254:	2220      	movs	r2, #32
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004256:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004258:	4313      	orrs	r3, r2
 800425a:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425c:	6562      	str	r2, [r4, #84]	; 0x54
 800425e:	e740      	b.n	80040e2 <HAL_SPI_Transmit+0xde>

08004260 <HAL_SPI_TransmitReceive>:
{
 8004260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004264:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8004266:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
{
 800426a:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 800426c:	2801      	cmp	r0, #1
{
 800426e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8004270:	f000 8089 	beq.w	8004386 <HAL_SPI_TransmitReceive+0x126>
 8004274:	4698      	mov	r8, r3
 8004276:	2301      	movs	r3, #1
 8004278:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 800427c:	468a      	mov	sl, r1
 800427e:	4691      	mov	r9, r2
 8004280:	f7fd ff1a 	bl	80020b8 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004284:	f894 7051 	ldrb.w	r7, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8004288:	4606      	mov	r6, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800428a:	2f01      	cmp	r7, #1
  tmp_mode            = hspi->Init.Mode;
 800428c:	6863      	ldr	r3, [r4, #4]
  tmp_state           = hspi->State;
 800428e:	b2f9      	uxtb	r1, r7
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004290:	d011      	beq.n	80042b6 <HAL_SPI_TransmitReceive+0x56>
 8004292:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004296:	d009      	beq.n	80042ac <HAL_SPI_TransmitReceive+0x4c>
    errorcode = HAL_BUSY;
 8004298:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800429a:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800429c:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800429e:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042a2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80042a6:	b002      	add	sp, #8
 80042a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80042ac:	68a2      	ldr	r2, [r4, #8]
 80042ae:	2a00      	cmp	r2, #0
 80042b0:	d1f2      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x38>
 80042b2:	2904      	cmp	r1, #4
 80042b4:	d1f0      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x38>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042b6:	f1ba 0f00 	cmp.w	sl, #0
 80042ba:	d068      	beq.n	800438e <HAL_SPI_TransmitReceive+0x12e>
 80042bc:	f1b9 0f00 	cmp.w	r9, #0
 80042c0:	d065      	beq.n	800438e <HAL_SPI_TransmitReceive+0x12e>
 80042c2:	f1b8 0f00 	cmp.w	r8, #0
 80042c6:	d062      	beq.n	800438e <HAL_SPI_TransmitReceive+0x12e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042c8:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042cc:	6820      	ldr	r0, [r4, #0]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042ce:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042d0:	bf1c      	itt	ne
 80042d2:	2205      	movne	r2, #5
 80042d4:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042d8:	2200      	movs	r2, #0
 80042da:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->RxXferCount = Size;
 80042dc:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 80042e0:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80042e4:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e8:	6802      	ldr	r2, [r0, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042ea:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042ee:	0652      	lsls	r2, r2, #25
  hspi->RxXferSize  = Size;
 80042f0:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042f4:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042f8:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042fc:	d403      	bmi.n	8004306 <HAL_SPI_TransmitReceive+0xa6>
    __HAL_SPI_ENABLE(hspi);
 80042fe:	6802      	ldr	r2, [r0, #0]
 8004300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004304:	6002      	str	r2, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004306:	68e2      	ldr	r2, [r4, #12]
 8004308:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800430c:	d04f      	beq.n	80043ae <HAL_SPI_TransmitReceive+0x14e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	2b00      	cmp	r3, #0
 8004310:	d03f      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x132>
 8004312:	f1b8 0f01 	cmp.w	r8, #1
 8004316:	d03c      	beq.n	8004392 <HAL_SPI_TransmitReceive+0x132>
        txallowed = 1U;
 8004318:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800431c:	b292      	uxth	r2, r2
 800431e:	b91a      	cbnz	r2, 8004328 <HAL_SPI_TransmitReceive+0xc8>
 8004320:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d07f      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x1c8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004328:	6823      	ldr	r3, [r4, #0]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	0792      	lsls	r2, r2, #30
 800432e:	d50f      	bpl.n	8004350 <HAL_SPI_TransmitReceive+0xf0>
 8004330:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8004332:	b292      	uxth	r2, r2
 8004334:	b162      	cbz	r2, 8004350 <HAL_SPI_TransmitReceive+0xf0>
 8004336:	b15f      	cbz	r7, 8004350 <HAL_SPI_TransmitReceive+0xf0>
        txallowed = 0U;
 8004338:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800433a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 8004340:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr++;
 8004342:	6b22      	ldr	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004344:	3b01      	subs	r3, #1
 8004346:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr++;
 8004348:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800434a:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800434c:	6823      	ldr	r3, [r4, #0]
        hspi->pTxBuffPtr++;
 800434e:	6322      	str	r2, [r4, #48]	; 0x30
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004350:	689a      	ldr	r2, [r3, #8]
 8004352:	f012 0201 	ands.w	r2, r2, #1
 8004356:	d00d      	beq.n	8004374 <HAL_SPI_TransmitReceive+0x114>
 8004358:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800435a:	b289      	uxth	r1, r1
 800435c:	b151      	cbz	r1, 8004374 <HAL_SPI_TransmitReceive+0x114>
        txallowed = 1U;
 800435e:	4617      	mov	r7, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004360:	68da      	ldr	r2, [r3, #12]
 8004362:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004364:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004366:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004368:	3301      	adds	r3, #1
 800436a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800436c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800436e:	3b01      	subs	r3, #1
 8004370:	b29b      	uxth	r3, r3
 8004372:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004374:	f7fd fea0 	bl	80020b8 <HAL_GetTick>
 8004378:	1b80      	subs	r0, r0, r6
 800437a:	42a8      	cmp	r0, r5
 800437c:	d314      	bcc.n	80043a8 <HAL_SPI_TransmitReceive+0x148>
 800437e:	1c6b      	adds	r3, r5, #1
 8004380:	d0cb      	beq.n	800431a <HAL_SPI_TransmitReceive+0xba>
        errorcode = HAL_TIMEOUT;
 8004382:	2003      	movs	r0, #3
 8004384:	e789      	b.n	800429a <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8004386:	2002      	movs	r0, #2
}
 8004388:	b002      	add	sp, #8
 800438a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    errorcode = HAL_ERROR;
 800438e:	2001      	movs	r0, #1
 8004390:	e783      	b.n	800429a <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004392:	f89a 3000 	ldrb.w	r3, [sl]
 8004396:	7303      	strb	r3, [r0, #12]
      hspi->TxXferCount--;
 8004398:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800439a:	6b22      	ldr	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800439c:	3b01      	subs	r3, #1
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800439e:	3201      	adds	r2, #1
      hspi->TxXferCount--;
 80043a0:	b29b      	uxth	r3, r3
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043a2:	6322      	str	r2, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80043a4:	86e3      	strh	r3, [r4, #54]	; 0x36
 80043a6:	e7b7      	b.n	8004318 <HAL_SPI_TransmitReceive+0xb8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80043a8:	2d00      	cmp	r5, #0
 80043aa:	d1b6      	bne.n	800431a <HAL_SPI_TransmitReceive+0xba>
 80043ac:	e7e9      	b.n	8004382 <HAL_SPI_TransmitReceive+0x122>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d14e      	bne.n	8004450 <HAL_SPI_TransmitReceive+0x1f0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b2:	4651      	mov	r1, sl
 80043b4:	f831 3b02 	ldrh.w	r3, [r1], #2
 80043b8:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80043ba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043bc:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	86e3      	strh	r3, [r4, #54]	; 0x36
 80043c4:	1c6b      	adds	r3, r5, #1
{
 80043c6:	f04f 0701 	mov.w	r7, #1
 80043ca:	d025      	beq.n	8004418 <HAL_SPI_TransmitReceive+0x1b8>
 80043cc:	e044      	b.n	8004458 <HAL_SPI_TransmitReceive+0x1f8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	6893      	ldr	r3, [r2, #8]
 80043d2:	0798      	lsls	r0, r3, #30
 80043d4:	d50d      	bpl.n	80043f2 <HAL_SPI_TransmitReceive+0x192>
 80043d6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80043d8:	b29b      	uxth	r3, r3
 80043da:	b153      	cbz	r3, 80043f2 <HAL_SPI_TransmitReceive+0x192>
 80043dc:	b14f      	cbz	r7, 80043f2 <HAL_SPI_TransmitReceive+0x192>
        txallowed = 0U;
 80043de:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80043e2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80043e6:	60d3      	str	r3, [r2, #12]
        hspi->TxXferCount--;
 80043e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ea:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043f2:	6893      	ldr	r3, [r2, #8]
 80043f4:	f013 0301 	ands.w	r3, r3, #1
 80043f8:	d00c      	beq.n	8004414 <HAL_SPI_TransmitReceive+0x1b4>
 80043fa:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80043fc:	b289      	uxth	r1, r1
 80043fe:	b149      	cbz	r1, 8004414 <HAL_SPI_TransmitReceive+0x1b4>
        txallowed = 1U;
 8004400:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004402:	68d3      	ldr	r3, [r2, #12]
 8004404:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004406:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 800440a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800440c:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800440e:	3b01      	subs	r3, #1
 8004410:	b29b      	uxth	r3, r3
 8004412:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004414:	f7fd fe50 	bl	80020b8 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004418:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800441a:	b29b      	uxth	r3, r3
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1d6      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x16e>
 8004420:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004422:	b29b      	uxth	r3, r3
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1d2      	bne.n	80043ce <HAL_SPI_TransmitReceive+0x16e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004428:	4633      	mov	r3, r6
 800442a:	462a      	mov	r2, r5
 800442c:	2180      	movs	r1, #128	; 0x80
 800442e:	4620      	mov	r0, r4
 8004430:	f7ff fd2c 	bl	8003e8c <SPI_WaitFlagStateUntilTimeout.constprop.1>
 8004434:	2800      	cmp	r0, #0
 8004436:	d13f      	bne.n	80044b8 <HAL_SPI_TransmitReceive+0x258>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004438:	68a3      	ldr	r3, [r4, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	f47f af2d 	bne.w	800429a <HAL_SPI_TransmitReceive+0x3a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	9001      	str	r0, [sp, #4]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	9201      	str	r2, [sp, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	9b01      	ldr	r3, [sp, #4]
 800444e:	e724      	b.n	800429a <HAL_SPI_TransmitReceive+0x3a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004450:	f1b8 0f01 	cmp.w	r8, #1
 8004454:	d1b6      	bne.n	80043c4 <HAL_SPI_TransmitReceive+0x164>
 8004456:	e7ac      	b.n	80043b2 <HAL_SPI_TransmitReceive+0x152>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004458:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	b91b      	cbnz	r3, 8004466 <HAL_SPI_TransmitReceive+0x206>
 800445e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0e0      	beq.n	8004428 <HAL_SPI_TransmitReceive+0x1c8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004466:	6822      	ldr	r2, [r4, #0]
 8004468:	6893      	ldr	r3, [r2, #8]
 800446a:	0799      	lsls	r1, r3, #30
 800446c:	d50d      	bpl.n	800448a <HAL_SPI_TransmitReceive+0x22a>
 800446e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004470:	b29b      	uxth	r3, r3
 8004472:	b153      	cbz	r3, 800448a <HAL_SPI_TransmitReceive+0x22a>
 8004474:	b14f      	cbz	r7, 800448a <HAL_SPI_TransmitReceive+0x22a>
        txallowed = 0U;
 8004476:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004478:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800447a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800447e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004480:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004482:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004484:	3b01      	subs	r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800448a:	6893      	ldr	r3, [r2, #8]
 800448c:	f013 0301 	ands.w	r3, r3, #1
 8004490:	d00c      	beq.n	80044ac <HAL_SPI_TransmitReceive+0x24c>
 8004492:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8004494:	b289      	uxth	r1, r1
 8004496:	b149      	cbz	r1, 80044ac <HAL_SPI_TransmitReceive+0x24c>
        txallowed = 1U;
 8004498:	461f      	mov	r7, r3
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800449a:	68d3      	ldr	r3, [r2, #12]
 800449c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800449e:	f822 3b02 	strh.w	r3, [r2], #2
        hspi->RxXferCount--;
 80044a2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80044a4:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80044a6:	3b01      	subs	r3, #1
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80044ac:	f7fd fe04 	bl	80020b8 <HAL_GetTick>
 80044b0:	1b80      	subs	r0, r0, r6
 80044b2:	42a8      	cmp	r0, r5
 80044b4:	d3d0      	bcc.n	8004458 <HAL_SPI_TransmitReceive+0x1f8>
 80044b6:	e764      	b.n	8004382 <HAL_SPI_TransmitReceive+0x122>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044b8:	2220      	movs	r2, #32
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80044bc:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044be:	4313      	orrs	r3, r2
 80044c0:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80044c2:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 80044c4:	e6e9      	b.n	800429a <HAL_SPI_TransmitReceive+0x3a>
 80044c6:	bf00      	nop

080044c8 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d066      	beq.n	800459a <HAL_TIM_Base_Init+0xd2>
{
 80044cc:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80044d2:	4604      	mov	r4, r0
 80044d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d045      	beq.n	8004568 <HAL_TIM_Base_Init+0xa0>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044de:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e0:	492f      	ldr	r1, [pc, #188]	; (80045a0 <HAL_TIM_Base_Init+0xd8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80044e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e6:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80044e8:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044ea:	d042      	beq.n	8004572 <HAL_TIM_Base_Init+0xaa>
 80044ec:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80044f0:	d011      	beq.n	8004516 <HAL_TIM_Base_Init+0x4e>
 80044f2:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 80044f6:	428a      	cmp	r2, r1
 80044f8:	d00d      	beq.n	8004516 <HAL_TIM_Base_Init+0x4e>
 80044fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80044fe:	428a      	cmp	r2, r1
 8004500:	d009      	beq.n	8004516 <HAL_TIM_Base_Init+0x4e>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004502:	69a0      	ldr	r0, [r4, #24]
 8004504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004508:	4303      	orrs	r3, r0

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800450a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800450c:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800450e:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004510:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004512:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004514:	e010      	b.n	8004538 <HAL_TIM_Base_Init+0x70>
    tmpcr1 |= Structure->CounterMode;
 8004516:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800451e:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8004520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004524:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004526:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004528:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800452c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004530:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004532:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004534:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004536:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004538:	2301      	movs	r3, #1
 800453a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004544:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004548:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800454c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004558:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800455c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004560:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004564:	2000      	movs	r0, #0
}
 8004566:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004568:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800456c:	f7fd fbde 	bl	8001d2c <HAL_TIM_Base_MspInit>
 8004570:	e7b4      	b.n	80044dc <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004572:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004578:	6921      	ldr	r1, [r4, #16]
    tmpcr1 |= Structure->CounterMode;
 800457a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004580:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004582:	69a1      	ldr	r1, [r4, #24]
 8004584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004588:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800458a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800458c:	68e3      	ldr	r3, [r4, #12]
 800458e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004590:	6863      	ldr	r3, [r4, #4]
 8004592:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004594:	6963      	ldr	r3, [r4, #20]
 8004596:	6313      	str	r3, [r2, #48]	; 0x30
 8004598:	e7ce      	b.n	8004538 <HAL_TIM_Base_Init+0x70>
    return HAL_ERROR;
 800459a:	2001      	movs	r0, #1
}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40012c00 	.word	0x40012c00

080045a4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80045a4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d11f      	bne.n	80045ec <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045ae:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045b4:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b6:	490f      	ldr	r1, [pc, #60]	; (80045f4 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045b8:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045bc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045be:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c0:	d009      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x32>
 80045c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c6:	d006      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x32>
 80045c8:	4a0b      	ldr	r2, [pc, #44]	; (80045f8 <HAL_TIM_Base_Start_IT+0x54>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_Base_Start_IT+0x32>
 80045ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d104      	bne.n	80045e0 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045d6:	689a      	ldr	r2, [r3, #8]
 80045d8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045dc:	2a06      	cmp	r2, #6
 80045de:	d007      	beq.n	80045f0 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 80045e0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80045e2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 80045e4:	f042 0201 	orr.w	r2, r2, #1
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	4770      	bx	lr
    return HAL_ERROR;
 80045ec:	2001      	movs	r0, #1
 80045ee:	4770      	bx	lr
  return HAL_OK;
 80045f0:	2000      	movs	r0, #0
}
 80045f2:	4770      	bx	lr
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40000400 	.word	0x40000400

080045fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80045fc:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8004600:	2a01      	cmp	r2, #1
 8004602:	d075      	beq.n	80046f0 <HAL_TIM_ConfigClockSource+0xf4>
{
 8004604:	b430      	push	{r4, r5}
 8004606:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8004608:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800460a:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 800460c:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(htim);
 800460e:	f883 403c 	strb.w	r4, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8004616:	6884      	ldr	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004618:	680a      	ldr	r2, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800461a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800461e:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 8004622:	2a60      	cmp	r2, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8004624:	6084      	str	r4, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8004626:	d065      	beq.n	80046f4 <HAL_TIM_ConfigClockSource+0xf8>
 8004628:	d831      	bhi.n	800468e <HAL_TIM_ConfigClockSource+0x92>
 800462a:	2a40      	cmp	r2, #64	; 0x40
 800462c:	d048      	beq.n	80046c0 <HAL_TIM_ConfigClockSource+0xc4>
 800462e:	d921      	bls.n	8004674 <HAL_TIM_ConfigClockSource+0x78>
 8004630:	2a50      	cmp	r2, #80	; 0x50
 8004632:	d116      	bne.n	8004662 <HAL_TIM_ConfigClockSource+0x66>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004634:	684c      	ldr	r4, [r1, #4]
 8004636:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004638:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 800463e:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004640:	6a04      	ldr	r4, [r0, #32]
 8004642:	f024 0401 	bic.w	r4, r4, #1
 8004646:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004648:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800464a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800464e:	ea42 1205 	orr.w	r2, r2, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004652:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004654:	6201      	str	r1, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004656:	6882      	ldr	r2, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004658:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800465c:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004660:	6082      	str	r2, [r0, #8]
  __HAL_UNLOCK(htim);
 8004662:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8004664:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800466a:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
  return HAL_OK;
 800466e:	4610      	mov	r0, r2
}
 8004670:	bc30      	pop	{r4, r5}
 8004672:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8004674:	2a20      	cmp	r2, #32
 8004676:	d002      	beq.n	800467e <HAL_TIM_ConfigClockSource+0x82>
 8004678:	d91e      	bls.n	80046b8 <HAL_TIM_ConfigClockSource+0xbc>
 800467a:	2a30      	cmp	r2, #48	; 0x30
 800467c:	d1f1      	bne.n	8004662 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr = TIMx->SMCR;
 800467e:	6881      	ldr	r1, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004680:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004684:	430a      	orrs	r2, r1
 8004686:	f042 0207 	orr.w	r2, r2, #7
  TIMx->SMCR = tmpsmcr;
 800468a:	6082      	str	r2, [r0, #8]
}
 800468c:	e7e9      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800468e:	2a70      	cmp	r2, #112	; 0x70
 8004690:	d049      	beq.n	8004726 <HAL_TIM_ConfigClockSource+0x12a>
 8004692:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004696:	d1e4      	bne.n	8004662 <HAL_TIM_ConfigClockSource+0x66>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004698:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800469c:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469e:	432a      	orrs	r2, r5
 80046a0:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046a2:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046a6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80046aa:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ac:	6082      	str	r2, [r0, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ae:	6882      	ldr	r2, [r0, #8]
 80046b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046b4:	6082      	str	r2, [r0, #8]
      break;
 80046b6:	e7d4      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 80046b8:	f032 0110 	bics.w	r1, r2, #16
 80046bc:	d1d1      	bne.n	8004662 <HAL_TIM_ConfigClockSource+0x66>
 80046be:	e7de      	b.n	800467e <HAL_TIM_ConfigClockSource+0x82>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046c0:	684c      	ldr	r4, [r1, #4]
 80046c2:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 80046c4:	6a01      	ldr	r1, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046c6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80046ca:	4321      	orrs	r1, r4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046cc:	6a04      	ldr	r4, [r0, #32]
 80046ce:	f024 0401 	bic.w	r4, r4, #1
 80046d2:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d4:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046d6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046da:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80046de:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80046e0:	6201      	str	r1, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80046e2:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80046e4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80046ec:	6082      	str	r2, [r0, #8]
}
 80046ee:	e7b8      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x66>
  __HAL_LOCK(htim);
 80046f0:	2002      	movs	r0, #2
}
 80046f2:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f4:	6a04      	ldr	r4, [r0, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f6:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046f8:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046fe:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004700:	6981      	ldr	r1, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004702:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004706:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800470a:	6a02      	ldr	r2, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800470c:	6181      	str	r1, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800470e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004712:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004716:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004718:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800471a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800471e:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004722:	6082      	str	r2, [r0, #8]
}
 8004724:	e79d      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x66>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004726:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800472a:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800472c:	432a      	orrs	r2, r5
 800472e:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004730:	f424 417f 	bic.w	r1, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004734:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004738:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800473a:	6082      	str	r2, [r0, #8]
      tmpsmcr = htim->Instance->SMCR;
 800473c:	6882      	ldr	r2, [r0, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800473e:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8004742:	6082      	str	r2, [r0, #8]
      break;
 8004744:	e78d      	b.n	8004662 <HAL_TIM_ConfigClockSource+0x66>
 8004746:	bf00      	nop

08004748 <HAL_TIM_OC_DelayElapsedCallback>:
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop

0800474c <HAL_TIM_IC_CaptureCallback>:
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop

08004750 <HAL_TIM_PWM_PulseFinishedCallback>:
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop

08004754 <HAL_TIM_TriggerCallback>:
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop

08004758 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004758:	6803      	ldr	r3, [r0, #0]
{
 800475a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800475c:	691a      	ldr	r2, [r3, #16]
{
 800475e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004760:	0791      	lsls	r1, r2, #30
 8004762:	d502      	bpl.n	800476a <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	0792      	lsls	r2, r2, #30
 8004768:	d45f      	bmi.n	800482a <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800476a:	691a      	ldr	r2, [r3, #16]
 800476c:	0750      	lsls	r0, r2, #29
 800476e:	d502      	bpl.n	8004776 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	0751      	lsls	r1, r2, #29
 8004774:	d446      	bmi.n	8004804 <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	0712      	lsls	r2, r2, #28
 800477a:	d502      	bpl.n	8004782 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800477c:	68da      	ldr	r2, [r3, #12]
 800477e:	0710      	lsls	r0, r2, #28
 8004780:	d42e      	bmi.n	80047e0 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	06d2      	lsls	r2, r2, #27
 8004786:	d502      	bpl.n	800478e <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	06d0      	lsls	r0, r2, #27
 800478c:	d418      	bmi.n	80047c0 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	07d1      	lsls	r1, r2, #31
 8004792:	d502      	bpl.n	800479a <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	07d2      	lsls	r2, r2, #31
 8004798:	d45d      	bmi.n	8004856 <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	0610      	lsls	r0, r2, #24
 800479e:	d502      	bpl.n	80047a6 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	0611      	lsls	r1, r2, #24
 80047a4:	d45f      	bmi.n	8004866 <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047a6:	691a      	ldr	r2, [r3, #16]
 80047a8:	0652      	lsls	r2, r2, #25
 80047aa:	d502      	bpl.n	80047b2 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	0650      	lsls	r0, r2, #25
 80047b0:	d461      	bmi.n	8004876 <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047b2:	691a      	ldr	r2, [r3, #16]
 80047b4:	0691      	lsls	r1, r2, #26
 80047b6:	d502      	bpl.n	80047be <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	0692      	lsls	r2, r2, #26
 80047bc:	d443      	bmi.n	8004846 <HAL_TIM_IRQHandler+0xee>
}
 80047be:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c4:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047c6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ca:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80047cc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047ce:	f413 7f40 	tst.w	r3, #768	; 0x300
 80047d2:	d064      	beq.n	800489e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80047d4:	f7ff ffba 	bl	800474c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d8:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047da:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047dc:	7722      	strb	r2, [r4, #28]
 80047de:	e7d6      	b.n	800478e <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047e0:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e4:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047e6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047e8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047ea:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80047ec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047ee:	0799      	lsls	r1, r3, #30
 80047f0:	d152      	bne.n	8004898 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047f2:	f7ff ffa9 	bl	8004748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7ff ffaa 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047fc:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047fe:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004800:	7722      	strb	r2, [r4, #28]
 8004802:	e7be      	b.n	8004782 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004804:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004808:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800480a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800480c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800480e:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8004810:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004812:	f413 7f40 	tst.w	r3, #768	; 0x300
 8004816:	d13c      	bne.n	8004892 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004818:	f7ff ff96 	bl	8004748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481c:	4620      	mov	r0, r4
 800481e:	f7ff ff97 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004822:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004824:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	7722      	strb	r2, [r4, #28]
 8004828:	e7a5      	b.n	8004776 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800482a:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800482e:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004830:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004832:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	079b      	lsls	r3, r3, #30
 8004838:	d025      	beq.n	8004886 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800483a:	f7ff ff87 	bl	800474c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004840:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004842:	7722      	strb	r2, [r4, #28]
 8004844:	e791      	b.n	800476a <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004846:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800484a:	4620      	mov	r0, r4
}
 800484c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004850:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004852:	f000 b85d 	b.w	8004910 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004856:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800485a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800485c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800485e:	f7fd f871 	bl	8001944 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	e799      	b.n	800479a <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004866:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800486a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800486c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800486e:	f000 f851 	bl	8004914 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	e797      	b.n	80047a6 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004876:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800487a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800487c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800487e:	f7ff ff69 	bl	8004754 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	e795      	b.n	80047b2 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	f7ff ff5f 	bl	8004748 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488a:	4620      	mov	r0, r4
 800488c:	f7ff ff60 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
 8004890:	e7d5      	b.n	800483e <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 8004892:	f7ff ff5b 	bl	800474c <HAL_TIM_IC_CaptureCallback>
 8004896:	e7c4      	b.n	8004822 <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 8004898:	f7ff ff58 	bl	800474c <HAL_TIM_IC_CaptureCallback>
 800489c:	e7ae      	b.n	80047fc <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800489e:	f7ff ff53 	bl	8004748 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a2:	4620      	mov	r0, r4
 80048a4:	f7ff ff54 	bl	8004750 <HAL_TIM_PWM_PulseFinishedCallback>
 80048a8:	e796      	b.n	80047d8 <HAL_TIM_IRQHandler+0x80>
 80048aa:	bf00      	nop

080048ac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ac:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80048b0:	2a01      	cmp	r2, #1
 80048b2:	d027      	beq.n	8004904 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 80048b4:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b6:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b8:	681a      	ldr	r2, [r3, #0]
{
 80048ba:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80048c0:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048c2:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048c4:	4d10      	ldr	r5, [pc, #64]	; (8004908 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c6:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048ca:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048cc:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 80048ce:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 80048d0:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048d2:	d009      	beq.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80048d4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80048d8:	d006      	beq.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80048da:	480c      	ldr	r0, [pc, #48]	; (800490c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 80048dc:	4282      	cmp	r2, r0
 80048de:	d003      	beq.n	80048e8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 80048e0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80048e4:	4282      	cmp	r2, r0
 80048e6:	d104      	bne.n	80048f2 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048e8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048ea:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ee:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f0:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80048f2:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80048f4:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 80048fa:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fe:	4610      	mov	r0, r2
}
 8004900:	bc30      	pop	{r4, r5}
 8004902:	4770      	bx	lr
  __HAL_LOCK(htim);
 8004904:	2002      	movs	r0, #2
}
 8004906:	4770      	bx	lr
 8004908:	40012c00 	.word	0x40012c00
 800490c:	40000400 	.word	0x40000400

08004910 <HAL_TIMEx_CommutCallback>:
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop

08004914 <HAL_TIMEx_BreakCallback>:
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop

08004918 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004918:	2800      	cmp	r0, #0
 800491a:	d064      	beq.n	80049e6 <HAL_UART_Init+0xce>
{
 800491c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800491e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004922:	4604      	mov	r4, r0
 8004924:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004928:	2b00      	cmp	r3, #0
 800492a:	d054      	beq.n	80049d6 <HAL_UART_Init+0xbe>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800492c:	e9d4 2702 	ldrd	r2, r7, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8004930:	2124      	movs	r1, #36	; 0x24
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004932:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8004934:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004936:	4302      	orrs	r2, r0
 8004938:	6960      	ldr	r0, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 800493a:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800493e:	4302      	orrs	r2, r0
  __HAL_UART_DISABLE(huart);
 8004940:	68d8      	ldr	r0, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004942:	69a6      	ldr	r6, [r4, #24]
  __HAL_UART_DISABLE(huart);
 8004944:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
 8004948:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494a:	6919      	ldr	r1, [r3, #16]


  if(huart->Instance == USART1)
 800494c:	4d27      	ldr	r5, [pc, #156]	; (80049ec <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8004952:	4339      	orrs	r1, r7
 8004954:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8004956:	68d9      	ldr	r1, [r3, #12]
  if(huart->Instance == USART1)
 8004958:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1,
 800495a:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 800495e:	f021 010c 	bic.w	r1, r1, #12
 8004962:	ea42 0201 	orr.w	r2, r2, r1
 8004966:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004968:	695a      	ldr	r2, [r3, #20]
 800496a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800496e:	ea42 0206 	orr.w	r2, r2, r6
 8004972:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8004974:	d034      	beq.n	80049e0 <HAL_UART_Init+0xc8>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004976:	f7ff f96d 	bl	8003c54 <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800497a:	6862      	ldr	r2, [r4, #4]
 800497c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8004980:	0092      	lsls	r2, r2, #2
 8004982:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004986:	fbb3 f3f2 	udiv	r3, r3, r2
 800498a:	2664      	movs	r6, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800498e:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004992:	4817      	ldr	r0, [pc, #92]	; (80049f0 <HAL_UART_Init+0xd8>)
 8004994:	6821      	ldr	r1, [r4, #0]
 8004996:	fba0 7203 	umull	r7, r2, r0, r3
 800499a:	0952      	lsrs	r2, r2, #5
 800499c:	fb06 3312 	mls	r3, r6, r2, r3
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	3332      	adds	r3, #50	; 0x32
 80049a4:	fba0 0303 	umull	r0, r3, r0, r3
 80049a8:	0112      	lsls	r2, r2, #4
 80049aa:	eb02 1353 	add.w	r3, r2, r3, lsr #5
 80049ae:	608b      	str	r3, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b0:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 80049b2:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049b4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80049b8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ba:	694b      	ldr	r3, [r1, #20]
 80049bc:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80049c0:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 80049c2:	68cb      	ldr	r3, [r1, #12]
 80049c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049c8:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049ca:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80049cc:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80049d0:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
}
 80049d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 80049d6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80049da:	f7fd f9ff 	bl	8001ddc <HAL_UART_MspInit>
 80049de:	e7a5      	b.n	800492c <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 80049e0:	f7ff f948 	bl	8003c74 <HAL_RCC_GetPCLK2Freq>
 80049e4:	e7c9      	b.n	800497a <HAL_UART_Init+0x62>
    return HAL_ERROR;
 80049e6:	2001      	movs	r0, #1
}
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40013800 	.word	0x40013800
 80049f0:	51eb851f 	.word	0x51eb851f

080049f4 <HAL_UART_Transmit>:
{
 80049f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049f8:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80049fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d168      	bne.n	8004ad4 <HAL_UART_Transmit+0xe0>
    if ((pData == NULL) || (Size == 0U))
 8004a02:	4688      	mov	r8, r1
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d040      	beq.n	8004a8a <HAL_UART_Transmit+0x96>
 8004a08:	4617      	mov	r7, r2
 8004a0a:	2a00      	cmp	r2, #0
 8004a0c:	d03d      	beq.n	8004a8a <HAL_UART_Transmit+0x96>
    __HAL_LOCK(huart);
 8004a0e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004a12:	4604      	mov	r4, r0
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d05d      	beq.n	8004ad4 <HAL_UART_Transmit+0xe0>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a18:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8004a1a:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	f04f 0900 	mov.w	r9, #0
    __HAL_LOCK(huart);
 8004a20:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	f8c0 9040 	str.w	r9, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a28:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8004a2c:	f7fd fb44 	bl	80020b8 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a30:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8004a32:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8004a38:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a3a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a3c:	d04d      	beq.n	8004ada <HAL_UART_Transmit+0xe6>
    __HAL_UNLOCK(huart);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8004a44:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d058      	beq.n	8004afe <HAL_UART_Transmit+0x10a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a4c:	6823      	ldr	r3, [r4, #0]
 8004a4e:	1c69      	adds	r1, r5, #1
 8004a50:	d11e      	bne.n	8004a90 <HAL_UART_Transmit+0x9c>
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	0612      	lsls	r2, r2, #24
 8004a56:	d5fc      	bpl.n	8004a52 <HAL_UART_Transmit+0x5e>
      if (pdata8bits == NULL)
 8004a58:	f1b8 0f00 	cmp.w	r8, #0
 8004a5c:	d035      	beq.n	8004aca <HAL_UART_Transmit+0xd6>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a5e:	f818 2b01 	ldrb.w	r2, [r8], #1
 8004a62:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8004a64:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004a66:	3a01      	subs	r2, #1
 8004a68:	b292      	uxth	r2, r2
 8004a6a:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a6c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004a6e:	b292      	uxth	r2, r2
 8004a70:	2a00      	cmp	r2, #0
 8004a72:	d1ec      	bne.n	8004a4e <HAL_UART_Transmit+0x5a>
 8004a74:	1c68      	adds	r0, r5, #1
 8004a76:	d136      	bne.n	8004ae6 <HAL_UART_Transmit+0xf2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	0651      	lsls	r1, r2, #25
 8004a7c:	d5fc      	bpl.n	8004a78 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8004a7e:	2320      	movs	r3, #32
 8004a80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004a84:	2000      	movs	r0, #0
}
 8004a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8004a8a:	2001      	movs	r0, #1
}
 8004a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	0617      	lsls	r7, r2, #24
 8004a94:	d4e0      	bmi.n	8004a58 <HAL_UART_Transmit+0x64>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a96:	b12d      	cbz	r5, 8004aa4 <HAL_UART_Transmit+0xb0>
 8004a98:	f7fd fb0e 	bl	80020b8 <HAL_GetTick>
 8004a9c:	1b80      	subs	r0, r0, r6
 8004a9e:	4285      	cmp	r5, r0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aa0:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aa2:	d2d4      	bcs.n	8004a4e <HAL_UART_Transmit+0x5a>
        huart->gState  = HAL_UART_STATE_READY;
 8004aa4:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 8004aa6:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aa8:	68da      	ldr	r2, [r3, #12]
      return HAL_TIMEOUT;
 8004aaa:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004aac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004ab0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ab2:	695a      	ldr	r2, [r3, #20]
 8004ab4:	f022 0201 	bic.w	r2, r2, #1
 8004ab8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8004aba:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8004abe:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004ac2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
}
 8004ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004aca:	f839 2b02 	ldrh.w	r2, [r9], #2
 8004ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ad2:	e7c6      	b.n	8004a62 <HAL_UART_Transmit+0x6e>
    return HAL_BUSY;
 8004ad4:	2002      	movs	r0, #2
}
 8004ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1ae      	bne.n	8004a3e <HAL_UART_Transmit+0x4a>
 8004ae0:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8004ae2:	4698      	mov	r8, r3
 8004ae4:	e7ab      	b.n	8004a3e <HAL_UART_Transmit+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	0652      	lsls	r2, r2, #25
 8004aea:	d4c8      	bmi.n	8004a7e <HAL_UART_Transmit+0x8a>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004aec:	2d00      	cmp	r5, #0
 8004aee:	d0d9      	beq.n	8004aa4 <HAL_UART_Transmit+0xb0>
 8004af0:	f7fd fae2 	bl	80020b8 <HAL_GetTick>
 8004af4:	1b83      	subs	r3, r0, r6
 8004af6:	429d      	cmp	r5, r3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af8:	6823      	ldr	r3, [r4, #0]
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004afa:	d2bb      	bcs.n	8004a74 <HAL_UART_Transmit+0x80>
 8004afc:	e7d2      	b.n	8004aa4 <HAL_UART_Transmit+0xb0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	e7b8      	b.n	8004a74 <HAL_UART_Transmit+0x80>
 8004b02:	bf00      	nop

08004b04 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b04:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004b08:	2b20      	cmp	r3, #32
 8004b0a:	d13f      	bne.n	8004b8c <HAL_UART_Receive_DMA+0x88>
    if ((pData == NULL) || (Size == 0U))
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d03b      	beq.n	8004b88 <HAL_UART_Receive_DMA+0x84>
 8004b10:	2a00      	cmp	r2, #0
 8004b12:	d039      	beq.n	8004b88 <HAL_UART_Receive_DMA+0x84>
{
 8004b14:	b5f0      	push	{r4, r5, r6, r7, lr}
    __HAL_LOCK(huart);
 8004b16:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004b1a:	4604      	mov	r4, r0
 8004b1c:	2b01      	cmp	r3, #1
{
 8004b1e:	b083      	sub	sp, #12
    __HAL_LOCK(huart);
 8004b20:	d036      	beq.n	8004b90 <HAL_UART_Receive_DMA+0x8c>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b22:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8004b24:	f04f 0e01 	mov.w	lr, #1
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b28:	f04f 0c22 	mov.w	ip, #34	; 0x22
  huart->pRxBuffPtr = pData;
 8004b2c:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxXferSize = Size;
 8004b2e:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004b30:	4f19      	ldr	r7, [pc, #100]	; (8004b98 <HAL_UART_Receive_DMA+0x94>)
 8004b32:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b34:	4e19      	ldr	r6, [pc, #100]	; (8004b9c <HAL_UART_Receive_DMA+0x98>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b36:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_LOCK(huart);
 8004b38:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3c:	6425      	str	r5, [r4, #64]	; 0x40
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b3e:	4613      	mov	r3, r2
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b40:	f884 c03e 	strb.w	ip, [r4, #62]	; 0x3e
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b44:	460a      	mov	r2, r1
 8004b46:	6821      	ldr	r1, [r4, #0]
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004b48:	e9c0 760a 	strd	r7, r6, [r0, #40]	; 0x28
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b4c:	4e14      	ldr	r6, [pc, #80]	; (8004ba0 <HAL_UART_Receive_DMA+0x9c>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b4e:	3104      	adds	r1, #4
  huart->hdmarx->XferAbortCallback = NULL;
 8004b50:	6345      	str	r5, [r0, #52]	; 0x34
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004b52:	6306      	str	r6, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004b54:	f7fd fe70 	bl	8002838 <HAL_DMA_Start_IT>
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004b58:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b5a:	6823      	ldr	r3, [r4, #0]
 8004b5c:	9501      	str	r5, [sp, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	9201      	str	r2, [sp, #4]
 8004b62:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8004b64:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004b68:	9201      	str	r2, [sp, #4]
 8004b6a:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b6c:	68da      	ldr	r2, [r3, #12]
 8004b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b72:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b82:	615a      	str	r2, [r3, #20]
}
 8004b84:	b003      	add	sp, #12
 8004b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8004b88:	2001      	movs	r0, #1
}
 8004b8a:	4770      	bx	lr
    return HAL_BUSY;
 8004b8c:	2002      	movs	r0, #2
 8004b8e:	4770      	bx	lr
 8004b90:	2002      	movs	r0, #2
}
 8004b92:	b003      	add	sp, #12
 8004b94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b96:	bf00      	nop
 8004b98:	08004cf1 	.word	0x08004cf1
 8004b9c:	08004cd5 	.word	0x08004cd5
 8004ba0:	08004c45 	.word	0x08004c45

08004ba4 <HAL_UART_DMAStop>:
{
 8004ba4:	b510      	push	{r4, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ba6:	6803      	ldr	r3, [r0, #0]
{
 8004ba8:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004baa:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004bac:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004bb0:	2a21      	cmp	r2, #33	; 0x21
 8004bb2:	d006      	beq.n	8004bc2 <HAL_UART_DMAStop+0x1e>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb4:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004bb6:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004bba:	2a22      	cmp	r2, #34	; 0x22
 8004bbc:	d018      	beq.n	8004bf0 <HAL_UART_DMAStop+0x4c>
}
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004bc2:	0609      	lsls	r1, r1, #24
 8004bc4:	d5f6      	bpl.n	8004bb4 <HAL_UART_DMAStop+0x10>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bc6:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8004bc8:	6b40      	ldr	r0, [r0, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004bce:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 8004bd0:	b110      	cbz	r0, 8004bd8 <HAL_UART_DMAStop+0x34>
      HAL_DMA_Abort(huart->hdmatx);
 8004bd2:	f7fd fe79 	bl	80028c8 <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bd6:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 8004bd8:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004be0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004be2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004be6:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004be8:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004bec:	2a22      	cmp	r2, #34	; 0x22
 8004bee:	d1e6      	bne.n	8004bbe <HAL_UART_DMAStop+0x1a>
 8004bf0:	064a      	lsls	r2, r1, #25
 8004bf2:	d5e4      	bpl.n	8004bbe <HAL_UART_DMAStop+0x1a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf4:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8004bf6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bfc:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 8004bfe:	b110      	cbz	r0, 8004c06 <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 8004c00:	f7fd fe62 	bl	80028c8 <HAL_DMA_Abort>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	68da      	ldr	r2, [r3, #12]
 8004c08:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c0c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c0e:	695a      	ldr	r2, [r3, #20]
 8004c10:	f022 0201 	bic.w	r2, r2, #1
 8004c14:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004c18:	2a01      	cmp	r2, #1
 8004c1a:	d103      	bne.n	8004c24 <HAL_UART_DMAStop+0x80>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c1c:	68da      	ldr	r2, [r3, #12]
 8004c1e:	f022 0210 	bic.w	r2, r2, #16
 8004c22:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8004c24:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c26:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004c28:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
}
 8004c2c:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2e:	6323      	str	r3, [r4, #48]	; 0x30
}
 8004c30:	bd10      	pop	{r4, pc}
 8004c32:	bf00      	nop

08004c34 <HAL_UART_TxCpltCallback>:
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop

08004c38 <HAL_UART_RxCpltCallback>:
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop

08004c3c <HAL_UART_RxHalfCpltCallback>:
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop

08004c40 <HAL_UART_ErrorCallback>:
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop

08004c44 <UART_DMAError>:
{
 8004c44:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c46:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c48:	6803      	ldr	r3, [r0, #0]
 8004c4a:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c4c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8004c50:	2a21      	cmp	r2, #33	; 0x21
 8004c52:	d00b      	beq.n	8004c6c <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c54:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c56:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8004c5a:	2a22      	cmp	r2, #34	; 0x22
 8004c5c:	d016      	beq.n	8004c8c <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004c60:	f043 0310 	orr.w	r3, r3, #16
 8004c64:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8004c66:	f7ff ffeb 	bl	8004c40 <HAL_UART_ErrorCallback>
}
 8004c6a:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c6c:	0609      	lsls	r1, r1, #24
 8004c6e:	d5f1      	bpl.n	8004c54 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8004c70:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 8004c72:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 8004c74:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004c7c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004c7e:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c82:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c84:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8004c88:	2a22      	cmp	r2, #34	; 0x22
 8004c8a:	d1e8      	bne.n	8004c5e <UART_DMAError+0x1a>
 8004c8c:	064a      	lsls	r2, r1, #25
 8004c8e:	d5e6      	bpl.n	8004c5e <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8004c90:	2200      	movs	r2, #0
 8004c92:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004c9a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9c:	695a      	ldr	r2, [r3, #20]
 8004c9e:	f022 0201 	bic.w	r2, r2, #1
 8004ca2:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004ca6:	2a01      	cmp	r2, #1
 8004ca8:	d103      	bne.n	8004cb2 <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	f022 0210 	bic.w	r2, r2, #16
 8004cb0:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb4:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004cb6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004cbc:	e7cf      	b.n	8004c5e <UART_DMAError+0x1a>
 8004cbe:	bf00      	nop

08004cc0 <UART_DMAAbortOnError>:
{
 8004cc0:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 8004cc2:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cc4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8004cc6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004cc8:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004cca:	f7ff ffb9 	bl	8004c40 <HAL_UART_ErrorCallback>
}
 8004cce:	bd08      	pop	{r3, pc}

08004cd0 <HAL_UARTEx_RxEventCallback>:
}
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop

08004cd4 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd4:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8004cd6:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d002      	beq.n	8004ce4 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8004cde:	f7ff ffad 	bl	8004c3c <HAL_UART_RxHalfCpltCallback>
}
 8004ce2:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004ce4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004ce6:	0849      	lsrs	r1, r1, #1
 8004ce8:	f7ff fff2 	bl	8004cd0 <HAL_UARTEx_RxEventCallback>
}
 8004cec:	bd08      	pop	{r3, pc}
 8004cee:	bf00      	nop

08004cf0 <UART_DMAReceiveCplt>:
{
 8004cf0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cf2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cf4:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f013 0320 	ands.w	r3, r3, #32
 8004cfc:	d113      	bne.n	8004d26 <UART_DMAReceiveCplt+0x36>
    huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d00:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8004d02:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d04:	68d3      	ldr	r3, [r2, #12]
 8004d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d0a:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d0c:	6953      	ldr	r3, [r2, #20]
 8004d0e:	f023 0301 	bic.w	r3, r3, #1
 8004d12:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d14:	6953      	ldr	r3, [r2, #20]
 8004d16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d1a:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d20:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d009      	beq.n	8004d3a <UART_DMAReceiveCplt+0x4a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d26:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d002      	beq.n	8004d32 <UART_DMAReceiveCplt+0x42>
    HAL_UART_RxCpltCallback(huart);
 8004d2c:	f7ff ff84 	bl	8004c38 <HAL_UART_RxCpltCallback>
}
 8004d30:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004d32:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004d34:	f7ff ffcc 	bl	8004cd0 <HAL_UARTEx_RxEventCallback>
}
 8004d38:	bd08      	pop	{r3, pc}
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d3a:	68d3      	ldr	r3, [r2, #12]
 8004d3c:	f023 0310 	bic.w	r3, r3, #16
 8004d40:	60d3      	str	r3, [r2, #12]
 8004d42:	e7f0      	b.n	8004d26 <UART_DMAReceiveCplt+0x36>

08004d44 <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d44:	6883      	ldr	r3, [r0, #8]
 8004d46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d4a:	d03b      	beq.n	8004dc4 <UART_Receive_IT.part.0.isra.0+0x80>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d4c:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d030      	beq.n	8004db4 <UART_Receive_IT.part.0.isra.0+0x70>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d52:	6803      	ldr	r3, [r0, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d5a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8004d5c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d5e:	3301      	adds	r3, #1
 8004d60:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8004d62:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8004d64:	3b01      	subs	r3, #1
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8004d6a:	bb53      	cbnz	r3, 8004dc2 <UART_Receive_IT.part.0.isra.0+0x7e>
      huart->RxState = HAL_UART_STATE_READY;
 8004d6c:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d70:	6802      	ldr	r2, [r0, #0]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004d72:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d74:	68d1      	ldr	r1, [r2, #12]
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8004d76:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d78:	f021 0120 	bic.w	r1, r1, #32
 8004d7c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d7e:	68d1      	ldr	r1, [r2, #12]
 8004d80:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004d84:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d86:	6951      	ldr	r1, [r2, #20]
 8004d88:	f021 0101 	bic.w	r1, r1, #1
 8004d8c:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8004d8e:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d92:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004d94:	2901      	cmp	r1, #1
 8004d96:	d120      	bne.n	8004dda <UART_Receive_IT.part.0.isra.0+0x96>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d98:	6303      	str	r3, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9a:	68d1      	ldr	r1, [r2, #12]
 8004d9c:	f021 0110 	bic.w	r1, r1, #16
 8004da0:	60d1      	str	r1, [r2, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004da2:	6811      	ldr	r1, [r2, #0]
 8004da4:	06c9      	lsls	r1, r1, #27
 8004da6:	d422      	bmi.n	8004dee <UART_Receive_IT.part.0.isra.0+0xaa>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004da8:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8004daa:	f7ff ff91 	bl	8004cd0 <HAL_UARTEx_RxEventCallback>
}
 8004dae:	b003      	add	sp, #12
 8004db0:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004db4:	6903      	ldr	r3, [r0, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1cb      	bne.n	8004d52 <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dba:	6803      	ldr	r3, [r0, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	7013      	strb	r3, [r2, #0]
 8004dc0:	e7cc      	b.n	8004d5c <UART_Receive_IT.part.0.isra.0+0x18>
 8004dc2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc4:	6903      	ldr	r3, [r0, #16]
 8004dc6:	b96b      	cbnz	r3, 8004de4 <UART_Receive_IT.part.0.isra.0+0xa0>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004dc8:	6802      	ldr	r2, [r0, #0]
 8004dca:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004dcc:	6852      	ldr	r2, [r2, #4]
 8004dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd2:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8004dd6:	6283      	str	r3, [r0, #40]	; 0x28
 8004dd8:	e7c3      	b.n	8004d62 <UART_Receive_IT.part.0.isra.0+0x1e>
       HAL_UART_RxCpltCallback(huart);
 8004dda:	f7ff ff2d 	bl	8004c38 <HAL_UART_RxCpltCallback>
}
 8004dde:	b003      	add	sp, #12
 8004de0:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004de4:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004de6:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	7013      	strb	r3, [r2, #0]
 8004dec:	e7b6      	b.n	8004d5c <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dee:	9301      	str	r3, [sp, #4]
 8004df0:	6813      	ldr	r3, [r2, #0]
 8004df2:	9301      	str	r3, [sp, #4]
 8004df4:	6853      	ldr	r3, [r2, #4]
 8004df6:	9301      	str	r3, [sp, #4]
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	e7d5      	b.n	8004da8 <UART_Receive_IT.part.0.isra.0+0x64>

08004dfc <HAL_UART_IRQHandler>:
{
 8004dfc:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dfe:	6803      	ldr	r3, [r0, #0]
{
 8004e00:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e02:	681a      	ldr	r2, [r3, #0]
{
 8004e04:	b083      	sub	sp, #12
  if (errorflags == RESET)
 8004e06:	f012 0f0f 	tst.w	r2, #15
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e0a:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e0c:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004e0e:	d14e      	bne.n	8004eae <HAL_UART_IRQHandler+0xb2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e10:	0695      	lsls	r5, r2, #26
 8004e12:	d502      	bpl.n	8004e1a <HAL_UART_IRQHandler+0x1e>
 8004e14:	068d      	lsls	r5, r1, #26
 8004e16:	f100 8090 	bmi.w	8004f3a <HAL_UART_IRQHandler+0x13e>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004e1c:	2801      	cmp	r0, #1
 8004e1e:	d00b      	beq.n	8004e38 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e20:	0610      	lsls	r0, r2, #24
 8004e22:	d502      	bpl.n	8004e2a <HAL_UART_IRQHandler+0x2e>
 8004e24:	060d      	lsls	r5, r1, #24
 8004e26:	f100 8092 	bmi.w	8004f4e <HAL_UART_IRQHandler+0x152>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e2a:	0650      	lsls	r0, r2, #25
 8004e2c:	d502      	bpl.n	8004e34 <HAL_UART_IRQHandler+0x38>
 8004e2e:	064a      	lsls	r2, r1, #25
 8004e30:	f100 80ab 	bmi.w	8004f8a <HAL_UART_IRQHandler+0x18e>
}
 8004e34:	b003      	add	sp, #12
 8004e36:	bd30      	pop	{r4, r5, pc}
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004e38:	06d0      	lsls	r0, r2, #27
 8004e3a:	d5f1      	bpl.n	8004e20 <HAL_UART_IRQHandler+0x24>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004e3c:	06cd      	lsls	r5, r1, #27
 8004e3e:	d5ef      	bpl.n	8004e20 <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e40:	2100      	movs	r1, #0
 8004e42:	9101      	str	r1, [sp, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	9201      	str	r2, [sp, #4]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	9201      	str	r2, [sp, #4]
 8004e4c:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e4e:	695a      	ldr	r2, [r3, #20]
 8004e50:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8004e54:	f000 80d2 	beq.w	8004ffc <HAL_UART_IRQHandler+0x200>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e58:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004e5a:	6802      	ldr	r2, [r0, #0]
 8004e5c:	6852      	ldr	r2, [r2, #4]
 8004e5e:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8004e60:	2a00      	cmp	r2, #0
 8004e62:	d0e7      	beq.n	8004e34 <HAL_UART_IRQHandler+0x38>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004e64:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004e66:	4295      	cmp	r5, r2
 8004e68:	d9e4      	bls.n	8004e34 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8004e6a:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e6c:	6982      	ldr	r2, [r0, #24]
 8004e6e:	2a20      	cmp	r2, #32
 8004e70:	d016      	beq.n	8004ea0 <HAL_UART_IRQHandler+0xa4>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e72:	68da      	ldr	r2, [r3, #12]
 8004e74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e78:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	695a      	ldr	r2, [r3, #20]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e82:	695a      	ldr	r2, [r3, #20]
 8004e84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e88:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e90:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e92:	68da      	ldr	r2, [r3, #12]
 8004e94:	f022 0210 	bic.w	r2, r2, #16
 8004e98:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e9a:	f7fd fd15 	bl	80028c8 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e9e:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004ea0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	1a69      	subs	r1, r5, r1
 8004ea6:	b289      	uxth	r1, r1
 8004ea8:	f7ff ff12 	bl	8004cd0 <HAL_UARTEx_RxEventCallback>
 8004eac:	e7c2      	b.n	8004e34 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eae:	f005 0501 	and.w	r5, r5, #1
 8004eb2:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8004eb6:	4328      	orrs	r0, r5
 8004eb8:	d0af      	beq.n	8004e1a <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004eba:	07d0      	lsls	r0, r2, #31
 8004ebc:	d505      	bpl.n	8004eca <HAL_UART_IRQHandler+0xce>
 8004ebe:	05c8      	lsls	r0, r1, #23
 8004ec0:	d503      	bpl.n	8004eca <HAL_UART_IRQHandler+0xce>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ec2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004ec4:	f040 0001 	orr.w	r0, r0, #1
 8004ec8:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004eca:	0750      	lsls	r0, r2, #29
 8004ecc:	d530      	bpl.n	8004f30 <HAL_UART_IRQHandler+0x134>
 8004ece:	b14d      	cbz	r5, 8004ee4 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004ed2:	f040 0002 	orr.w	r0, r0, #2
 8004ed6:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004ed8:	0790      	lsls	r0, r2, #30
 8004eda:	d503      	bpl.n	8004ee4 <HAL_UART_IRQHandler+0xe8>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004edc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004ede:	f040 0004 	orr.w	r0, r0, #4
 8004ee2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004ee4:	0710      	lsls	r0, r2, #28
 8004ee6:	d507      	bpl.n	8004ef8 <HAL_UART_IRQHandler+0xfc>
 8004ee8:	f001 0020 	and.w	r0, r1, #32
 8004eec:	4328      	orrs	r0, r5
 8004eee:	d003      	beq.n	8004ef8 <HAL_UART_IRQHandler+0xfc>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ef0:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004ef2:	f040 0008 	orr.w	r0, r0, #8
 8004ef6:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ef8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004efa:	2800      	cmp	r0, #0
 8004efc:	d09a      	beq.n	8004e34 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004efe:	0690      	lsls	r0, r2, #26
 8004f00:	d509      	bpl.n	8004f16 <HAL_UART_IRQHandler+0x11a>
 8004f02:	068a      	lsls	r2, r1, #26
 8004f04:	d507      	bpl.n	8004f16 <HAL_UART_IRQHandler+0x11a>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f06:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004f0a:	2a22      	cmp	r2, #34	; 0x22
 8004f0c:	d103      	bne.n	8004f16 <HAL_UART_IRQHandler+0x11a>
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff ff18 	bl	8004d44 <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f18:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f1a:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f1e:	f005 0508 	and.w	r5, r5, #8
 8004f22:	4315      	orrs	r5, r2
 8004f24:	d13c      	bne.n	8004fa0 <HAL_UART_IRQHandler+0x1a4>
        HAL_UART_ErrorCallback(huart);
 8004f26:	4620      	mov	r0, r4
 8004f28:	f7ff fe8a 	bl	8004c40 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f2c:	6425      	str	r5, [r4, #64]	; 0x40
 8004f2e:	e781      	b.n	8004e34 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f30:	0790      	lsls	r0, r2, #30
 8004f32:	d5d7      	bpl.n	8004ee4 <HAL_UART_IRQHandler+0xe8>
 8004f34:	2d00      	cmp	r5, #0
 8004f36:	d1d1      	bne.n	8004edc <HAL_UART_IRQHandler+0xe0>
 8004f38:	e7d4      	b.n	8004ee4 <HAL_UART_IRQHandler+0xe8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f3a:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004f3e:	2b22      	cmp	r3, #34	; 0x22
 8004f40:	f47f af78 	bne.w	8004e34 <HAL_UART_IRQHandler+0x38>
}
 8004f44:	b003      	add	sp, #12
 8004f46:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f4a:	f7ff befb 	b.w	8004d44 <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f4e:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004f52:	2a21      	cmp	r2, #33	; 0x21
 8004f54:	f47f af6e 	bne.w	8004e34 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f58:	68a2      	ldr	r2, [r4, #8]
 8004f5a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8004f5e:	d06e      	beq.n	800503e <HAL_UART_IRQHandler+0x242>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f60:	6a22      	ldr	r2, [r4, #32]
 8004f62:	1c51      	adds	r1, r2, #1
 8004f64:	6221      	str	r1, [r4, #32]
 8004f66:	7812      	ldrb	r2, [r2, #0]
 8004f68:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8004f6a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004f6c:	3a01      	subs	r2, #1
 8004f6e:	b292      	uxth	r2, r2
 8004f70:	84e2      	strh	r2, [r4, #38]	; 0x26
 8004f72:	2a00      	cmp	r2, #0
 8004f74:	f47f af5e 	bne.w	8004e34 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f7e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f80:	68da      	ldr	r2, [r3, #12]
 8004f82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f86:	60da      	str	r2, [r3, #12]
 8004f88:	e754      	b.n	8004e34 <HAL_UART_IRQHandler+0x38>
  huart->gState = HAL_UART_STATE_READY;
 8004f8a:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f8c:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8004f8e:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f94:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8004f96:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8004f9a:	f7ff fe4b 	bl	8004c34 <HAL_UART_TxCpltCallback>
    return;
 8004f9e:	e749      	b.n	8004e34 <HAL_UART_IRQHandler+0x38>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004fa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	f022 0201 	bic.w	r2, r2, #1
 8004fae:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fb2:	2a01      	cmp	r2, #1
 8004fb4:	d103      	bne.n	8004fbe <HAL_UART_IRQHandler+0x1c2>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	f022 0210 	bic.w	r2, r2, #16
 8004fbc:	60da      	str	r2, [r3, #12]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbe:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004fc0:	2120      	movs	r1, #32
 8004fc2:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc6:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc8:	695a      	ldr	r2, [r3, #20]
 8004fca:	0655      	lsls	r5, r2, #25
 8004fcc:	d512      	bpl.n	8004ff4 <HAL_UART_IRQHandler+0x1f8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fce:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004fd0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd6:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8004fd8:	b160      	cbz	r0, 8004ff4 <HAL_UART_IRQHandler+0x1f8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004fda:	4b1e      	ldr	r3, [pc, #120]	; (8005054 <HAL_UART_IRQHandler+0x258>)
 8004fdc:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004fde:	f7fd fc95 	bl	800290c <HAL_DMA_Abort_IT>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	f43f af26 	beq.w	8004e34 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fe8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004fea:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 8004fec:	b003      	add	sp, #12
 8004fee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ff2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8004ff4:	4620      	mov	r0, r4
 8004ff6:	f7ff fe23 	bl	8004c40 <HAL_UART_ErrorCallback>
 8004ffa:	e71b      	b.n	8004e34 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ffc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
      if (  (huart->RxXferCount > 0U)
 8004ffe:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005000:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8005002:	b289      	uxth	r1, r1
 8005004:	2900      	cmp	r1, #0
 8005006:	f43f af15 	beq.w	8004e34 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800500a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800500c:	1a08      	subs	r0, r1, r0
 800500e:	b281      	uxth	r1, r0
          &&(nb_rx_data > 0U) )
 8005010:	2900      	cmp	r1, #0
 8005012:	f43f af0f 	beq.w	8004e34 <HAL_UART_IRQHandler+0x38>
        huart->RxState = HAL_UART_STATE_READY;
 8005016:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005018:	68d8      	ldr	r0, [r3, #12]
 800501a:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 800501e:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005020:	6958      	ldr	r0, [r3, #20]
 8005022:	f020 0001 	bic.w	r0, r0, #1
 8005026:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 8005028:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800502c:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800502e:	68da      	ldr	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005030:	4620      	mov	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005032:	f022 0210 	bic.w	r2, r2, #16
 8005036:	60da      	str	r2, [r3, #12]
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005038:	f7ff fe4a 	bl	8004cd0 <HAL_UARTEx_RxEventCallback>
 800503c:	e6fa      	b.n	8004e34 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800503e:	6922      	ldr	r2, [r4, #16]
 8005040:	2a00      	cmp	r2, #0
 8005042:	d18d      	bne.n	8004f60 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005044:	6a22      	ldr	r2, [r4, #32]
 8005046:	f832 1b02 	ldrh.w	r1, [r2], #2
 800504a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800504e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005050:	6222      	str	r2, [r4, #32]
 8005052:	e78a      	b.n	8004f6a <HAL_UART_IRQHandler+0x16e>
 8005054:	08004cc1 	.word	0x08004cc1

08005058 <__errno>:
 8005058:	4b01      	ldr	r3, [pc, #4]	; (8005060 <__errno+0x8>)
 800505a:	6818      	ldr	r0, [r3, #0]
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	2000000c 	.word	0x2000000c

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	2600      	movs	r6, #0
 8005068:	4d0c      	ldr	r5, [pc, #48]	; (800509c <__libc_init_array+0x38>)
 800506a:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506c:	1b64      	subs	r4, r4, r5
 800506e:	10a4      	asrs	r4, r4, #2
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	f000 f8f6 	bl	8005264 <_init>
 8005078:	2600      	movs	r6, #0
 800507a:	4d0a      	ldr	r5, [pc, #40]	; (80050a4 <__libc_init_array+0x40>)
 800507c:	4c0a      	ldr	r4, [pc, #40]	; (80050a8 <__libc_init_array+0x44>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	080052b8 	.word	0x080052b8
 80050a0:	080052b8 	.word	0x080052b8
 80050a4:	080052b8 	.word	0x080052b8
 80050a8:	080052bc 	.word	0x080052bc

080050ac <memset>:
 80050ac:	4603      	mov	r3, r0
 80050ae:	4402      	add	r2, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <sqrt>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	4606      	mov	r6, r0
 80050c0:	460f      	mov	r7, r1
 80050c2:	f000 f81f 	bl	8005104 <__ieee754_sqrt>
 80050c6:	4632      	mov	r2, r6
 80050c8:	4604      	mov	r4, r0
 80050ca:	460d      	mov	r5, r1
 80050cc:	463b      	mov	r3, r7
 80050ce:	4630      	mov	r0, r6
 80050d0:	4639      	mov	r1, r7
 80050d2:	f7fb fd45 	bl	8000b60 <__aeabi_dcmpun>
 80050d6:	b990      	cbnz	r0, 80050fe <sqrt+0x42>
 80050d8:	2200      	movs	r2, #0
 80050da:	2300      	movs	r3, #0
 80050dc:	4630      	mov	r0, r6
 80050de:	4639      	mov	r1, r7
 80050e0:	f7fb fd16 	bl	8000b10 <__aeabi_dcmplt>
 80050e4:	b158      	cbz	r0, 80050fe <sqrt+0x42>
 80050e6:	f7ff ffb7 	bl	8005058 <__errno>
 80050ea:	2321      	movs	r3, #33	; 0x21
 80050ec:	2200      	movs	r2, #0
 80050ee:	6003      	str	r3, [r0, #0]
 80050f0:	2300      	movs	r3, #0
 80050f2:	4610      	mov	r0, r2
 80050f4:	4619      	mov	r1, r3
 80050f6:	f7fb fbc3 	bl	8000880 <__aeabi_ddiv>
 80050fa:	4604      	mov	r4, r0
 80050fc:	460d      	mov	r5, r1
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005104 <__ieee754_sqrt>:
 8005104:	f8df c158 	ldr.w	ip, [pc, #344]	; 8005260 <__ieee754_sqrt+0x15c>
 8005108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510c:	ea3c 0c01 	bics.w	ip, ip, r1
 8005110:	4606      	mov	r6, r0
 8005112:	460d      	mov	r5, r1
 8005114:	460c      	mov	r4, r1
 8005116:	460a      	mov	r2, r1
 8005118:	4607      	mov	r7, r0
 800511a:	4603      	mov	r3, r0
 800511c:	d10f      	bne.n	800513e <__ieee754_sqrt+0x3a>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	f7fb fa83 	bl	800062c <__aeabi_dmul>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4630      	mov	r0, r6
 800512c:	4629      	mov	r1, r5
 800512e:	f7fb f8c7 	bl	80002c0 <__adddf3>
 8005132:	4606      	mov	r6, r0
 8005134:	460d      	mov	r5, r1
 8005136:	4630      	mov	r0, r6
 8005138:	4629      	mov	r1, r5
 800513a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800513e:	2900      	cmp	r1, #0
 8005140:	dc0e      	bgt.n	8005160 <__ieee754_sqrt+0x5c>
 8005142:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 8005146:	ea5c 0707 	orrs.w	r7, ip, r7
 800514a:	d0f4      	beq.n	8005136 <__ieee754_sqrt+0x32>
 800514c:	b141      	cbz	r1, 8005160 <__ieee754_sqrt+0x5c>
 800514e:	4602      	mov	r2, r0
 8005150:	460b      	mov	r3, r1
 8005152:	f7fb f8b3 	bl	80002bc <__aeabi_dsub>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	f7fb fb91 	bl	8000880 <__aeabi_ddiv>
 800515e:	e7e8      	b.n	8005132 <__ieee754_sqrt+0x2e>
 8005160:	1521      	asrs	r1, r4, #20
 8005162:	d075      	beq.n	8005250 <__ieee754_sqrt+0x14c>
 8005164:	07cc      	lsls	r4, r1, #31
 8005166:	f04f 0400 	mov.w	r4, #0
 800516a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800516e:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8005172:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005176:	bf5e      	ittt	pl
 8005178:	0fd9      	lsrpl	r1, r3, #31
 800517a:	005b      	lslpl	r3, r3, #1
 800517c:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8005180:	0fd9      	lsrs	r1, r3, #31
 8005182:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8005186:	2516      	movs	r5, #22
 8005188:	4620      	mov	r0, r4
 800518a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800518e:	107f      	asrs	r7, r7, #1
 8005190:	005b      	lsls	r3, r3, #1
 8005192:	1846      	adds	r6, r0, r1
 8005194:	4296      	cmp	r6, r2
 8005196:	bfde      	ittt	le
 8005198:	1b92      	suble	r2, r2, r6
 800519a:	1870      	addle	r0, r6, r1
 800519c:	1864      	addle	r4, r4, r1
 800519e:	0052      	lsls	r2, r2, #1
 80051a0:	3d01      	subs	r5, #1
 80051a2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80051a6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80051aa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051ae:	d1f0      	bne.n	8005192 <__ieee754_sqrt+0x8e>
 80051b0:	4629      	mov	r1, r5
 80051b2:	f04f 0e20 	mov.w	lr, #32
 80051b6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80051ba:	4282      	cmp	r2, r0
 80051bc:	eb06 0c05 	add.w	ip, r6, r5
 80051c0:	dc02      	bgt.n	80051c8 <__ieee754_sqrt+0xc4>
 80051c2:	d113      	bne.n	80051ec <__ieee754_sqrt+0xe8>
 80051c4:	459c      	cmp	ip, r3
 80051c6:	d811      	bhi.n	80051ec <__ieee754_sqrt+0xe8>
 80051c8:	f1bc 0f00 	cmp.w	ip, #0
 80051cc:	eb0c 0506 	add.w	r5, ip, r6
 80051d0:	da43      	bge.n	800525a <__ieee754_sqrt+0x156>
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	db41      	blt.n	800525a <__ieee754_sqrt+0x156>
 80051d6:	f100 0801 	add.w	r8, r0, #1
 80051da:	1a12      	subs	r2, r2, r0
 80051dc:	4640      	mov	r0, r8
 80051de:	459c      	cmp	ip, r3
 80051e0:	bf88      	it	hi
 80051e2:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80051e6:	eba3 030c 	sub.w	r3, r3, ip
 80051ea:	4431      	add	r1, r6
 80051ec:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80051f0:	f1be 0e01 	subs.w	lr, lr, #1
 80051f4:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 80051f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80051fc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005200:	d1db      	bne.n	80051ba <__ieee754_sqrt+0xb6>
 8005202:	4313      	orrs	r3, r2
 8005204:	d006      	beq.n	8005214 <__ieee754_sqrt+0x110>
 8005206:	1c48      	adds	r0, r1, #1
 8005208:	bf0b      	itete	eq
 800520a:	4671      	moveq	r1, lr
 800520c:	3101      	addne	r1, #1
 800520e:	3401      	addeq	r4, #1
 8005210:	f021 0101 	bicne.w	r1, r1, #1
 8005214:	1063      	asrs	r3, r4, #1
 8005216:	0849      	lsrs	r1, r1, #1
 8005218:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800521c:	07e2      	lsls	r2, r4, #31
 800521e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005222:	bf48      	it	mi
 8005224:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005228:	460e      	mov	r6, r1
 800522a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800522e:	e782      	b.n	8005136 <__ieee754_sqrt+0x32>
 8005230:	0ada      	lsrs	r2, r3, #11
 8005232:	3815      	subs	r0, #21
 8005234:	055b      	lsls	r3, r3, #21
 8005236:	2a00      	cmp	r2, #0
 8005238:	d0fa      	beq.n	8005230 <__ieee754_sqrt+0x12c>
 800523a:	02d5      	lsls	r5, r2, #11
 800523c:	d50a      	bpl.n	8005254 <__ieee754_sqrt+0x150>
 800523e:	f1c1 0420 	rsb	r4, r1, #32
 8005242:	fa23 f404 	lsr.w	r4, r3, r4
 8005246:	1e4d      	subs	r5, r1, #1
 8005248:	408b      	lsls	r3, r1
 800524a:	4322      	orrs	r2, r4
 800524c:	1b41      	subs	r1, r0, r5
 800524e:	e789      	b.n	8005164 <__ieee754_sqrt+0x60>
 8005250:	4608      	mov	r0, r1
 8005252:	e7f0      	b.n	8005236 <__ieee754_sqrt+0x132>
 8005254:	0052      	lsls	r2, r2, #1
 8005256:	3101      	adds	r1, #1
 8005258:	e7ef      	b.n	800523a <__ieee754_sqrt+0x136>
 800525a:	4680      	mov	r8, r0
 800525c:	e7bd      	b.n	80051da <__ieee754_sqrt+0xd6>
 800525e:	bf00      	nop
 8005260:	7ff00000 	.word	0x7ff00000

08005264 <_init>:
 8005264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005266:	bf00      	nop
 8005268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526a:	bc08      	pop	{r3}
 800526c:	469e      	mov	lr, r3
 800526e:	4770      	bx	lr

08005270 <_fini>:
 8005270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005272:	bf00      	nop
 8005274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005276:	bc08      	pop	{r3}
 8005278:	469e      	mov	lr, r3
 800527a:	4770      	bx	lr
